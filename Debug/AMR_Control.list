
AMR_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800a278  0800a278  0001a278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e0  0800a4e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e8  0800a4e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4e8  0800a4e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000010  0800a4fc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  0800a4fc  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a19  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ef  00000000  00000000  00030a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00032f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b68  00000000  00000000  00033e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bcb  00000000  00000000  00034970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011353  00000000  00000000  0004b53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f3a3  00000000  00000000  0005c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004344  00000000  00000000  000ebc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000eff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a260 	.word	0x0800a260

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800a260 	.word	0x0800a260

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc8:	f000 b970 	b.w	8000eac <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9e08      	ldr	r6, [sp, #32]
 8000bea:	460d      	mov	r5, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	460f      	mov	r7, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14a      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4694      	mov	ip, r2
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0xe2>
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	b143      	cbz	r3, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	f1c3 0220 	rsb	r2, r3, #32
 8000c08:	409f      	lsls	r7, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	409c      	lsls	r4, r3
 8000c12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c16:	fa1f f58c 	uxth.w	r5, ip
 8000c1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c1e:	0c22      	lsrs	r2, r4, #16
 8000c20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c28:	fb01 f005 	mul.w	r0, r1, r5
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d90a      	bls.n	8000c46 <__udivmoddi4+0x62>
 8000c30:	eb1c 0202 	adds.w	r2, ip, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c38:	f080 811c 	bcs.w	8000e74 <__udivmoddi4+0x290>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f240 8119 	bls.w	8000e74 <__udivmoddi4+0x290>
 8000c42:	3902      	subs	r1, #2
 8000c44:	4462      	add	r2, ip
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c56:	fb00 f505 	mul.w	r5, r0, r5
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x90>
 8000c5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c62:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x294>
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x294>
 8000c70:	4464      	add	r4, ip
 8000c72:	3802      	subs	r0, #2
 8000c74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11e      	cbz	r6, 8000c86 <__udivmoddi4+0xa2>
 8000c7e:	40dc      	lsrs	r4, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	e9c6 4300 	strd	r4, r3, [r6]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0xbc>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f000 80ed 	beq.w	8000e6e <__udivmoddi4+0x28a>
 8000c94:	2100      	movs	r1, #0
 8000c96:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	fab3 f183 	clz	r1, r3
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	d149      	bne.n	8000d3c <__udivmoddi4+0x158>
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d302      	bcc.n	8000cb2 <__udivmoddi4+0xce>
 8000cac:	4282      	cmp	r2, r0
 8000cae:	f200 80f8 	bhi.w	8000ea2 <__udivmoddi4+0x2be>
 8000cb2:	1a84      	subs	r4, r0, r2
 8000cb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d0e2      	beq.n	8000c86 <__udivmoddi4+0xa2>
 8000cc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc4:	e7df      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000cc6:	b902      	cbnz	r2, 8000cca <__udivmoddi4+0xe6>
 8000cc8:	deff      	udf	#255	; 0xff
 8000cca:	fab2 f382 	clz	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8090 	bne.w	8000df4 <__udivmoddi4+0x210>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce8:	0c22      	lsrs	r2, r4, #16
 8000cea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cee:	fb0e f005 	mul.w	r0, lr, r5
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000cf6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x122>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2b8>
 8000d06:	4645      	mov	r5, r8
 8000d08:	1a12      	subs	r2, r2, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x14e>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x14c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c2>
 8000d30:	4610      	mov	r0, r2
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3a:	e79f      	b.n	8000c7c <__udivmoddi4+0x98>
 8000d3c:	f1c1 0720 	rsb	r7, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	40fd      	lsrs	r5, r7
 8000d54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	fb09 5518 	mls	r5, r9, r8, r5
 8000d66:	0c1c      	lsrs	r4, r3, #16
 8000d68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b0>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2b4>
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2b4>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4464      	add	r4, ip
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	b29d      	uxth	r5, r3
 8000d98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000da0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1da>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2ac>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2ac>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	4464      	add	r4, ip
 8000dbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46ae      	mov	lr, r5
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x29c>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x298>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x208>
 8000dd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dda:	eb64 040e 	sbc.w	r4, r4, lr
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40ca      	lsrs	r2, r1
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	4317      	orrs	r7, r2
 8000de8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dec:	4618      	mov	r0, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	f1c3 0120 	rsb	r1, r3, #32
 8000df8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000e00:	fa25 f101 	lsr.w	r1, r5, r1
 8000e04:	409d      	lsls	r5, r3
 8000e06:	432a      	orrs	r2, r5
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e14:	fb07 1510 	mls	r5, r7, r0, r1
 8000e18:	0c11      	lsrs	r1, r2, #16
 8000e1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e22:	428d      	cmp	r5, r1
 8000e24:	fa04 f403 	lsl.w	r4, r4, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x258>
 8000e2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e34:	428d      	cmp	r5, r1
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	1b49      	subs	r1, r1, r5
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e44:	fb07 1115 	mls	r1, r7, r5, r1
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x282>
 8000e54:	eb1c 0202 	adds.w	r2, ip, r2
 8000e58:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000e5e:	4291      	cmp	r1, r2
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000e62:	3d02      	subs	r5, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a52      	subs	r2, r2, r1
 8000e68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0xfc>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000e74:	4639      	mov	r1, r7
 8000e76:	e6e6      	b.n	8000c46 <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x90>
 8000e7c:	4548      	cmp	r0, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e8c:	4645      	mov	r5, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x282>
 8000e90:	462b      	mov	r3, r5
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1da>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x258>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b0>
 8000e9c:	3d02      	subs	r5, #2
 8000e9e:	4462      	add	r2, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x124>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e70a      	b.n	8000cbc <__udivmoddi4+0xd8>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x14e>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <aktuator_down>:
 *  Created on: Feb 9, 2024
 *      Author: greatreyhan
 */
#include "Aktuator.h"

void aktuator_down(aktuator_t drv){
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	f107 0c08 	add.w	ip, r7, #8
 8000eba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(drv.PORT_IN1, drv.PIN_IN1, GPIO_PIN_RESET);
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	8b39      	ldrh	r1, [r7, #24]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 ff99 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN2, drv.PIN_IN2, GPIO_PIN_SET);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8b79      	ldrh	r1, [r7, #26]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 ff93 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN3, drv.PIN_IN3, GPIO_PIN_RESET);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	8bb9      	ldrh	r1, [r7, #28]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 ff8d 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN4, drv.PIN_IN4, GPIO_PIN_SET);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	8bf9      	ldrh	r1, [r7, #30]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 ff87 	bl	8005dfc <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef6:	b004      	add	sp, #16
 8000ef8:	4770      	bx	lr

08000efa <aktuator_up>:

void aktuator_up(aktuator_t drv){
 8000efa:	b084      	sub	sp, #16
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	f107 0c08 	add.w	ip, r7, #8
 8000f04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(drv.PORT_IN1, drv.PIN_IN1, GPIO_PIN_SET);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	8b39      	ldrh	r1, [r7, #24]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 ff74 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN2, drv.PIN_IN2, GPIO_PIN_RESET);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	8b79      	ldrh	r1, [r7, #26]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 ff6e 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN3, drv.PIN_IN3, GPIO_PIN_SET);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	8bb9      	ldrh	r1, [r7, #28]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 ff68 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN4, drv.PIN_IN4, GPIO_PIN_RESET);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	8bf9      	ldrh	r1, [r7, #30]
 8000f30:	2200      	movs	r2, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 ff62 	bl	8005dfc <HAL_GPIO_WritePin>
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr

08000f44 <aktuator_reset>:

void aktuator_reset(aktuator_t drv){
 8000f44:	b084      	sub	sp, #16
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	f107 0c08 	add.w	ip, r7, #8
 8000f4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(drv.PORT_IN1, drv.PIN_IN1, GPIO_PIN_RESET);
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	8b39      	ldrh	r1, [r7, #24]
 8000f56:	2200      	movs	r2, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 ff4f 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN2, drv.PIN_IN2, GPIO_PIN_RESET);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8b79      	ldrh	r1, [r7, #26]
 8000f62:	2200      	movs	r2, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 ff49 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN3, drv.PIN_IN3, GPIO_PIN_RESET);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	8bb9      	ldrh	r1, [r7, #28]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 ff43 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN4, drv.PIN_IN4, GPIO_PIN_RESET);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	8bf9      	ldrh	r1, [r7, #30]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 ff3d 	bl	8005dfc <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f8a:	b004      	add	sp, #16
 8000f8c:	4770      	bx	lr

08000f8e <agv_run_motor>:

// Berdasarkan jarak roda ke titik pusat dalam meter
#define R_AMR	0.50
//#define R_AMR	0.46

void agv_run_motor(motor_t motor, int16_t speed){
 8000f8e:	b084      	sub	sp, #16
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	f107 0c08 	add.w	ip, r7, #8
 8000f98:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_SET);
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 ff2a 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_SET);
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000fac:	2201      	movs	r2, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 ff24 	bl	8005dfc <HAL_GPIO_WritePin>
	if(speed > 0){
 8000fb4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd62      	ble.n	8001082 <agv_run_motor+0xf4>
		if(motor.channel_R == 1){
 8000fbc:	7e3b      	ldrb	r3, [r7, #24]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d109      	bne.n	8000fd6 <agv_run_motor+0x48>
			motor.tim_number_R->CCR1 = speed;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 fc2e 	bl	8006830 <HAL_TIM_PWM_Start>
 8000fd4:	e025      	b.n	8001022 <agv_run_motor+0x94>
		}
		else if(motor.channel_R == 2){
 8000fd6:	7e3b      	ldrb	r3, [r7, #24]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d109      	bne.n	8000ff0 <agv_run_motor+0x62>
			motor.tim_number_R->CCR2 = speed;
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000fe2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fc21 	bl	8006830 <HAL_TIM_PWM_Start>
 8000fee:	e018      	b.n	8001022 <agv_run_motor+0x94>
		}
		else if(motor.channel_R == 3){
 8000ff0:	7e3b      	ldrb	r3, [r7, #24]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d109      	bne.n	800100a <agv_run_motor+0x7c>
			motor.tim_number_R->CCR3 = speed;
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2108      	movs	r1, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f005 fc14 	bl	8006830 <HAL_TIM_PWM_Start>
 8001008:	e00b      	b.n	8001022 <agv_run_motor+0x94>
		}
		else if(motor.channel_R == 4){
 800100a:	7e3b      	ldrb	r3, [r7, #24]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d108      	bne.n	8001022 <agv_run_motor+0x94>
			motor.tim_number_R->CCR4 = speed;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	210c      	movs	r1, #12
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fc07 	bl	8006830 <HAL_TIM_PWM_Start>
		}
		if(motor.channel_L == 1){
 8001022:	7e7b      	ldrb	r3, [r7, #25]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d108      	bne.n	800103a <agv_run_motor+0xac>
			motor.tim_number_L->CCR1 = 0;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2200      	movs	r2, #0
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fbfc 	bl	8006830 <HAL_TIM_PWM_Start>
		else if(motor.channel_L == 4){
			motor.tim_number_L->CCR4 = -speed;
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
		}
	}
}
 8001038:	e08d      	b.n	8001156 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 800103a:	7e7b      	ldrb	r3, [r7, #25]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d108      	bne.n	8001052 <agv_run_motor+0xc4>
			motor.tim_number_L->CCR2 = 0;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2200      	movs	r2, #0
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2104      	movs	r1, #4
 800104a:	4618      	mov	r0, r3
 800104c:	f005 fbf0 	bl	8006830 <HAL_TIM_PWM_Start>
}
 8001050:	e081      	b.n	8001156 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8001052:	7e7b      	ldrb	r3, [r7, #25]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d108      	bne.n	800106a <agv_run_motor+0xdc>
			motor.tim_number_L->CCR3 = 0;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2200      	movs	r2, #0
 800105c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2108      	movs	r1, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f005 fbe4 	bl	8006830 <HAL_TIM_PWM_Start>
}
 8001068:	e075      	b.n	8001156 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 800106a:	7e7b      	ldrb	r3, [r7, #25]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d172      	bne.n	8001156 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = 0;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2200      	movs	r2, #0
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	210c      	movs	r1, #12
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fbd8 	bl	8006830 <HAL_TIM_PWM_Start>
}
 8001080:	e069      	b.n	8001156 <agv_run_motor+0x1c8>
	else if(speed < 0){
 8001082:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001086:	2b00      	cmp	r3, #0
 8001088:	da65      	bge.n	8001156 <agv_run_motor+0x1c8>
		if(motor.channel_R == 1){
 800108a:	7e3b      	ldrb	r3, [r7, #24]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <agv_run_motor+0x114>
			motor.tim_number_R->CCR1 = 0;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	2200      	movs	r2, #0
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fbc8 	bl	8006830 <HAL_TIM_PWM_Start>
 80010a0:	e022      	b.n	80010e8 <agv_run_motor+0x15a>
		else if(motor.channel_R == 2){
 80010a2:	7e3b      	ldrb	r3, [r7, #24]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d108      	bne.n	80010ba <agv_run_motor+0x12c>
			motor.tim_number_R->CCR2 = 0;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2200      	movs	r2, #0
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fbbc 	bl	8006830 <HAL_TIM_PWM_Start>
 80010b8:	e016      	b.n	80010e8 <agv_run_motor+0x15a>
		else if(motor.channel_R == 3){
 80010ba:	7e3b      	ldrb	r3, [r7, #24]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d108      	bne.n	80010d2 <agv_run_motor+0x144>
			motor.tim_number_R->CCR3 = 0;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2200      	movs	r2, #0
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2108      	movs	r1, #8
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 fbb0 	bl	8006830 <HAL_TIM_PWM_Start>
 80010d0:	e00a      	b.n	80010e8 <agv_run_motor+0x15a>
		else if(motor.channel_R == 4){
 80010d2:	7e3b      	ldrb	r3, [r7, #24]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d107      	bne.n	80010e8 <agv_run_motor+0x15a>
			motor.tim_number_R->CCR4 = 0;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	210c      	movs	r1, #12
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 fba4 	bl	8006830 <HAL_TIM_PWM_Start>
		if(motor.channel_L == 1){
 80010e8:	7e7b      	ldrb	r3, [r7, #25]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d10a      	bne.n	8001104 <agv_run_motor+0x176>
			motor.tim_number_L->CCR1 = -speed;
 80010ee:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80010f2:	425a      	negs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fb97 	bl	8006830 <HAL_TIM_PWM_Start>
}
 8001102:	e028      	b.n	8001156 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 8001104:	7e7b      	ldrb	r3, [r7, #25]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10a      	bne.n	8001120 <agv_run_motor+0x192>
			motor.tim_number_L->CCR2 = -speed;
 800110a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800110e:	425a      	negs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2104      	movs	r1, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f005 fb89 	bl	8006830 <HAL_TIM_PWM_Start>
}
 800111e:	e01a      	b.n	8001156 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8001120:	7e7b      	ldrb	r3, [r7, #25]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d10a      	bne.n	800113c <agv_run_motor+0x1ae>
			motor.tim_number_L->CCR3 = -speed;
 8001126:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800112a:	425a      	negs	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2108      	movs	r1, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fb7b 	bl	8006830 <HAL_TIM_PWM_Start>
}
 800113a:	e00c      	b.n	8001156 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 800113c:	7e7b      	ldrb	r3, [r7, #25]
 800113e:	2b04      	cmp	r3, #4
 8001140:	d109      	bne.n	8001156 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = -speed;
 8001142:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001146:	425a      	negs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	210c      	movs	r1, #12
 8001150:	4618      	mov	r0, r3
 8001152:	f005 fb6d 	bl	8006830 <HAL_TIM_PWM_Start>
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800115e:	b004      	add	sp, #16
 8001160:	4770      	bx	lr

08001162 <agv_stop>:

void agv_stop(motor_t motor){
 8001162:	b084      	sub	sp, #16
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
 8001168:	f107 0c08 	add.w	ip, r7, #8
 800116c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_RESET);
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001174:	2200      	movs	r2, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fe40 	bl	8005dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_RESET);
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001180:	2200      	movs	r2, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fe3a 	bl	8005dfc <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001190:	b004      	add	sp, #16
 8001192:	4770      	bx	lr

08001194 <agv_stop_all>:

void agv_stop_all(motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8001194:	b084      	sub	sp, #16
 8001196:	b5b0      	push	{r4, r5, r7, lr}
 8001198:	b08c      	sub	sp, #48	; 0x30
 800119a:	af0c      	add	r7, sp, #48	; 0x30
 800119c:	f107 0410 	add.w	r4, r7, #16
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_stop(motorA);
 80011a4:	466d      	mov	r5, sp
 80011a6:	f107 0420 	add.w	r4, r7, #32
 80011aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c0:	f7ff ffcf 	bl	8001162 <agv_stop>
	agv_stop(motorB);
 80011c4:	466d      	mov	r5, sp
 80011c6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80011ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	f7ff ffbf 	bl	8001162 <agv_stop>
	agv_stop(motorC);
 80011e4:	466d      	mov	r5, sp
 80011e6:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001200:	f7ff ffaf 	bl	8001162 <agv_stop>
	agv_stop(motorD);
 8001204:	466d      	mov	r5, sp
 8001206:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001216:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800121a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001220:	f7ff ff9f 	bl	8001162 <agv_stop>
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800122c:	b004      	add	sp, #16
 800122e:	4770      	bx	lr

08001230 <agv_reset_all>:

void agv_reset_all(motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8001230:	b084      	sub	sp, #16
 8001232:	b5b0      	push	{r4, r5, r7, lr}
 8001234:	b08c      	sub	sp, #48	; 0x30
 8001236:	af0c      	add	r7, sp, #48	; 0x30
 8001238:	f107 0410 	add.w	r4, r7, #16
 800123c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_run_motor(motorA,0);
 8001240:	2300      	movs	r3, #0
 8001242:	930b      	str	r3, [sp, #44]	; 0x2c
 8001244:	466d      	mov	r5, sp
 8001246:	f107 0420 	add.w	r4, r7, #32
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001252:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001256:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001260:	f7ff fe95 	bl	8000f8e <agv_run_motor>
	agv_run_motor(motorB,0);
 8001264:	2300      	movs	r3, #0
 8001266:	930b      	str	r3, [sp, #44]	; 0x2c
 8001268:	466d      	mov	r5, sp
 800126a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800127a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800127e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	f7ff fe83 	bl	8000f8e <agv_run_motor>
	agv_run_motor(motorC,0);
 8001288:	2300      	movs	r3, #0
 800128a:	930b      	str	r3, [sp, #44]	; 0x2c
 800128c:	466d      	mov	r5, sp
 800128e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800129e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	f7ff fe71 	bl	8000f8e <agv_run_motor>
	agv_run_motor(motorD,0);
 80012ac:	2300      	movs	r3, #0
 80012ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80012b0:	466d      	mov	r5, sp
 80012b2:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80012b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012cc:	f7ff fe5f 	bl	8000f8e <agv_run_motor>
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr

080012dc <agv_encoder_start>:

void agv_encoder_start(encoder_t encoder, TIM_HandleTypeDef* tim,TIM_TypeDef* tim_number){
 80012dc:	b084      	sub	sp, #16
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	f107 0c08 	add.w	ip, r7, #8
 80012e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	encoder.tim = tim;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	60bb      	str	r3, [r7, #8]
	encoder.tim_number = tim_number;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start_IT(tim, TIM_CHANNEL_ALL);
 80012f2:	213c      	movs	r1, #60	; 0x3c
 80012f4:	6a38      	ldr	r0, [r7, #32]
 80012f6:	f005 fbf1 	bl	8006adc <HAL_TIM_Encoder_Start_IT>
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001302:	b004      	add	sp, #16
 8001304:	4770      	bx	lr

08001306 <agv_kinematic_ext_Sx>:
double agv_kinematic_St(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
	double st = (((pos_A)/R_AMR)+((pos_B)/R_AMR)+((pos_C)/R_AMR)+((pos_D)/R_AMR))*0.5;
	return st;
}

double agv_kinematic_ext_Sx(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 8001306:	b580      	push	{r7, lr}
 8001308:	b088      	sub	sp, #32
 800130a:	af00      	add	r7, sp, #0
 800130c:	6178      	str	r0, [r7, #20]
 800130e:	6139      	str	r1, [r7, #16]
 8001310:	60fa      	str	r2, [r7, #12]
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	ed87 0b00 	vstr	d0, [r7]
	double sx = pos_D;
 8001318:	68b8      	ldr	r0, [r7, #8]
 800131a:	f7ff f8af 	bl	800047c <__aeabi_i2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return sx;
 8001326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800132a:	ec43 2b17 	vmov	d7, r2, r3
}
 800132e:	eeb0 0a47 	vmov.f32	s0, s14
 8001332:	eef0 0a67 	vmov.f32	s1, s15
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <agv_kinematic_ext_Sy>:

double agv_kinematic_ext_Sy(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6178      	str	r0, [r7, #20]
 8001344:	6139      	str	r1, [r7, #16]
 8001346:	60fa      	str	r2, [r7, #12]
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	ed87 0b00 	vstr	d0, [r7]
	double sy = pos_C;
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff f894 	bl	800047c <__aeabi_i2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return sy;
 800135c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001360:	ec43 2b17 	vmov	d7, r2, r3
}
 8001364:	eeb0 0a47 	vmov.f32	s0, s14
 8001368:	eef0 0a67 	vmov.f32	s1, s15
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	0000      	movs	r0, r0
 8001374:	0000      	movs	r0, r0
	...

08001378 <agv_kinematic_ext_St>:
double agv_kinematic_ext_St(int last_x, int last_y, int new_x, int new_y, double yaw){
 8001378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800137c:	b088      	sub	sp, #32
 800137e:	af00      	add	r7, sp, #0
 8001380:	6178      	str	r0, [r7, #20]
 8001382:	6139      	str	r1, [r7, #16]
 8001384:	60fa      	str	r2, [r7, #12]
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	ed87 0b00 	vstr	d0, [r7]
    double st = atan2((double)(new_y-last_y), (double)new_x-last_x) * (180.0/M_PI) ;
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f872 	bl	800047c <__aeabi_i2d>
 8001398:	4680      	mov	r8, r0
 800139a:	4689      	mov	r9, r1
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff f86d 	bl	800047c <__aeabi_i2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff f868 	bl	800047c <__aeabi_i2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff14 	bl	80001e0 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	ec43 2b17 	vmov	d7, r2, r3
 80013c0:	eeb0 1a47 	vmov.f32	s2, s14
 80013c4:	eef0 1a67 	vmov.f32	s3, s15
 80013c8:	ec49 8b10 	vmov	d0, r8, r9
 80013cc:	f007 fc44 	bl	8008c58 <atan2>
 80013d0:	ec51 0b10 	vmov	r0, r1, d0
 80013d4:	a30a      	add	r3, pc, #40	; (adr r3, 8001400 <agv_kinematic_ext_St+0x88>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f8b9 	bl	8000550 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return st;
 80013e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013fe:	bf00      	nop
 8001400:	1a63c1f8 	.word	0x1a63c1f8
 8001404:	404ca5dc 	.word	0x404ca5dc

08001408 <agv_inverse_kinematic>:

///////////////////////////////////////////// INVERSE KINEMATICS ///////////////////////////////////////////////////

void agv_inverse_kinematic(double sx, double sy, double st, double yaw, motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8001408:	b084      	sub	sp, #16
 800140a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140e:	b0ca      	sub	sp, #296	; 0x128
 8001410:	af38      	add	r7, sp, #224	; 0xe0
 8001412:	ed87 0b08 	vstr	d0, [r7, #32]
 8001416:	ed87 1b06 	vstr	d1, [r7, #24]
 800141a:	ed87 2b04 	vstr	d2, [r7, #16]
 800141e:	ed87 3b02 	vstr	d3, [r7, #8]
 8001422:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 8001426:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	double V1 = (-sin(DEG_TO_RAD(45+yaw))*sx) + (cos(DEG_TO_RAD(45+yaw))*sy) + (R_AMR*st);
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4bd8      	ldr	r3, [pc, #864]	; (8001790 <agv_inverse_kinematic+0x388>)
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7fe fed6 	bl	80001e4 <__adddf3>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a3cb      	add	r3, pc, #812	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f883 	bl	8000550 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4bcf      	ldr	r3, [pc, #828]	; (8001794 <agv_inverse_kinematic+0x38c>)
 8001458:	f7ff f9a4 	bl	80007a4 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	ec43 2b17 	vmov	d7, r2, r3
 8001464:	eeb0 0a47 	vmov.f32	s0, s14
 8001468:	eef0 0a67 	vmov.f32	s1, s15
 800146c:	f007 fc4c 	bl	8008d08 <sin>
 8001470:	ec53 2b10 	vmov	r2, r3, d0
 8001474:	4614      	mov	r4, r2
 8001476:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800147a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7ff f865 	bl	8000550 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4bbf      	ldr	r3, [pc, #764]	; (8001790 <agv_inverse_kinematic+0x388>)
 8001494:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001498:	f7fe fea4 	bl	80001e4 <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	a3b2      	add	r3, pc, #712	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f851 	bl	8000550 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4bb6      	ldr	r3, [pc, #728]	; (8001794 <agv_inverse_kinematic+0x38c>)
 80014bc:	f7ff f972 	bl	80007a4 <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	ec43 2b17 	vmov	d7, r2, r3
 80014c8:	eeb0 0a47 	vmov.f32	s0, s14
 80014cc:	eef0 0a67 	vmov.f32	s1, s15
 80014d0:	f007 fbc6 	bl	8008c60 <cos>
 80014d4:	ec51 0b10 	vmov	r0, r1, d0
 80014d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014dc:	f7ff f838 	bl	8000550 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f7fe fe7c 	bl	80001e4 <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4ba7      	ldr	r3, [pc, #668]	; (8001798 <agv_inverse_kinematic+0x390>)
 80014fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014fe:	f7ff f827 	bl	8000550 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe6b 	bl	80001e4 <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double V2 = (-sin(DEG_TO_RAD(135+yaw))*sx) + (cos(DEG_TO_RAD(135+yaw))*sy) + (R_AMR*st);
 8001516:	a398      	add	r3, pc, #608	; (adr r3, 8001778 <agv_inverse_kinematic+0x370>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001520:	f7fe fe60 	bl	80001e4 <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	a390      	add	r3, pc, #576	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f80d 	bl	8000550 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b94      	ldr	r3, [pc, #592]	; (8001794 <agv_inverse_kinematic+0x38c>)
 8001544:	f7ff f92e 	bl	80007a4 <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	ec43 2b17 	vmov	d7, r2, r3
 8001550:	eeb0 0a47 	vmov.f32	s0, s14
 8001554:	eef0 0a67 	vmov.f32	s1, s15
 8001558:	f007 fbd6 	bl	8008d08 <sin>
 800155c:	ec53 2b10 	vmov	r2, r3, d0
 8001560:	603a      	str	r2, [r7, #0]
 8001562:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800156c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001570:	f7fe ffee 	bl	8000550 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4614      	mov	r4, r2
 800157a:	461d      	mov	r5, r3
 800157c:	a37e      	add	r3, pc, #504	; (adr r3, 8001778 <agv_inverse_kinematic+0x370>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001586:	f7fe fe2d 	bl	80001e4 <__adddf3>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	a377      	add	r3, pc, #476	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe ffda 	bl	8000550 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <agv_inverse_kinematic+0x38c>)
 80015aa:	f7ff f8fb 	bl	80007a4 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	ec43 2b17 	vmov	d7, r2, r3
 80015b6:	eeb0 0a47 	vmov.f32	s0, s14
 80015ba:	eef0 0a67 	vmov.f32	s1, s15
 80015be:	f007 fb4f 	bl	8008c60 <cos>
 80015c2:	ec51 0b10 	vmov	r0, r1, d0
 80015c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ca:	f7fe ffc1 	bl	8000550 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fe05 	bl	80001e4 <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4614      	mov	r4, r2
 80015e0:	461d      	mov	r5, r3
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <agv_inverse_kinematic+0x390>)
 80015e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ec:	f7fe ffb0 	bl	8000550 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fdf4 	bl	80001e4 <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double V3 = (-sin(DEG_TO_RAD(225+yaw))*sx) + (cos(DEG_TO_RAD(225+yaw))*sy) + (R_AMR*st);
 8001604:	a35e      	add	r3, pc, #376	; (adr r3, 8001780 <agv_inverse_kinematic+0x378>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800160e:	f7fe fde9 	bl	80001e4 <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	a355      	add	r3, pc, #340	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe ff96 	bl	8000550 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b58      	ldr	r3, [pc, #352]	; (8001794 <agv_inverse_kinematic+0x38c>)
 8001632:	f7ff f8b7 	bl	80007a4 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	ec43 2b17 	vmov	d7, r2, r3
 800163e:	eeb0 0a47 	vmov.f32	s0, s14
 8001642:	eef0 0a67 	vmov.f32	s1, s15
 8001646:	f007 fb5f 	bl	8008d08 <sin>
 800164a:	ec53 2b10 	vmov	r2, r3, d0
 800164e:	4692      	mov	sl, r2
 8001650:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001654:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001658:	4650      	mov	r0, sl
 800165a:	4659      	mov	r1, fp
 800165c:	f7fe ff78 	bl	8000550 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	a345      	add	r3, pc, #276	; (adr r3, 8001780 <agv_inverse_kinematic+0x378>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001672:	f7fe fdb7 	bl	80001e4 <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a33c      	add	r3, pc, #240	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ff64 	bl	8000550 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <agv_inverse_kinematic+0x38c>)
 8001696:	f7ff f885 	bl	80007a4 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b17 	vmov	d7, r2, r3
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	eef0 0a67 	vmov.f32	s1, s15
 80016aa:	f007 fad9 	bl	8008c60 <cos>
 80016ae:	ec51 0b10 	vmov	r0, r1, d0
 80016b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b6:	f7fe ff4b 	bl	8000550 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7fe fd8f 	bl	80001e4 <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4614      	mov	r4, r2
 80016cc:	461d      	mov	r5, r3
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <agv_inverse_kinematic+0x390>)
 80016d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d8:	f7fe ff3a 	bl	8000550 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe fd7e 	bl	80001e4 <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double V4 = (-sin(DEG_TO_RAD(315+yaw))*sx) + (cos(DEG_TO_RAD(315+yaw))*sy) + (R_AMR*st);
 80016f0:	a325      	add	r3, pc, #148	; (adr r3, 8001788 <agv_inverse_kinematic+0x380>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016fa:	f7fe fd73 	bl	80001e4 <__adddf3>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	a31a      	add	r3, pc, #104	; (adr r3, 8001770 <agv_inverse_kinematic+0x368>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff20 	bl	8000550 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <agv_inverse_kinematic+0x38c>)
 800171e:	f7ff f841 	bl	80007a4 <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b17 	vmov	d7, r2, r3
 800172a:	eeb0 0a47 	vmov.f32	s0, s14
 800172e:	eef0 0a67 	vmov.f32	s1, s15
 8001732:	f007 fae9 	bl	8008d08 <sin>
 8001736:	ec53 2b10 	vmov	r2, r3, d0
 800173a:	4690      	mov	r8, r2
 800173c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001740:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001744:	4640      	mov	r0, r8
 8001746:	4649      	mov	r1, r9
 8001748:	f7fe ff02 	bl	8000550 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	a30c      	add	r3, pc, #48	; (adr r3, 8001788 <agv_inverse_kinematic+0x380>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800175e:	f7fe fd41 	bl	80001e4 <__adddf3>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	e017      	b.n	800179c <agv_inverse_kinematic+0x394>
 800176c:	f3af 8000 	nop.w
 8001770:	54442d18 	.word	0x54442d18
 8001774:	400921fb 	.word	0x400921fb
 8001778:	00000000 	.word	0x00000000
 800177c:	4060e000 	.word	0x4060e000
 8001780:	00000000 	.word	0x00000000
 8001784:	406c2000 	.word	0x406c2000
 8001788:	00000000 	.word	0x00000000
 800178c:	4073b000 	.word	0x4073b000
 8001790:	40468000 	.word	0x40468000
 8001794:	40668000 	.word	0x40668000
 8001798:	3fe00000 	.word	0x3fe00000
 800179c:	a362      	add	r3, pc, #392	; (adr r3, 8001928 <agv_inverse_kinematic+0x520>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fed5 	bl	8000550 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <agv_inverse_kinematic+0x518>)
 80017b4:	f7fe fff6 	bl	80007a4 <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	ec43 2b17 	vmov	d7, r2, r3
 80017c0:	eeb0 0a47 	vmov.f32	s0, s14
 80017c4:	eef0 0a67 	vmov.f32	s1, s15
 80017c8:	f007 fa4a 	bl	8008c60 <cos>
 80017cc:	ec51 0b10 	vmov	r0, r1, d0
 80017d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d4:	f7fe febc 	bl	8000550 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4620      	mov	r0, r4
 80017de:	4629      	mov	r1, r5
 80017e0:	f7fe fd00 	bl	80001e4 <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <agv_inverse_kinematic+0x51c>)
 80017f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017f6:	f7fe feab 	bl	8000550 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7fe fcef 	bl	80001e4 <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	agv_reset_all(motorA, motorB, motorC, motorD);
 800180e:	ad29      	add	r5, sp, #164	; 0xa4
 8001810:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8001814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001824:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001828:	ad1a      	add	r5, sp, #104	; 0x68
 800182a:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800183e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001842:	ad0b      	add	r5, sp, #44	; 0x2c
 8001844:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8001848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001858:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800185c:	466d      	mov	r5, sp
 800185e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800186e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001872:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001878:	f7ff fcda 	bl	8001230 <agv_reset_all>
	agv_speed_to_pwm(motorA,V1);
 800187c:	466d      	mov	r5, sp
 800187e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800188e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001892:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800189c:	f000 f848 	bl	8001930 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorB,V2);
 80018a0:	466d      	mov	r5, sp
 80018a2:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80018a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018bc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80018c0:	f000 f836 	bl	8001930 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorC,V3);
 80018c4:	466d      	mov	r5, sp
 80018c6:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80018e4:	f000 f824 	bl	8001930 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorD,V4);
 80018e8:	466d      	mov	r5, sp
 80018ea:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018fe:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001904:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001908:	f000 f812 	bl	8001930 <agv_speed_to_pwm>
}
 800190c:	bf00      	nop
 800190e:	3748      	adds	r7, #72	; 0x48
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001916:	b004      	add	sp, #16
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w
 8001920:	40668000 	.word	0x40668000
 8001924:	3fe00000 	.word	0x3fe00000
 8001928:	54442d18 	.word	0x54442d18
 800192c:	400921fb 	.word	0x400921fb

08001930 <agv_speed_to_pwm>:
	double k_wheel = 3.14*100; // 100 -> diameter
	return encoder.position*(7/k_wheel); // 7->PPR
}

// in mm
void agv_speed_to_pwm(motor_t motor, double speed){
 8001930:	b084      	sub	sp, #16
 8001932:	b5b0      	push	{r4, r5, r7, lr}
 8001934:	b08e      	sub	sp, #56	; 0x38
 8001936:	af0c      	add	r7, sp, #48	; 0x30
 8001938:	f107 0418 	add.w	r4, r7, #24
 800193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001940:	ed87 0b00 	vstr	d0, [r7]
	// Maximum 2,617 m/s -> PWM 1000
	if(speed < 2617){
 8001944:	a322      	add	r3, pc, #136	; (adr r3, 80019d0 <agv_speed_to_pwm+0xa0>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800194e:	f7ff f871 	bl	8000a34 <__aeabi_dcmplt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <agv_speed_to_pwm+0x6a>
		agv_run_motor(motor, (speed*(5*M_PI/60)));
 8001958:	a31f      	add	r3, pc, #124	; (adr r3, 80019d8 <agv_speed_to_pwm+0xa8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001962:	f7fe fdf5 	bl	8000550 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f889 	bl	8000a84 <__aeabi_d2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	b21b      	sxth	r3, r3
 8001976:	930b      	str	r3, [sp, #44]	; 0x2c
 8001978:	466d      	mov	r5, sp
 800197a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800197e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001986:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800198a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001994:	f7ff fafb 	bl	8000f8e <agv_run_motor>
	}
	else{
		agv_run_motor(motor, (2617*(5*M_PI/60)));
	}
}
 8001998:	e012      	b.n	80019c0 <agv_speed_to_pwm+0x90>
		agv_run_motor(motor, (2617*(5*M_PI/60)));
 800199a:	f240 23ad 	movw	r3, #685	; 0x2ad
 800199e:	930b      	str	r3, [sp, #44]	; 0x2c
 80019a0:	466d      	mov	r5, sp
 80019a2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80019a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019bc:	f7ff fae7 	bl	8000f8e <agv_run_motor>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019ca:	b004      	add	sp, #16
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40a47200 	.word	0x40a47200
 80019d8:	382d7365 	.word	0x382d7365
 80019dc:	3fd0c152 	.word	0x3fd0c152

080019e0 <PIDController_Init>:
 */


#include "PID_Driver.h"

void PIDController_Init(PIDController *pid) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8001a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a2a:	edc7 0a01 	vstr	s1, [r7, #4]

	// Error signal
    float error = setpoint - measurement;
 8001a2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	edc7 7a05 	vstr	s15, [r7, #20]

	// Proportional
    float proportional = pid->Kp * error;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Integral
    pid->integrator = pid->integrator + 0.5 * pid->Ki * pid->T_sample * (error + pid->prevError);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd23 	bl	80004a0 <__aeabi_f2d>
 8001a5a:	4680      	mov	r8, r0
 8001a5c:	4689      	mov	r9, r1
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd1c 	bl	80004a0 <__aeabi_f2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <PIDController_Update+0x26c>)
 8001a6e:	f7fe fd6f 	bl	8000550 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4692      	mov	sl, r2
 8001a78:	469b      	mov	fp, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd0e 	bl	80004a0 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4650      	mov	r0, sl
 8001a8a:	4659      	mov	r1, fp
 8001a8c:	f7fe fd60 	bl	8000550 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4692      	mov	sl, r2
 8001a96:	469b      	mov	fp, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa6:	ee17 0a90 	vmov	r0, s15
 8001aaa:	f7fe fcf9 	bl	80004a0 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4650      	mov	r0, sl
 8001ab4:	4659      	mov	r1, fp
 8001ab6:	f7fe fd4b 	bl	8000550 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4640      	mov	r0, r8
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	f7fe fb8f 	bl	80001e4 <__adddf3>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f821 	bl	8000b14 <__aeabi_d2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

	// Anti-wind-up via integrator clamping
    if (pid->integrator > pid->limMaxInt) {
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	dd04      	ble.n	8001af8 <PIDController_Update+0xdc>

        pid->integrator = pid->limMaxInt;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
 8001af6:	e00e      	b.n	8001b16 <PIDController_Update+0xfa>

    } else if (pid->integrator < pid->limMinInt) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d503      	bpl.n	8001b16 <PIDController_Update+0xfa>

        pid->integrator = pid->limMinInt;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

    }

	// Derivative (band-limited differentiator)
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fcc0 	bl	80004a0 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	f7fe fb5e 	bl	80001e4 <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4690      	mov	r8, r2
 8001b2e:	4699      	mov	r9, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b36:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	ee17 0a90 	vmov	r0, s15
 8001b42:	f7fe fcad 	bl	80004a0 <__aeabi_f2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f7fe fcff 	bl	8000550 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4690      	mov	r8, r2
 8001b58:	4699      	mov	r9, r3
                        + (2.0 * pid->tau - pid->T_sample) * pid->differentiator)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc9e 	bl	80004a0 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	f7fe fb3c 	bl	80001e4 <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4692      	mov	sl, r2
 8001b72:	469b      	mov	fp, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc91 	bl	80004a0 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4650      	mov	r0, sl
 8001b84:	4659      	mov	r1, fp
 8001b86:	f7fe fb2b 	bl	80001e0 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4692      	mov	sl, r2
 8001b90:	469b      	mov	fp, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc82 	bl	80004a0 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4650      	mov	r0, sl
 8001ba2:	4659      	mov	r1, fp
 8001ba4:	f7fe fcd4 	bl	8000550 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4640      	mov	r0, r8
 8001bae:	4649      	mov	r1, r9
 8001bb0:	f7fe fb18 	bl	80001e4 <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001bb8:	4614      	mov	r4, r2
 8001bba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
                        / (2.0 * pid->tau + pid->T_sample);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc6c 	bl	80004a0 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	f7fe fb0a 	bl	80001e4 <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4690      	mov	r8, r2
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc5f 	bl	80004a0 <__aeabi_f2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4640      	mov	r0, r8
 8001be8:	4649      	mov	r1, r9
 8001bea:	f7fe fafb 	bl	80001e4 <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fdd5 	bl	80007a4 <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ff87 	bl	8000b14 <__aeabi_d2f>
 8001c06:	4602      	mov	r2, r0
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c


	// Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001c12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dd04      	ble.n	8001c4a <PIDController_Update+0x22e>

        pid->out = pid->limMax;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
 8001c48:	e00e      	b.n	8001c68 <PIDController_Update+0x24c>

    } else if (pid->out < pid->limMin) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	d503      	bpl.n	8001c68 <PIDController_Update+0x24c>

        pid->out = pid->limMin;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34

    }

	// Store error and measurement for later use
    pid->prevError       = error;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30

	// Return controller output
    return pid->out;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	ee07 3a90 	vmov	s15, r3
}
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c88:	3fe00000 	.word	0x3fe00000

08001c8c <komunikasi_ctrl_init>:
static uint8_t rx_buf_command[19];
static uint8_t rx_buf_holder[100];
static uint8_t id_holder = 0;
//******************************************** COMMUNICATION TO CONTROL **********************************************//

void komunikasi_ctrl_init(UART_HandleTypeDef* uart_handler){
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	huart_ctrl = uart_handler;
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <komunikasi_ctrl_init+0x1c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000002c 	.word	0x2000002c

08001cac <checksum_ctrl_generator>:

uint8_t checksum_ctrl_generator(uint8_t* arr, uint8_t size){
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73bb      	strb	r3, [r7, #14]
 8001cc0:	e009      	b.n	8001cd6 <checksum_ctrl_generator+0x2a>
 8001cc2:	7bbb      	ldrb	r3, [r7, #14]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	4413      	add	r3, r2
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73bb      	strb	r3, [r7, #14]
 8001cd6:	7bba      	ldrb	r2, [r7, #14]
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d3f1      	bcc.n	8001cc2 <checksum_ctrl_generator+0x16>
	return (chksm & 0xFF);
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <tx_ctrl_send_Odometry>:

bool tx_ctrl_forwading(uint8_t* msg){
	if(HAL_UART_Transmit(huart_ctrl, msg, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}
bool tx_ctrl_send_Odometry(int16_t Sx, int16_t Sy, int16_t St, int16_t Vx, int16_t Vy, int16_t Vt){
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	803b      	strh	r3, [r7, #0]
	uint8_t odom_data[] = {0xA5, 0x5A, 0x15, ((Sx >> 8) & 0XFF), ((Sx) & 0XFF), ((Sy >> 8) & 0XFF), ((Sy) & 0XFF), ((St >> 8) & 0XFF), ((St) & 0XFF), ((Vx >> 8) & 0XFF), ((Vx) & 0XFF), ((Vy >> 8) & 0XFF), ((Vy) & 0XFF), ((Vt >> 8) & 0XFF), ((Vt) & 0XFF), 0x00, 0x00, 0x00, 0x00};
 8001d0a:	23a5      	movs	r3, #165	; 0xa5
 8001d0c:	733b      	strb	r3, [r7, #12]
 8001d0e:	235a      	movs	r3, #90	; 0x5a
 8001d10:	737b      	strb	r3, [r7, #13]
 8001d12:	2315      	movs	r3, #21
 8001d14:	73bb      	strb	r3, [r7, #14]
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	121b      	asrs	r3, r3, #8
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	743b      	strb	r3, [r7, #16]
 8001d28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d2c:	121b      	asrs	r3, r3, #8
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	747b      	strb	r3, [r7, #17]
 8001d34:	88bb      	ldrh	r3, [r7, #4]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	74bb      	strb	r3, [r7, #18]
 8001d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d3e:	121b      	asrs	r3, r3, #8
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	74fb      	strb	r3, [r7, #19]
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	753b      	strb	r3, [r7, #20]
 8001d4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d50:	121b      	asrs	r3, r3, #8
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	757b      	strb	r3, [r7, #21]
 8001d58:	883b      	ldrh	r3, [r7, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	75bb      	strb	r3, [r7, #22]
 8001d5e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d62:	121b      	asrs	r3, r3, #8
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	75fb      	strb	r3, [r7, #23]
 8001d6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	763b      	strb	r3, [r7, #24]
 8001d70:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001d74:	121b      	asrs	r3, r3, #8
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	767b      	strb	r3, [r7, #25]
 8001d7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	76bb      	strb	r3, [r7, #26]
 8001d82:	2300      	movs	r3, #0
 8001d84:	76fb      	strb	r3, [r7, #27]
 8001d86:	2300      	movs	r3, #0
 8001d88:	773b      	strb	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	777b      	strb	r3, [r7, #29]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	77bb      	strb	r3, [r7, #30]
	odom_data[18] = checksum_ctrl_generator(odom_data, 19);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2113      	movs	r1, #19
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff87 	bl	8001cac <checksum_ctrl_generator>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	77bb      	strb	r3, [r7, #30]

	if(HAL_UART_Transmit(huart_ctrl, odom_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <tx_ctrl_send_Odometry+0xdc>)
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f107 010c 	add.w	r1, r7, #12
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	2213      	movs	r2, #19
 8001dae:	f005 fd8f 	bl	80078d0 <HAL_UART_Transmit>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <tx_ctrl_send_Odometry+0xd0>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <tx_ctrl_send_Odometry+0xd2>
	else return false;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000002c 	.word	0x2000002c

08001dcc <rx_ctrl_start_get>:

void rx_ctrl_start_get(void){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_get_ctrl, 19);
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <rx_ctrl_start_get+0x18>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2213      	movs	r2, #19
 8001dd6:	4904      	ldr	r1, [pc, #16]	; (8001de8 <rx_ctrl_start_get+0x1c>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f005 fe04 	bl	80079e6 <HAL_UART_Receive_DMA>
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	20000030 	.word	0x20000030

08001dec <rx_ctrl_get>:

void rx_ctrl_get(com_ctrl_get_t* get){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
		if((rxbuf_get_ctrl[0] == 0xA5) && (rxbuf_get_ctrl[1] == 0x5A)){
 8001df4:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <rx_ctrl_get+0x248>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2ba5      	cmp	r3, #165	; 0xa5
 8001dfa:	f040 8415 	bne.w	8002628 <rx_ctrl_get+0x83c>
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <rx_ctrl_get+0x248>)
 8001e00:	785b      	ldrb	r3, [r3, #1]
 8001e02:	2b5a      	cmp	r3, #90	; 0x5a
 8001e04:	f040 8410 	bne.w	8002628 <rx_ctrl_get+0x83c>

			// Check for ping
			if(rxbuf_get_ctrl[2] == 0x01){
 8001e08:	4b8a      	ldr	r3, [pc, #552]	; (8002034 <rx_ctrl_get+0x248>)
 8001e0a:	789b      	ldrb	r3, [r3, #2]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d104      	bne.n	8001e1a <rx_ctrl_get+0x2e>
				get->cmd = PING;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 8001e18:	e0bc      	b.n	8001f94 <rx_ctrl_get+0x1a8>
			}
			// Check for BNO08X Sensor
			else if(rxbuf_get_ctrl[2] == 0x02){
 8001e1a:	4b86      	ldr	r3, [pc, #536]	; (8002034 <rx_ctrl_get+0x248>)
 8001e1c:	789b      	ldrb	r3, [r3, #2]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	f040 80b8 	bne.w	8001f94 <rx_ctrl_get+0x1a8>

				if((rxbuf_get_ctrl[3] & 0x80)) get->yaw = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8001e24:	4b83      	ldr	r3, [pc, #524]	; (8002034 <rx_ctrl_get+0x248>)
 8001e26:	78db      	ldrb	r3, [r3, #3]
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0c      	bge.n	8001e48 <rx_ctrl_get+0x5c>
 8001e2e:	4b81      	ldr	r3, [pc, #516]	; (8002034 <rx_ctrl_get+0x248>)
 8001e30:	78db      	ldrb	r3, [r3, #3]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <rx_ctrl_get+0x248>)
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
 8001e46:	e00b      	b.n	8001e60 <rx_ctrl_get+0x74>
				else get->yaw = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8001e48:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <rx_ctrl_get+0x248>)
 8001e4a:	78db      	ldrb	r3, [r3, #3]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	4b78      	ldr	r3, [pc, #480]	; (8002034 <rx_ctrl_get+0x248>)
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc

				if((rxbuf_get_ctrl[5] & 0x80)) get->pitch = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8001e60:	4b74      	ldr	r3, [pc, #464]	; (8002034 <rx_ctrl_get+0x248>)
 8001e62:	795b      	ldrb	r3, [r3, #5]
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da0c      	bge.n	8001e84 <rx_ctrl_get+0x98>
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <rx_ctrl_get+0x248>)
 8001e6c:	795b      	ldrb	r3, [r3, #5]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <rx_ctrl_get+0x248>)
 8001e74:	799b      	ldrb	r3, [r3, #6]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 8001e82:	e00b      	b.n	8001e9c <rx_ctrl_get+0xb0>
				else get->pitch = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <rx_ctrl_get+0x248>)
 8001e86:	795b      	ldrb	r3, [r3, #5]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b69      	ldr	r3, [pc, #420]	; (8002034 <rx_ctrl_get+0x248>)
 8001e8e:	799b      	ldrb	r3, [r3, #6]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				if((rxbuf_get_ctrl[7] & 0x80)) get->roll = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 8001e9c:	4b65      	ldr	r3, [pc, #404]	; (8002034 <rx_ctrl_get+0x248>)
 8001e9e:	79db      	ldrb	r3, [r3, #7]
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da0c      	bge.n	8001ec0 <rx_ctrl_get+0xd4>
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <rx_ctrl_get+0x248>)
 8001ea8:	79db      	ldrb	r3, [r3, #7]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	4b61      	ldr	r3, [pc, #388]	; (8002034 <rx_ctrl_get+0x248>)
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 8001ebe:	e00b      	b.n	8001ed8 <rx_ctrl_get+0xec>
				else get->roll = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8001ec0:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <rx_ctrl_get+0x248>)
 8001ec2:	79db      	ldrb	r3, [r3, #7]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	4b5a      	ldr	r3, [pc, #360]	; (8002034 <rx_ctrl_get+0x248>)
 8001eca:	7a1b      	ldrb	r3, [r3, #8]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

				if((rxbuf_get_ctrl[9] & 0x80)) get->x_acceleration = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <rx_ctrl_get+0x248>)
 8001eda:	7a5b      	ldrb	r3, [r3, #9]
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da0c      	bge.n	8001efc <rx_ctrl_get+0x110>
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <rx_ctrl_get+0x248>)
 8001ee4:	7a5b      	ldrb	r3, [r3, #9]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	4b52      	ldr	r3, [pc, #328]	; (8002034 <rx_ctrl_get+0x248>)
 8001eec:	7a9b      	ldrb	r3, [r3, #10]
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
 8001efa:	e00b      	b.n	8001f14 <rx_ctrl_get+0x128>
				else get->x_acceleration = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <rx_ctrl_get+0x248>)
 8001efe:	7a5b      	ldrb	r3, [r3, #9]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <rx_ctrl_get+0x248>)
 8001f06:	7a9b      	ldrb	r3, [r3, #10]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce

				if((rxbuf_get_ctrl[11] & 0x80)) get->y_acceleration = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <rx_ctrl_get+0x248>)
 8001f16:	7adb      	ldrb	r3, [r3, #11]
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da0c      	bge.n	8001f38 <rx_ctrl_get+0x14c>
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <rx_ctrl_get+0x248>)
 8001f20:	7adb      	ldrb	r3, [r3, #11]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <rx_ctrl_get+0x248>)
 8001f28:	7b1b      	ldrb	r3, [r3, #12]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 8001f36:	e00b      	b.n	8001f50 <rx_ctrl_get+0x164>
				else get->y_acceleration = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 8001f38:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <rx_ctrl_get+0x248>)
 8001f3a:	7adb      	ldrb	r3, [r3, #11]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <rx_ctrl_get+0x248>)
 8001f42:	7b1b      	ldrb	r3, [r3, #12]
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0

				if((rxbuf_get_ctrl[13] & 0x80)) get->z_acceleration = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <rx_ctrl_get+0x248>)
 8001f52:	7b5b      	ldrb	r3, [r3, #13]
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da0c      	bge.n	8001f74 <rx_ctrl_get+0x188>
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <rx_ctrl_get+0x248>)
 8001f5c:	7b5b      	ldrb	r3, [r3, #13]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <rx_ctrl_get+0x248>)
 8001f64:	7b9b      	ldrb	r3, [r3, #14]
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
 8001f72:	e00b      	b.n	8001f8c <rx_ctrl_get+0x1a0>
				else get->z_acceleration = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <rx_ctrl_get+0x248>)
 8001f76:	7b5b      	ldrb	r3, [r3, #13]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <rx_ctrl_get+0x248>)
 8001f7e:	7b9b      	ldrb	r3, [r3, #14]
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2

				get->cmd = DATA;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2205      	movs	r2, #5
 8001f90:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
			}

			// Check for Task Done
			if(rxbuf_get_ctrl[2] == 0x03){
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <rx_ctrl_get+0x248>)
 8001f96:	789b      	ldrb	r3, [r3, #2]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d153      	bne.n	8002044 <rx_ctrl_get+0x258>
				if((rxbuf_get_ctrl[3] & 0x80)) get->step = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <rx_ctrl_get+0x248>)
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	b25b      	sxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da0c      	bge.n	8001fc0 <rx_ctrl_get+0x1d4>
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <rx_ctrl_get+0x248>)
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <rx_ctrl_get+0x248>)
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
 8001fbe:	e00b      	b.n	8001fd8 <rx_ctrl_get+0x1ec>
				else get->step = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <rx_ctrl_get+0x248>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <rx_ctrl_get+0x248>)
 8001fca:	791b      	ldrb	r3, [r3, #4]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da

				for(int i = 0; i <= id_holder; i++){
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e01b      	b.n	8002016 <rx_ctrl_get+0x22a>
					for(int j = 0; j < 19;j++){
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	e012      	b.n	800200a <rx_ctrl_get+0x21e>
						rx_buf_holder[(i*19)+j] = 0;
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	441a      	add	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a10      	ldr	r2, [pc, #64]	; (8002038 <rx_ctrl_get+0x24c>)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	54d1      	strb	r1, [r2, r3]
						rx_buf_command[j] = 0;
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <rx_ctrl_get+0x250>)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 19;j++){
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	3301      	adds	r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b12      	cmp	r3, #18
 800200e:	dde9      	ble.n	8001fe4 <rx_ctrl_get+0x1f8>
				for(int i = 0; i <= id_holder; i++){
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <rx_ctrl_get+0x254>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4293      	cmp	r3, r2
 8002020:	dddd      	ble.n	8001fde <rx_ctrl_get+0x1f2>
						}
				}
				id_holder = 0;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <rx_ctrl_get+0x254>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

				get->cmd = DATA;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2205      	movs	r2, #5
 800202c:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 8002030:	e2fa      	b.n	8002628 <rx_ctrl_get+0x83c>
 8002032:	bf00      	nop
 8002034:	20000030 	.word	0x20000030
 8002038:	20000058 	.word	0x20000058
 800203c:	20000044 	.word	0x20000044
 8002040:	200000bc 	.word	0x200000bc
			}

			// Check for Kinematic
			else if(rxbuf_get_ctrl[2] == 0x05){
 8002044:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <rx_ctrl_get+0x48c>)
 8002046:	789b      	ldrb	r3, [r3, #2]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d17c      	bne.n	8002146 <rx_ctrl_get+0x35a>

				if((rxbuf_get_ctrl[3] & 0x80)) get->Sx = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <rx_ctrl_get+0x48c>)
 800204e:	78db      	ldrb	r3, [r3, #3]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0c      	bge.n	8002070 <rx_ctrl_get+0x284>
 8002056:	4b88      	ldr	r3, [pc, #544]	; (8002278 <rx_ctrl_get+0x48c>)
 8002058:	78db      	ldrb	r3, [r3, #3]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	4b86      	ldr	r3, [pc, #536]	; (8002278 <rx_ctrl_get+0x48c>)
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 800206e:	e00b      	b.n	8002088 <rx_ctrl_get+0x29c>
				else get->Sx = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8002070:	4b81      	ldr	r3, [pc, #516]	; (8002278 <rx_ctrl_get+0x48c>)
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <rx_ctrl_get+0x48c>)
 800207a:	791b      	ldrb	r3, [r3, #4]
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

				if((rxbuf_get_ctrl[5] & 0x80)) get->Sy = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8002088:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <rx_ctrl_get+0x48c>)
 800208a:	795b      	ldrb	r3, [r3, #5]
 800208c:	b25b      	sxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	da0c      	bge.n	80020ac <rx_ctrl_get+0x2c0>
 8002092:	4b79      	ldr	r3, [pc, #484]	; (8002278 <rx_ctrl_get+0x48c>)
 8002094:	795b      	ldrb	r3, [r3, #5]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b21a      	sxth	r2, r3
 800209a:	4b77      	ldr	r3, [pc, #476]	; (8002278 <rx_ctrl_get+0x48c>)
 800209c:	799b      	ldrb	r3, [r3, #6]
 800209e:	b21b      	sxth	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 80020aa:	e00b      	b.n	80020c4 <rx_ctrl_get+0x2d8>
				else get->Sy = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <rx_ctrl_get+0x48c>)
 80020ae:	795b      	ldrb	r3, [r3, #5]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b70      	ldr	r3, [pc, #448]	; (8002278 <rx_ctrl_get+0x48c>)
 80020b6:	799b      	ldrb	r3, [r3, #6]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21a      	sxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2

				if((rxbuf_get_ctrl[7] & 0x80)) get->St = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80020c4:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <rx_ctrl_get+0x48c>)
 80020c6:	79db      	ldrb	r3, [r3, #7]
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da0c      	bge.n	80020e8 <rx_ctrl_get+0x2fc>
 80020ce:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <rx_ctrl_get+0x48c>)
 80020d0:	79db      	ldrb	r3, [r3, #7]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	4b68      	ldr	r3, [pc, #416]	; (8002278 <rx_ctrl_get+0x48c>)
 80020d8:	7a1b      	ldrb	r3, [r3, #8]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21a      	sxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 80020e6:	e00b      	b.n	8002100 <rx_ctrl_get+0x314>
				else get->St = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <rx_ctrl_get+0x48c>)
 80020ea:	79db      	ldrb	r3, [r3, #7]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <rx_ctrl_get+0x48c>)
 80020f2:	7a1b      	ldrb	r3, [r3, #8]
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				if((rxbuf_get_ctrl[9] & 0x80)) get->T = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <rx_ctrl_get+0x48c>)
 8002102:	7a5b      	ldrb	r3, [r3, #9]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	da0c      	bge.n	8002124 <rx_ctrl_get+0x338>
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <rx_ctrl_get+0x48c>)
 800210c:	7a5b      	ldrb	r3, [r3, #9]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b59      	ldr	r3, [pc, #356]	; (8002278 <rx_ctrl_get+0x48c>)
 8002114:	7a9b      	ldrb	r3, [r3, #10]
 8002116:	b21b      	sxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8002122:	e00b      	b.n	800213c <rx_ctrl_get+0x350>
				else get->T = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002124:	4b54      	ldr	r3, [pc, #336]	; (8002278 <rx_ctrl_get+0x48c>)
 8002126:	7a5b      	ldrb	r3, [r3, #9]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <rx_ctrl_get+0x48c>)
 800212e:	7a9b      	ldrb	r3, [r3, #10]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6

				get->cmd = DATA;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2205      	movs	r2, #5
 8002140:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 8002144:	e270      	b.n	8002628 <rx_ctrl_get+0x83c>
			}

			// Check for Encoder
			else if(rxbuf_get_ctrl[2] == 0x06){
 8002146:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <rx_ctrl_get+0x48c>)
 8002148:	789b      	ldrb	r3, [r3, #2]
 800214a:	2b06      	cmp	r3, #6
 800214c:	d17c      	bne.n	8002248 <rx_ctrl_get+0x45c>

				if((rxbuf_get_ctrl[3] & 0x80)) get->S3 = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <rx_ctrl_get+0x48c>)
 8002150:	78db      	ldrb	r3, [r3, #3]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0c      	bge.n	8002172 <rx_ctrl_get+0x386>
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <rx_ctrl_get+0x48c>)
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b45      	ldr	r3, [pc, #276]	; (8002278 <rx_ctrl_get+0x48c>)
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 8002170:	e00b      	b.n	800218a <rx_ctrl_get+0x39e>
				else get->S3 = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <rx_ctrl_get+0x48c>)
 8002174:	78db      	ldrb	r3, [r3, #3]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b21a      	sxth	r2, r3
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <rx_ctrl_get+0x48c>)
 800217c:	791b      	ldrb	r3, [r3, #4]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21a      	sxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_ctrl[5] & 0x80)) get->S4 = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <rx_ctrl_get+0x48c>)
 800218c:	795b      	ldrb	r3, [r3, #5]
 800218e:	b25b      	sxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0c      	bge.n	80021ae <rx_ctrl_get+0x3c2>
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <rx_ctrl_get+0x48c>)
 8002196:	795b      	ldrb	r3, [r3, #5]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <rx_ctrl_get+0x48c>)
 800219e:	799b      	ldrb	r3, [r3, #6]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 80021ac:	e00b      	b.n	80021c6 <rx_ctrl_get+0x3da>
				else get->S4 = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <rx_ctrl_get+0x48c>)
 80021b0:	795b      	ldrb	r3, [r3, #5]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <rx_ctrl_get+0x48c>)
 80021b8:	799b      	ldrb	r3, [r3, #6]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b21a      	sxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6

				if((rxbuf_get_ctrl[7] & 0x80)) get->V3 = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <rx_ctrl_get+0x48c>)
 80021c8:	79db      	ldrb	r3, [r3, #7]
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da0c      	bge.n	80021ea <rx_ctrl_get+0x3fe>
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <rx_ctrl_get+0x48c>)
 80021d2:	79db      	ldrb	r3, [r3, #7]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <rx_ctrl_get+0x48c>)
 80021da:	7a1b      	ldrb	r3, [r3, #8]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 80021e8:	e00b      	b.n	8002202 <rx_ctrl_get+0x416>
				else get->V3 = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80021ea:	4b23      	ldr	r3, [pc, #140]	; (8002278 <rx_ctrl_get+0x48c>)
 80021ec:	79db      	ldrb	r3, [r3, #7]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <rx_ctrl_get+0x48c>)
 80021f4:	7a1b      	ldrb	r3, [r3, #8]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc

				if((rxbuf_get_ctrl[9] & 0x80)) get->V4 = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <rx_ctrl_get+0x48c>)
 8002204:	7a5b      	ldrb	r3, [r3, #9]
 8002206:	b25b      	sxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	da0c      	bge.n	8002226 <rx_ctrl_get+0x43a>
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <rx_ctrl_get+0x48c>)
 800220e:	7a5b      	ldrb	r3, [r3, #9]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b21a      	sxth	r2, r3
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <rx_ctrl_get+0x48c>)
 8002216:	7a9b      	ldrb	r3, [r3, #10]
 8002218:	b21b      	sxth	r3, r3
 800221a:	4313      	orrs	r3, r2
 800221c:	b21a      	sxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 8002224:	e00b      	b.n	800223e <rx_ctrl_get+0x452>
				else get->V4 = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <rx_ctrl_get+0x48c>)
 8002228:	7a5b      	ldrb	r3, [r3, #9]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <rx_ctrl_get+0x48c>)
 8002230:	7a9b      	ldrb	r3, [r3, #10]
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

				get->cmd = DATA;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2205      	movs	r2, #5
 8002242:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 8002246:	e1ef      	b.n	8002628 <rx_ctrl_get+0x83c>
			}

			// Check for Odometry
			else if(rxbuf_get_ctrl[2] == 0x15){
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <rx_ctrl_get+0x48c>)
 800224a:	789b      	ldrb	r3, [r3, #2]
 800224c:	2b15      	cmp	r3, #21
 800224e:	f040 80bc 	bne.w	80023ca <rx_ctrl_get+0x5de>
				if((rxbuf_get_ctrl[3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <rx_ctrl_get+0x48c>)
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	b25b      	sxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0f      	bge.n	800227c <rx_ctrl_get+0x490>
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <rx_ctrl_get+0x48c>)
 800225e:	78db      	ldrb	r3, [r3, #3]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21a      	sxth	r2, r3
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <rx_ctrl_get+0x48c>)
 8002266:	791b      	ldrb	r3, [r3, #4]
 8002268:	b21b      	sxth	r3, r3
 800226a:	4313      	orrs	r3, r2
 800226c:	b21a      	sxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 8002274:	e00e      	b.n	8002294 <rx_ctrl_get+0x4a8>
 8002276:	bf00      	nop
 8002278:	20000030 	.word	0x20000030
				else get->x_pos = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 800227c:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800227e:	78db      	ldrb	r3, [r3, #3]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	b21a      	sxth	r2, r3
 8002284:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002286:	791b      	ldrb	r3, [r3, #4]
 8002288:	b21b      	sxth	r3, r3
 800228a:	4313      	orrs	r3, r2
 800228c:	b21a      	sxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

				if((rxbuf_get_ctrl[5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8002294:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002296:	795b      	ldrb	r3, [r3, #5]
 8002298:	b25b      	sxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	da0c      	bge.n	80022b8 <rx_ctrl_get+0x4cc>
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022a0:	795b      	ldrb	r3, [r3, #5]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	4b83      	ldr	r3, [pc, #524]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022a8:	799b      	ldrb	r3, [r3, #6]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 80022b6:	e00b      	b.n	80022d0 <rx_ctrl_get+0x4e4>
				else get->y_pos = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80022b8:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022ba:	795b      	ldrb	r3, [r3, #5]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	b21a      	sxth	r2, r3
 80022c0:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022c2:	799b      	ldrb	r3, [r3, #6]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_ctrl[7] & 0x80)) get->t_pos = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022d2:	79db      	ldrb	r3, [r3, #7]
 80022d4:	b25b      	sxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da0c      	bge.n	80022f4 <rx_ctrl_get+0x508>
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022dc:	79db      	ldrb	r3, [r3, #7]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	4b74      	ldr	r3, [pc, #464]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022e4:	7a1b      	ldrb	r3, [r3, #8]
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 80022f2:	e00b      	b.n	800230c <rx_ctrl_get+0x520>
				else get->t_pos = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022f6:	79db      	ldrb	r3, [r3, #7]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80022fe:	7a1b      	ldrb	r3, [r3, #8]
 8002300:	b21b      	sxth	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	b21a      	sxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_ctrl[9] & 0x80)) get->x_vel = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800230e:	7a5b      	ldrb	r3, [r3, #9]
 8002310:	b25b      	sxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	da0c      	bge.n	8002330 <rx_ctrl_get+0x544>
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002318:	7a5b      	ldrb	r3, [r3, #9]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	b21a      	sxth	r2, r3
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002320:	7a9b      	ldrb	r3, [r3, #10]
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b21a      	sxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
 800232e:	e00b      	b.n	8002348 <rx_ctrl_get+0x55c>
				else get->x_vel = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002330:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002332:	7a5b      	ldrb	r3, [r3, #9]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	b21a      	sxth	r2, r3
 8002338:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800233a:	7a9b      	ldrb	r3, [r3, #10]
 800233c:	b21b      	sxth	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	b21a      	sxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8

				if((rxbuf_get_ctrl[11] & 0x80)) get->y_vel = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 8002348:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800234a:	7adb      	ldrb	r3, [r3, #11]
 800234c:	b25b      	sxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	da0c      	bge.n	800236c <rx_ctrl_get+0x580>
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002354:	7adb      	ldrb	r3, [r3, #11]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	b21a      	sxth	r2, r3
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800235c:	7b1b      	ldrb	r3, [r3, #12]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21a      	sxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
 800236a:	e00b      	b.n	8002384 <rx_ctrl_get+0x598>
				else get->y_vel = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 800236c:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800236e:	7adb      	ldrb	r3, [r3, #11]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21a      	sxth	r2, r3
 8002374:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002376:	7b1b      	ldrb	r3, [r3, #12]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21a      	sxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa

				if((rxbuf_get_ctrl[13] & 0x80)) get->t_vel = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002386:	7b5b      	ldrb	r3, [r3, #13]
 8002388:	b25b      	sxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	da0c      	bge.n	80023a8 <rx_ctrl_get+0x5bc>
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002390:	7b5b      	ldrb	r3, [r3, #13]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b21a      	sxth	r2, r3
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002398:	7b9b      	ldrb	r3, [r3, #14]
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	b21a      	sxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 80023a6:	e00b      	b.n	80023c0 <rx_ctrl_get+0x5d4>
				else get->t_vel = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023aa:	7b5b      	ldrb	r3, [r3, #13]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023b2:	7b9b      	ldrb	r3, [r3, #14]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac

				get->cmd = DATA;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2205      	movs	r2, #5
 80023c4:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 80023c8:	e12e      	b.n	8002628 <rx_ctrl_get+0x83c>

			}

			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x12){
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023cc:	789b      	ldrb	r3, [r3, #2]
 80023ce:	2b12      	cmp	r3, #18
 80023d0:	d172      	bne.n	80024b8 <rx_ctrl_get+0x6cc>

				get->id_data = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4] ;
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_ctrl[5] & 0x80)) get->x_data = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023ee:	795b      	ldrb	r3, [r3, #5]
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da0c      	bge.n	8002410 <rx_ctrl_get+0x624>
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80023f8:	795b      	ldrb	r3, [r3, #5]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002400:	799b      	ldrb	r3, [r3, #6]
 8002402:	b21b      	sxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b21a      	sxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 800240e:	e00b      	b.n	8002428 <rx_ctrl_get+0x63c>
				else get->x_data = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002412:	795b      	ldrb	r3, [r3, #5]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800241a:	799b      	ldrb	r3, [r3, #6]
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b21a      	sxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_ctrl[7] & 0x80)) get->y_data = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800242a:	79db      	ldrb	r3, [r3, #7]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	da0c      	bge.n	800244c <rx_ctrl_get+0x660>
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002434:	79db      	ldrb	r3, [r3, #7]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800243c:	7a1b      	ldrb	r3, [r3, #8]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 800244a:	e00b      	b.n	8002464 <rx_ctrl_get+0x678>
				else get->y_data = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800244e:	79db      	ldrb	r3, [r3, #7]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002456:	7a1b      	ldrb	r3, [r3, #8]
 8002458:	b21b      	sxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b21a      	sxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

				if((rxbuf_get_ctrl[9] & 0x80)) get->t_data = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002466:	7a5b      	ldrb	r3, [r3, #9]
 8002468:	b25b      	sxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	da0c      	bge.n	8002488 <rx_ctrl_get+0x69c>
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002470:	7a5b      	ldrb	r3, [r3, #9]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	b21a      	sxth	r2, r3
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002478:	7a9b      	ldrb	r3, [r3, #10]
 800247a:	b21b      	sxth	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b21a      	sxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
 8002486:	e00b      	b.n	80024a0 <rx_ctrl_get+0x6b4>
				else get->t_data = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <rx_ctrl_get+0x6c8>)
 800248a:	7a5b      	ldrb	r3, [r3, #9]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b21a      	sxth	r2, r3
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <rx_ctrl_get+0x6c8>)
 8002492:	7a9b      	ldrb	r3, [r3, #10]
 8002494:	b21b      	sxth	r3, r3
 8002496:	4313      	orrs	r3, r2
 8002498:	b21a      	sxth	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e

				get->aktuator = rxbuf_get_ctrl[11] ;
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <rx_ctrl_get+0x6c8>)
 80024a2:	7ada      	ldrb	r2, [r3, #11]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0

				get->cmd = MOVE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 80024b2:	e0b9      	b.n	8002628 <rx_ctrl_get+0x83c>
 80024b4:	20000030 	.word	0x20000030

			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x13){
 80024b8:	4b61      	ldr	r3, [pc, #388]	; (8002640 <rx_ctrl_get+0x854>)
 80024ba:	789b      	ldrb	r3, [r3, #2]
 80024bc:	2b13      	cmp	r3, #19
 80024be:	f040 80b3 	bne.w	8002628 <rx_ctrl_get+0x83c>
				uint8_t chk = checksum_ctrl_generator(rxbuf_get_ctrl,18);
 80024c2:	2112      	movs	r1, #18
 80024c4:	485e      	ldr	r0, [pc, #376]	; (8002640 <rx_ctrl_get+0x854>)
 80024c6:	f7ff fbf1 	bl	8001cac <checksum_ctrl_generator>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
				if(chk == rxbuf_get_ctrl[18]){
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <rx_ctrl_get+0x854>)
 80024d0:	7c9b      	ldrb	r3, [r3, #18]
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 80a7 	bne.w	8002628 <rx_ctrl_get+0x83c>
				get->astar_id = (rxbuf_get_ctrl[3]);
 80024da:	4b59      	ldr	r3, [pc, #356]	; (8002640 <rx_ctrl_get+0x854>)
 80024dc:	78db      	ldrb	r3, [r3, #3]
 80024de:	b21a      	sxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
				get->astar_length = (rxbuf_get_ctrl[4]);
 80024e6:	4b56      	ldr	r3, [pc, #344]	; (8002640 <rx_ctrl_get+0x854>)
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	b21a      	sxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+0] = (rxbuf_get_ctrl[5]);
 80024f2:	4b53      	ldr	r3, [pc, #332]	; (8002640 <rx_ctrl_get+0x854>)
 80024f4:	7959      	ldrb	r1, [r3, #5]
 80024f6:	4b52      	ldr	r3, [pc, #328]	; (8002640 <rx_ctrl_get+0x854>)
 80024f8:	78db      	ldrb	r3, [r3, #3]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	b209      	sxth	r1, r1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+0] = (rxbuf_get_ctrl[6]);
 800250a:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <rx_ctrl_get+0x854>)
 800250c:	7999      	ldrb	r1, [r3, #6]
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <rx_ctrl_get+0x854>)
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	461a      	mov	r2, r3
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	b209      	sxth	r1, r1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3264      	adds	r2, #100	; 0x64
 8002520:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+1] = (rxbuf_get_ctrl[7]);
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <rx_ctrl_get+0x854>)
 8002526:	79d9      	ldrb	r1, [r3, #7]
 8002528:	4b45      	ldr	r3, [pc, #276]	; (8002640 <rx_ctrl_get+0x854>)
 800252a:	78db      	ldrb	r3, [r3, #3]
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	b209      	sxth	r1, r1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+1] = (rxbuf_get_ctrl[8]);
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <rx_ctrl_get+0x854>)
 8002540:	7a19      	ldrb	r1, [r3, #8]
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <rx_ctrl_get+0x854>)
 8002544:	78db      	ldrb	r3, [r3, #3]
 8002546:	461a      	mov	r2, r3
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	b209      	sxth	r1, r1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3264      	adds	r2, #100	; 0x64
 8002556:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+2] = (rxbuf_get_ctrl[9]);
 800255a:	4b39      	ldr	r3, [pc, #228]	; (8002640 <rx_ctrl_get+0x854>)
 800255c:	7a59      	ldrb	r1, [r3, #9]
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <rx_ctrl_get+0x854>)
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	461a      	mov	r2, r3
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	1c9a      	adds	r2, r3, #2
 800256c:	b209      	sxth	r1, r1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+2] = (rxbuf_get_ctrl[10]);
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <rx_ctrl_get+0x854>)
 8002576:	7a99      	ldrb	r1, [r3, #10]
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <rx_ctrl_get+0x854>)
 800257a:	78db      	ldrb	r3, [r3, #3]
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	b209      	sxth	r1, r1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3264      	adds	r2, #100	; 0x64
 800258c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+3] = (rxbuf_get_ctrl[11]);
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <rx_ctrl_get+0x854>)
 8002592:	7ad9      	ldrb	r1, [r3, #11]
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <rx_ctrl_get+0x854>)
 8002596:	78db      	ldrb	r3, [r3, #3]
 8002598:	461a      	mov	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	1cda      	adds	r2, r3, #3
 80025a2:	b209      	sxth	r1, r1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+3] = (rxbuf_get_ctrl[12]);
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <rx_ctrl_get+0x854>)
 80025ac:	7b19      	ldrb	r1, [r3, #12]
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <rx_ctrl_get+0x854>)
 80025b0:	78db      	ldrb	r3, [r3, #3]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	1cda      	adds	r2, r3, #3
 80025bc:	b209      	sxth	r1, r1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3264      	adds	r2, #100	; 0x64
 80025c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+4] = (rxbuf_get_ctrl[13]);
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <rx_ctrl_get+0x854>)
 80025c8:	7b59      	ldrb	r1, [r3, #13]
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <rx_ctrl_get+0x854>)
 80025cc:	78db      	ldrb	r3, [r3, #3]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	b209      	sxth	r1, r1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+4] = (rxbuf_get_ctrl[14]);
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <rx_ctrl_get+0x854>)
 80025e2:	7b99      	ldrb	r1, [r3, #14]
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <rx_ctrl_get+0x854>)
 80025e6:	78db      	ldrb	r3, [r3, #3]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	1d1a      	adds	r2, r3, #4
 80025f2:	b209      	sxth	r1, r1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3264      	adds	r2, #100	; 0x64
 80025f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_total_length = (rxbuf_get_ctrl[15] << 8) | rxbuf_get_ctrl[16];
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <rx_ctrl_get+0x854>)
 80025fe:	7bdb      	ldrb	r3, [r3, #15]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b21a      	sxth	r2, r3
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <rx_ctrl_get+0x854>)
 8002606:	7c1b      	ldrb	r3, [r3, #16]
 8002608:	b21b      	sxth	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b21b      	sxth	r3, r3
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
				get->astar_msg_id = rxbuf_get_ctrl[17];
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <rx_ctrl_get+0x854>)
 8002618:	7c5a      	ldrb	r2, [r3, #17]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
				get->cmd = MOVE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2203      	movs	r2, #3
 8002624:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
				}

			}

		}
	HAL_UART_Receive_DMA(huart_ctrl, rxbuf_get_ctrl, 19);
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <rx_ctrl_get+0x858>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2213      	movs	r2, #19
 800262e:	4904      	ldr	r1, [pc, #16]	; (8002640 <rx_ctrl_get+0x854>)
 8002630:	4618      	mov	r0, r3
 8002632:	f005 f9d8 	bl	80079e6 <HAL_UART_Receive_DMA>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000030 	.word	0x20000030
 8002644:	2000002c 	.word	0x2000002c

08002648 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4ab2      	ldr	r2, [pc, #712]	; (8002920 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d113      	bne.n	8002684 <HAL_TIM_IC_CaptureCallback+0x3c>
		encoder_A.counter  	= __HAL_TIM_GET_COUNTER(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	4ab0      	ldr	r2, [pc, #704]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002664:	6093      	str	r3, [r2, #8]
		encoder_A.counts 	= (int16_t)encoder_A.counter;
 8002666:	4baf      	ldr	r3, [pc, #700]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	b21a      	sxth	r2, r3
 800266c:	4bad      	ldr	r3, [pc, #692]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800266e:	819a      	strh	r2, [r3, #12]
		encoder_A.position	= encoder_A.counts/4;
 8002670:	4bac      	ldr	r3, [pc, #688]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002672:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <HAL_TIM_IC_CaptureCallback+0x34>
 800267a:	3303      	adds	r3, #3
 800267c:	109b      	asrs	r3, r3, #2
 800267e:	b21a      	sxth	r2, r3
 8002680:	4ba8      	ldr	r3, [pc, #672]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002682:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM2){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268c:	d113      	bne.n	80026b6 <HAL_TIM_IC_CaptureCallback+0x6e>
		encoder_B.counter  	= __HAL_TIM_GET_COUNTER(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	4aa4      	ldr	r2, [pc, #656]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002696:	6093      	str	r3, [r2, #8]
		encoder_B.counts 	= (int16_t)encoder_B.counter;
 8002698:	4ba3      	ldr	r3, [pc, #652]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	b21a      	sxth	r2, r3
 800269e:	4ba2      	ldr	r3, [pc, #648]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80026a0:	819a      	strh	r2, [r3, #12]
		encoder_B.position	= encoder_B.counts/4;
 80026a2:	4ba1      	ldr	r3, [pc, #644]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80026a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da00      	bge.n	80026ae <HAL_TIM_IC_CaptureCallback+0x66>
 80026ac:	3303      	adds	r3, #3
 80026ae:	109b      	asrs	r3, r3, #2
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	4b9d      	ldr	r3, [pc, #628]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80026b4:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM4){
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a9c      	ldr	r2, [pc, #624]	; (800292c <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d113      	bne.n	80026e8 <HAL_TIM_IC_CaptureCallback+0xa0>
		encoder_C.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	4a9a      	ldr	r2, [pc, #616]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80026c8:	6093      	str	r3, [r2, #8]
		encoder_C.counts 	= (int16_t)encoder_C.counter;
 80026ca:	4b99      	ldr	r3, [pc, #612]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	4b97      	ldr	r3, [pc, #604]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80026d2:	819a      	strh	r2, [r3, #12]
		encoder_C.position	= encoder_C.counts/4;
 80026d4:	4b96      	ldr	r3, [pc, #600]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80026d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da00      	bge.n	80026e0 <HAL_TIM_IC_CaptureCallback+0x98>
 80026de:	3303      	adds	r3, #3
 80026e0:	109b      	asrs	r3, r3, #2
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	4b92      	ldr	r3, [pc, #584]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80026e6:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM5){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a91      	ldr	r2, [pc, #580]	; (8002934 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d113      	bne.n	800271a <HAL_TIM_IC_CaptureCallback+0xd2>
		encoder_D.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	4a8f      	ldr	r2, [pc, #572]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80026fa:	6093      	str	r3, [r2, #8]
		encoder_D.counts 	= (int16_t)encoder_D.counter;
 80026fc:	4b8e      	ldr	r3, [pc, #568]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	b21a      	sxth	r2, r3
 8002702:	4b8d      	ldr	r3, [pc, #564]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002704:	819a      	strh	r2, [r3, #12]
		encoder_D.position	= encoder_D.counts/4;
 8002706:	4b8c      	ldr	r3, [pc, #560]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002708:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da00      	bge.n	8002712 <HAL_TIM_IC_CaptureCallback+0xca>
 8002710:	3303      	adds	r3, #3
 8002712:	109b      	asrs	r3, r3, #2
 8002714:	b21a      	sxth	r2, r3
 8002716:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002718:	81da      	strh	r2, [r3, #14]
	}

	// Encoder Eksternal
	kinematic.S1 = -encoder_A.position*PULSE_TO_DIST;
 800271a:	4b82      	ldr	r3, [pc, #520]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800271c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002720:	425b      	negs	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd feaa 	bl	800047c <__aeabi_i2d>
 8002728:	a379      	add	r3, pc, #484	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd ff0f 	bl	8000550 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4981      	ldr	r1, [pc, #516]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002738:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	kinematic.S2 = -encoder_B.position*PULSE_TO_DIST;
 800273c:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800273e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002742:	425b      	negs	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fe99 	bl	800047c <__aeabi_i2d>
 800274a:	a371      	add	r3, pc, #452	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd fefe 	bl	8000550 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4978      	ldr	r1, [pc, #480]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800275a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	kinematic.S3 = encoder_C.position*PULSE_TO_DIST;
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8002760:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fe89 	bl	800047c <__aeabi_i2d>
 800276a:	a369      	add	r3, pc, #420	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd feee 	bl	8000550 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4970      	ldr	r1, [pc, #448]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800277a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	kinematic.S4 = -encoder_D.position*PULSE_TO_DIST;
 800277e:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002780:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002784:	425b      	negs	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fe78 	bl	800047c <__aeabi_i2d>
 800278c:	a360      	add	r3, pc, #384	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd fedd 	bl	8000550 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4968      	ldr	r1, [pc, #416]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800279c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	kinematic.V1 = -encoder_A.speed/7*60;
 80027a0:	4b60      	ldr	r3, [pc, #384]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	4a66      	ldr	r2, [pc, #408]	; (8002940 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80027a6:	fb82 1203 	smull	r1, r2, r2, r3
 80027aa:	441a      	add	r2, r3
 80027ac:	1092      	asrs	r2, r2, #2
 80027ae:	17db      	asrs	r3, r3, #31
 80027b0:	1a9a      	subs	r2, r3, r2
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe5e 	bl	800047c <__aeabi_i2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	495d      	ldr	r1, [pc, #372]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80027c6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kinematic.V2 = -encoder_B.speed/7*60;
 80027ca:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80027d0:	fb82 1203 	smull	r1, r2, r2, r3
 80027d4:	441a      	add	r2, r3
 80027d6:	1092      	asrs	r2, r2, #2
 80027d8:	17db      	asrs	r3, r3, #31
 80027da:	1a9a      	subs	r2, r3, r2
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fe49 	bl	800047c <__aeabi_i2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4953      	ldr	r1, [pc, #332]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80027f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	kinematic.V3 = encoder_C.speed*PULSE_TO_DIST;
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe3f 	bl	800047c <__aeabi_i2d>
 80027fe:	a344      	add	r3, pc, #272	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f7fd fea4 	bl	8000550 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	494b      	ldr	r1, [pc, #300]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800280e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	kinematic.V4 = -encoder_D.speed*PULSE_TO_DIST;
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	425b      	negs	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fe2f 	bl	800047c <__aeabi_i2d>
 800281e:	a33c      	add	r3, pc, #240	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fe94 	bl	8000550 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4943      	ldr	r1, [pc, #268]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800282e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	// External Encoder (Nomor 3->x dan 4->y)
	kinematic.St = kinematic.St + agv_kinematic_ext_St(kinematic.Sx,kinematic.Sy,encoder_C.position*PULSE_TO_DIST,-encoder_D.position*PULSE_TO_DIST, 0);
 8002832:	4b42      	ldr	r3, [pc, #264]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002834:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800283a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f91f 	bl	8000a84 <__aeabi_d2iz>
 8002846:	4606      	mov	r6, r0
 8002848:	4b3c      	ldr	r3, [pc, #240]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800284a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe f917 	bl	8000a84 <__aeabi_d2iz>
 8002856:	4680      	mov	r8, r0
 8002858:	4b35      	ldr	r3, [pc, #212]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800285a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fe0c 	bl	800047c <__aeabi_i2d>
 8002864:	a32a      	add	r3, pc, #168	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fe71 	bl	8000550 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f7fe f905 	bl	8000a84 <__aeabi_d2iz>
 800287a:	4681      	mov	r9, r0
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800287e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002882:	425b      	negs	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fdf9 	bl	800047c <__aeabi_i2d>
 800288a:	a321      	add	r3, pc, #132	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fe5e 	bl	8000550 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f8f2 	bl	8000a84 <__aeabi_d2iz>
 80028a0:	4603      	mov	r3, r0
 80028a2:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002918 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80028a6:	464a      	mov	r2, r9
 80028a8:	4641      	mov	r1, r8
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7fe fd64 	bl	8001378 <agv_kinematic_ext_St>
 80028b0:	ec53 2b10 	vmov	r2, r3, d0
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7fd fc94 	bl	80001e4 <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	491e      	ldr	r1, [pc, #120]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80028c2:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	kinematic.Vt = kinematic.Vt + agv_kinematic_ext_St(kinematic.Vx,kinematic.Vy,encoder_C.speed*PULSE_TO_DIST,-encoder_D.speed*PULSE_TO_DIST, 0);
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80028c8:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80028ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f7fe f8d5 	bl	8000a84 <__aeabi_d2iz>
 80028da:	4606      	mov	r6, r0
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80028de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7fe f8cd 	bl	8000a84 <__aeabi_d2iz>
 80028ea:	4680      	mov	r8, r0
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fdc3 	bl	800047c <__aeabi_i2d>
 80028f6:	a306      	add	r3, pc, #24	; (adr r3, 8002910 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fd fe28 	bl	8000550 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	e01c      	b.n	8002944 <HAL_TIM_IC_CaptureCallback+0x2fc>
 800290a:	bf00      	nop
 800290c:	f3af 8000 	nop.w
 8002910:	1ff2e48f 	.word	0x1ff2e48f
 8002914:	3fd36fd2 	.word	0x3fd36fd2
	...
 8002920:	40010000 	.word	0x40010000
 8002924:	2000082c 	.word	0x2000082c
 8002928:	20000844 	.word	0x20000844
 800292c:	40000800 	.word	0x40000800
 8002930:	2000085c 	.word	0x2000085c
 8002934:	40000c00 	.word	0x40000c00
 8002938:	20000874 	.word	0x20000874
 800293c:	200003c0 	.word	0x200003c0
 8002940:	92492493 	.word	0x92492493
 8002944:	f7fe f89e 	bl	8000a84 <__aeabi_d2iz>
 8002948:	4681      	mov	r9, r0
 800294a:	4bc7      	ldr	r3, [pc, #796]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x620>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	425b      	negs	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fd93 	bl	800047c <__aeabi_i2d>
 8002956:	a3c0      	add	r3, pc, #768	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f7fd fdf8 	bl	8000550 <__aeabi_dmul>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f7fe f88c 	bl	8000a84 <__aeabi_d2iz>
 800296c:	4603      	mov	r3, r0
 800296e:	ed9f 0bbc 	vldr	d0, [pc, #752]	; 8002c60 <HAL_TIM_IC_CaptureCallback+0x618>
 8002972:	464a      	mov	r2, r9
 8002974:	4641      	mov	r1, r8
 8002976:	4630      	mov	r0, r6
 8002978:	f7fe fcfe 	bl	8001378 <agv_kinematic_ext_St>
 800297c:	ec53 2b10 	vmov	r2, r3, d0
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fc2e 	bl	80001e4 <__adddf3>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	49b7      	ldr	r1, [pc, #732]	; (8002c6c <HAL_TIM_IC_CaptureCallback+0x624>)
 800298e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	kinematic.Sx = agv_kinematic_ext_Sx(-encoder_A.position*PULSE_TO_DIST,-encoder_B.position*PULSE_TO_DIST,encoder_C.position*PULSE_TO_DIST,-encoder_D.position*PULSE_TO_DIST, 0);
 8002992:	4bb7      	ldr	r3, [pc, #732]	; (8002c70 <HAL_TIM_IC_CaptureCallback+0x628>)
 8002994:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002998:	425b      	negs	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fd6e 	bl	800047c <__aeabi_i2d>
 80029a0:	a3ad      	add	r3, pc, #692	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fd fdd3 	bl	8000550 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe f867 	bl	8000a84 <__aeabi_d2iz>
 80029b6:	4604      	mov	r4, r0
 80029b8:	4bae      	ldr	r3, [pc, #696]	; (8002c74 <HAL_TIM_IC_CaptureCallback+0x62c>)
 80029ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80029be:	425b      	negs	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fd5b 	bl	800047c <__aeabi_i2d>
 80029c6:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fdc0 	bl	8000550 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f854 	bl	8000a84 <__aeabi_d2iz>
 80029dc:	4605      	mov	r5, r0
 80029de:	4ba6      	ldr	r3, [pc, #664]	; (8002c78 <HAL_TIM_IC_CaptureCallback+0x630>)
 80029e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd49 	bl	800047c <__aeabi_i2d>
 80029ea:	a39b      	add	r3, pc, #620	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fdae 	bl	8000550 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f842 	bl	8000a84 <__aeabi_d2iz>
 8002a00:	4606      	mov	r6, r0
 8002a02:	4b99      	ldr	r3, [pc, #612]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x620>)
 8002a04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a08:	425b      	negs	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd36 	bl	800047c <__aeabi_i2d>
 8002a10:	a391      	add	r3, pc, #580	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fd9b 	bl	8000550 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fe f82f 	bl	8000a84 <__aeabi_d2iz>
 8002a26:	4603      	mov	r3, r0
 8002a28:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8002c60 <HAL_TIM_IC_CaptureCallback+0x618>
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	4629      	mov	r1, r5
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7fe fc68 	bl	8001306 <agv_kinematic_ext_Sx>
 8002a36:	eeb0 7a40 	vmov.f32	s14, s0
 8002a3a:	eef0 7a60 	vmov.f32	s15, s1
 8002a3e:	4b8b      	ldr	r3, [pc, #556]	; (8002c6c <HAL_TIM_IC_CaptureCallback+0x624>)
 8002a40:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	kinematic.Sy = agv_kinematic_ext_Sy(-encoder_A.position*PULSE_TO_DIST,-encoder_B.position*PULSE_TO_DIST,encoder_C.position*PULSE_TO_DIST,-encoder_D.position*PULSE_TO_DIST, 0);
 8002a44:	4b8a      	ldr	r3, [pc, #552]	; (8002c70 <HAL_TIM_IC_CaptureCallback+0x628>)
 8002a46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a4a:	425b      	negs	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd15 	bl	800047c <__aeabi_i2d>
 8002a52:	a381      	add	r3, pc, #516	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fd7a 	bl	8000550 <__aeabi_dmul>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f80e 	bl	8000a84 <__aeabi_d2iz>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_TIM_IC_CaptureCallback+0x62c>)
 8002a6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a70:	425b      	negs	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd02 	bl	800047c <__aeabi_i2d>
 8002a78:	a377      	add	r3, pc, #476	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fd67 	bl	8000550 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fd fffb 	bl	8000a84 <__aeabi_d2iz>
 8002a8e:	4605      	mov	r5, r0
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_TIM_IC_CaptureCallback+0x630>)
 8002a92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fcf0 	bl	800047c <__aeabi_i2d>
 8002a9c:	a36e      	add	r3, pc, #440	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fd55 	bl	8000550 <__aeabi_dmul>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fd ffe9 	bl	8000a84 <__aeabi_d2iz>
 8002ab2:	4606      	mov	r6, r0
 8002ab4:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x620>)
 8002ab6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002aba:	425b      	negs	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fcdd 	bl	800047c <__aeabi_i2d>
 8002ac2:	a365      	add	r3, pc, #404	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fd42 	bl	8000550 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fd ffd6 	bl	8000a84 <__aeabi_d2iz>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8002c60 <HAL_TIM_IC_CaptureCallback+0x618>
 8002ade:	4632      	mov	r2, r6
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7fe fc2a 	bl	800133c <agv_kinematic_ext_Sy>
 8002ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8002aec:	eef0 7a60 	vmov.f32	s15, s1
 8002af0:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <HAL_TIM_IC_CaptureCallback+0x624>)
 8002af2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	kinematic.Vx = agv_kinematic_ext_Sx(-encoder_A.speed*PULSE_TO_DIST,-encoder_B.speed*PULSE_TO_DIST,encoder_C.speed*PULSE_TO_DIST,-encoder_D.speed*PULSE_TO_DIST, 0);
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_TIM_IC_CaptureCallback+0x628>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	425b      	negs	r3, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fcbd 	bl	800047c <__aeabi_i2d>
 8002b02:	a355      	add	r3, pc, #340	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd22 	bl	8000550 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fd ffb6 	bl	8000a84 <__aeabi_d2iz>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_TIM_IC_CaptureCallback+0x62c>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	425b      	negs	r3, r3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fcab 	bl	800047c <__aeabi_i2d>
 8002b26:	a34c      	add	r3, pc, #304	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fd10 	bl	8000550 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fd ffa4 	bl	8000a84 <__aeabi_d2iz>
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <HAL_TIM_IC_CaptureCallback+0x630>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fc9a 	bl	800047c <__aeabi_i2d>
 8002b48:	a343      	add	r3, pc, #268	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fcff 	bl	8000550 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fd ff93 	bl	8000a84 <__aeabi_d2iz>
 8002b5e:	4606      	mov	r6, r0
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x620>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	425b      	negs	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fc88 	bl	800047c <__aeabi_i2d>
 8002b6c:	a33a      	add	r3, pc, #232	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fced 	bl	8000550 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fd ff81 	bl	8000a84 <__aeabi_d2iz>
 8002b82:	4603      	mov	r3, r0
 8002b84:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8002c60 <HAL_TIM_IC_CaptureCallback+0x618>
 8002b88:	4632      	mov	r2, r6
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7fe fbba 	bl	8001306 <agv_kinematic_ext_Sx>
 8002b92:	eeb0 7a40 	vmov.f32	s14, s0
 8002b96:	eef0 7a60 	vmov.f32	s15, s1
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_TIM_IC_CaptureCallback+0x624>)
 8002b9c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	kinematic.Vy = agv_kinematic_ext_Sy(-encoder_A.speed*PULSE_TO_DIST,-encoder_B.speed*PULSE_TO_DIST,encoder_C.speed*PULSE_TO_DIST,-encoder_D.speed*PULSE_TO_DIST, 0);
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_TIM_IC_CaptureCallback+0x628>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fc68 	bl	800047c <__aeabi_i2d>
 8002bac:	a32a      	add	r3, pc, #168	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fccd 	bl	8000550 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fd ff61 	bl	8000a84 <__aeabi_d2iz>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_TIM_IC_CaptureCallback+0x62c>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	425b      	negs	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc56 	bl	800047c <__aeabi_i2d>
 8002bd0:	a321      	add	r3, pc, #132	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fcbb 	bl	8000550 <__aeabi_dmul>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ff4f 	bl	8000a84 <__aeabi_d2iz>
 8002be6:	4605      	mov	r5, r0
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_TIM_IC_CaptureCallback+0x630>)
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fc45 	bl	800047c <__aeabi_i2d>
 8002bf2:	a319      	add	r3, pc, #100	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f7fd fcaa 	bl	8000550 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fd ff3e 	bl	8000a84 <__aeabi_d2iz>
 8002c08:	4606      	mov	r6, r0
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x620>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	425b      	negs	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fc33 	bl	800047c <__aeabi_i2d>
 8002c16:	a310      	add	r3, pc, #64	; (adr r3, 8002c58 <HAL_TIM_IC_CaptureCallback+0x610>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fc98 	bl	8000550 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fd ff2c 	bl	8000a84 <__aeabi_d2iz>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002c60 <HAL_TIM_IC_CaptureCallback+0x618>
 8002c32:	4632      	mov	r2, r6
 8002c34:	4629      	mov	r1, r5
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7fe fb80 	bl	800133c <agv_kinematic_ext_Sy>
 8002c3c:	eeb0 7a40 	vmov.f32	s14, s0
 8002c40:	eef0 7a60 	vmov.f32	s15, s1
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_TIM_IC_CaptureCallback+0x624>)
 8002c46:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58

	//	tx_ctrl_ping();
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c54:	f3af 8000 	nop.w
 8002c58:	1ff2e48f 	.word	0x1ff2e48f
 8002c5c:	3fd36fd2 	.word	0x3fd36fd2
	...
 8002c68:	20000874 	.word	0x20000874
 8002c6c:	200003c0 	.word	0x200003c0
 8002c70:	2000082c 	.word	0x2000082c
 8002c74:	20000844 	.word	0x20000844
 8002c78:	2000085c 	.word	0x2000085c

08002c7c <HAL_UART_RxCpltCallback>:
int lastlength = 0;
int lastid = 0;
uint32_t msgid = 0;
uint32_t current_msgid = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	if(huart == &huart6){
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_UART_RxCpltCallback+0x40>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d113      	bne.n	8002cb4 <HAL_UART_RxCpltCallback+0x38>
		rx_ctrl_get(&message_from_sensor);
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <HAL_UART_RxCpltCallback+0x44>)
 8002c8e:	f7ff f8ad 	bl	8001dec <rx_ctrl_get>
		astarlength = message_from_sensor.astar_length;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_UART_RxCpltCallback+0x44>)
 8002c94:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_UART_RxCpltCallback+0x48>)
 8002c9c:	601a      	str	r2, [r3, #0]
		astarid = message_from_sensor.astar_id;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_UART_RxCpltCallback+0x44>)
 8002ca0:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_UART_RxCpltCallback+0x4c>)
 8002ca8:	601a      	str	r2, [r3, #0]
		msgid++;
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_UART_RxCpltCallback+0x50>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	4a06      	ldr	r2, [pc, #24]	; (8002ccc <HAL_UART_RxCpltCallback+0x50>)
 8002cb2:	6013      	str	r3, [r2, #0]
	}
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000300 	.word	0x20000300
 8002cc0:	20000540 	.word	0x20000540
 8002cc4:	20000728 	.word	0x20000728
 8002cc8:	2000072c 	.word	0x2000072c
 8002ccc:	20000738 	.word	0x20000738

08002cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	b0bd      	sub	sp, #244	; 0xf4
 8002cd6:	af38      	add	r7, sp, #224	; 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cd8:	f002 f962 	bl	8004fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cdc:	f000 fe46 	bl	800396c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ce0:	f001 f9ec 	bl	80040bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002ce4:	f001 f9ca 	bl	800407c <MX_DMA_Init>
  MX_TIM1_Init();
 8002ce8:	f000 fea8 	bl	8003a3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002cec:	f000 fefe 	bl	8003aec <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cf0:	f000 ff50 	bl	8003b94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002cf4:	f000 ffe6 	bl	8003cc4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002cf8:	f001 f838 	bl	8003d6c <MX_TIM5_Init>
  MX_TIM9_Init();
 8002cfc:	f001 f88a 	bl	8003e14 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002d00:	f001 f8f6 	bl	8003ef0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002d04:	f001 f942 	bl	8003f8c <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8002d08:	f001 f98e 	bl	8004028 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  //+++++++++++++++++++++++++++++++++ MOTOR INITIALIZATION +++++++++++++++++++++++++++++//
  // Configuration 'Motor A'
  motor_A.tim_R = &htim9;
 8002d0c:	4b9b      	ldr	r3, [pc, #620]	; (8002f7c <main+0x2ac>)
 8002d0e:	4a9c      	ldr	r2, [pc, #624]	; (8002f80 <main+0x2b0>)
 8002d10:	601a      	str	r2, [r3, #0]
  motor_A.tim_L = &htim9;
 8002d12:	4b9a      	ldr	r3, [pc, #616]	; (8002f7c <main+0x2ac>)
 8002d14:	4a9a      	ldr	r2, [pc, #616]	; (8002f80 <main+0x2b0>)
 8002d16:	605a      	str	r2, [r3, #4]
  motor_A.tim_number_R = TIM9;
 8002d18:	4b98      	ldr	r3, [pc, #608]	; (8002f7c <main+0x2ac>)
 8002d1a:	4a9a      	ldr	r2, [pc, #616]	; (8002f84 <main+0x2b4>)
 8002d1c:	609a      	str	r2, [r3, #8]
  motor_A.tim_number_L = TIM9;
 8002d1e:	4b97      	ldr	r3, [pc, #604]	; (8002f7c <main+0x2ac>)
 8002d20:	4a98      	ldr	r2, [pc, #608]	; (8002f84 <main+0x2b4>)
 8002d22:	60da      	str	r2, [r3, #12]
  motor_A.channel_R = 1;
 8002d24:	4b95      	ldr	r3, [pc, #596]	; (8002f7c <main+0x2ac>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	741a      	strb	r2, [r3, #16]
  motor_A.channel_L = 2;
 8002d2a:	4b94      	ldr	r3, [pc, #592]	; (8002f7c <main+0x2ac>)
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	745a      	strb	r2, [r3, #17]
  motor_A.EN_PORT_R = ENR_C_GPIO_Port;
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <main+0x2ac>)
 8002d32:	4a95      	ldr	r2, [pc, #596]	; (8002f88 <main+0x2b8>)
 8002d34:	619a      	str	r2, [r3, #24]
  motor_A.EN_PORT_L = ENL_C_GPIO_Port;
 8002d36:	4b91      	ldr	r3, [pc, #580]	; (8002f7c <main+0x2ac>)
 8002d38:	4a93      	ldr	r2, [pc, #588]	; (8002f88 <main+0x2b8>)
 8002d3a:	61da      	str	r2, [r3, #28]
  motor_A.EN_PIN_R = ENR_C_Pin;
 8002d3c:	4b8f      	ldr	r3, [pc, #572]	; (8002f7c <main+0x2ac>)
 8002d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d42:	841a      	strh	r2, [r3, #32]
  motor_A.EN_PIN_L = ENL_C_Pin;
 8002d44:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <main+0x2ac>)
 8002d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d4a:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor B'
  motor_B.tim_R = &htim3;
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <main+0x2bc>)
 8002d4e:	4a90      	ldr	r2, [pc, #576]	; (8002f90 <main+0x2c0>)
 8002d50:	601a      	str	r2, [r3, #0]
  motor_B.tim_L = &htim3;
 8002d52:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <main+0x2bc>)
 8002d54:	4a8e      	ldr	r2, [pc, #568]	; (8002f90 <main+0x2c0>)
 8002d56:	605a      	str	r2, [r3, #4]
  motor_B.tim_number_R = TIM3;
 8002d58:	4b8c      	ldr	r3, [pc, #560]	; (8002f8c <main+0x2bc>)
 8002d5a:	4a8e      	ldr	r2, [pc, #568]	; (8002f94 <main+0x2c4>)
 8002d5c:	609a      	str	r2, [r3, #8]
  motor_B.tim_number_L = TIM3;
 8002d5e:	4b8b      	ldr	r3, [pc, #556]	; (8002f8c <main+0x2bc>)
 8002d60:	4a8c      	ldr	r2, [pc, #560]	; (8002f94 <main+0x2c4>)
 8002d62:	60da      	str	r2, [r3, #12]
  motor_B.channel_R = 1;
 8002d64:	4b89      	ldr	r3, [pc, #548]	; (8002f8c <main+0x2bc>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	741a      	strb	r2, [r3, #16]
  motor_B.channel_L = 2;
 8002d6a:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <main+0x2bc>)
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	745a      	strb	r2, [r3, #17]
  motor_B.EN_PORT_R = ENR_B_GPIO_Port;
 8002d70:	4b86      	ldr	r3, [pc, #536]	; (8002f8c <main+0x2bc>)
 8002d72:	4a85      	ldr	r2, [pc, #532]	; (8002f88 <main+0x2b8>)
 8002d74:	619a      	str	r2, [r3, #24]
  motor_B.EN_PORT_L = ENL_B_GPIO_Port;
 8002d76:	4b85      	ldr	r3, [pc, #532]	; (8002f8c <main+0x2bc>)
 8002d78:	4a83      	ldr	r2, [pc, #524]	; (8002f88 <main+0x2b8>)
 8002d7a:	61da      	str	r2, [r3, #28]
  motor_B.EN_PIN_R = ENR_B_Pin;
 8002d7c:	4b83      	ldr	r3, [pc, #524]	; (8002f8c <main+0x2bc>)
 8002d7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d82:	841a      	strh	r2, [r3, #32]
  motor_B.EN_PIN_L = ENL_B_Pin;
 8002d84:	4b81      	ldr	r3, [pc, #516]	; (8002f8c <main+0x2bc>)
 8002d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8a:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor C'
  motor_C.tim_R = &htim3;
 8002d8c:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <main+0x2c8>)
 8002d8e:	4a80      	ldr	r2, [pc, #512]	; (8002f90 <main+0x2c0>)
 8002d90:	601a      	str	r2, [r3, #0]
  motor_C.tim_L = &htim3;
 8002d92:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <main+0x2c8>)
 8002d94:	4a7e      	ldr	r2, [pc, #504]	; (8002f90 <main+0x2c0>)
 8002d96:	605a      	str	r2, [r3, #4]
  motor_C.tim_number_R = TIM3;
 8002d98:	4b7f      	ldr	r3, [pc, #508]	; (8002f98 <main+0x2c8>)
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <main+0x2c4>)
 8002d9c:	609a      	str	r2, [r3, #8]
  motor_C.tim_number_L = TIM3;
 8002d9e:	4b7e      	ldr	r3, [pc, #504]	; (8002f98 <main+0x2c8>)
 8002da0:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <main+0x2c4>)
 8002da2:	60da      	str	r2, [r3, #12]
  motor_C.channel_R = 3;
 8002da4:	4b7c      	ldr	r3, [pc, #496]	; (8002f98 <main+0x2c8>)
 8002da6:	2203      	movs	r2, #3
 8002da8:	741a      	strb	r2, [r3, #16]
  motor_C.channel_L = 4;
 8002daa:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <main+0x2c8>)
 8002dac:	2204      	movs	r2, #4
 8002dae:	745a      	strb	r2, [r3, #17]
  motor_C.EN_PORT_R = ENR_A_GPIO_Port;
 8002db0:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <main+0x2c8>)
 8002db2:	4a75      	ldr	r2, [pc, #468]	; (8002f88 <main+0x2b8>)
 8002db4:	619a      	str	r2, [r3, #24]
  motor_C.EN_PORT_L = ENL_A_GPIO_Port;
 8002db6:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <main+0x2c8>)
 8002db8:	4a73      	ldr	r2, [pc, #460]	; (8002f88 <main+0x2b8>)
 8002dba:	61da      	str	r2, [r3, #28]
  motor_C.EN_PIN_R = ENR_A_Pin;
 8002dbc:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <main+0x2c8>)
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	841a      	strh	r2, [r3, #32]
  motor_C.EN_PIN_L = ENL_A_Pin;
 8002dc2:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <main+0x2c8>)
 8002dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc8:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor D'
  motor_D.tim_R = &htim10;
 8002dca:	4b74      	ldr	r3, [pc, #464]	; (8002f9c <main+0x2cc>)
 8002dcc:	4a74      	ldr	r2, [pc, #464]	; (8002fa0 <main+0x2d0>)
 8002dce:	601a      	str	r2, [r3, #0]
  motor_D.tim_L = &htim11;
 8002dd0:	4b72      	ldr	r3, [pc, #456]	; (8002f9c <main+0x2cc>)
 8002dd2:	4a74      	ldr	r2, [pc, #464]	; (8002fa4 <main+0x2d4>)
 8002dd4:	605a      	str	r2, [r3, #4]
  motor_D.tim_number_R = TIM10;
 8002dd6:	4b71      	ldr	r3, [pc, #452]	; (8002f9c <main+0x2cc>)
 8002dd8:	4a73      	ldr	r2, [pc, #460]	; (8002fa8 <main+0x2d8>)
 8002dda:	609a      	str	r2, [r3, #8]
  motor_D.tim_number_L = TIM11;
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <main+0x2cc>)
 8002dde:	4a73      	ldr	r2, [pc, #460]	; (8002fac <main+0x2dc>)
 8002de0:	60da      	str	r2, [r3, #12]
  motor_D.channel_R = 1;
 8002de2:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <main+0x2cc>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	741a      	strb	r2, [r3, #16]
  motor_D.channel_L = 1;
 8002de8:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <main+0x2cc>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	745a      	strb	r2, [r3, #17]
  motor_D.EN_PORT_R = ENR_D_GPIO_Port;
 8002dee:	4b6b      	ldr	r3, [pc, #428]	; (8002f9c <main+0x2cc>)
 8002df0:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <main+0x2e0>)
 8002df2:	619a      	str	r2, [r3, #24]
  motor_D.EN_PORT_L = ENL_D_GPIO_Port;
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <main+0x2cc>)
 8002df6:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <main+0x2e0>)
 8002df8:	61da      	str	r2, [r3, #28]
  motor_D.EN_PIN_R = ENR_D_Pin;
 8002dfa:	4b68      	ldr	r3, [pc, #416]	; (8002f9c <main+0x2cc>)
 8002dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e00:	841a      	strh	r2, [r3, #32]
  motor_D.EN_PIN_L = ENL_D_Pin;
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <main+0x2cc>)
 8002e04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e08:	845a      	strh	r2, [r3, #34]	; 0x22

  //+++++++++++++++++++++++++++++++++ ENCODER INITIALIZATION ++++++++++++++++++++++++++++++//
  agv_encoder_start(encoder_A, &htim1, TIM1);
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <main+0x2e4>)
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	; (8002fb8 <main+0x2e8>)
 8002e0e:	9203      	str	r2, [sp, #12]
 8002e10:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <main+0x2ec>)
 8002e12:	9202      	str	r2, [sp, #8]
 8002e14:	466c      	mov	r4, sp
 8002e16:	f103 0210 	add.w	r2, r3, #16
 8002e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e24:	f7fe fa5a 	bl	80012dc <agv_encoder_start>
  agv_encoder_start(encoder_B, &htim2, TIM2);
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <main+0x2f0>)
 8002e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e2e:	9203      	str	r2, [sp, #12]
 8002e30:	4a64      	ldr	r2, [pc, #400]	; (8002fc4 <main+0x2f4>)
 8002e32:	9202      	str	r2, [sp, #8]
 8002e34:	466c      	mov	r4, sp
 8002e36:	f103 0210 	add.w	r2, r3, #16
 8002e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e44:	f7fe fa4a 	bl	80012dc <agv_encoder_start>
  agv_encoder_start(encoder_C, &htim4, TIM4);
 8002e48:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <main+0x2f8>)
 8002e4a:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <main+0x2fc>)
 8002e4c:	9203      	str	r2, [sp, #12]
 8002e4e:	4a60      	ldr	r2, [pc, #384]	; (8002fd0 <main+0x300>)
 8002e50:	9202      	str	r2, [sp, #8]
 8002e52:	466c      	mov	r4, sp
 8002e54:	f103 0210 	add.w	r2, r3, #16
 8002e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e62:	f7fe fa3b 	bl	80012dc <agv_encoder_start>
  agv_encoder_start(encoder_D, &htim5, TIM5);
 8002e66:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <main+0x304>)
 8002e68:	4a5b      	ldr	r2, [pc, #364]	; (8002fd8 <main+0x308>)
 8002e6a:	9203      	str	r2, [sp, #12]
 8002e6c:	4a5b      	ldr	r2, [pc, #364]	; (8002fdc <main+0x30c>)
 8002e6e:	9202      	str	r2, [sp, #8]
 8002e70:	466c      	mov	r4, sp
 8002e72:	f103 0210 	add.w	r2, r3, #16
 8002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e80:	f7fe fa2c 	bl	80012dc <agv_encoder_start>

  //+++++++++++++++++++++++++++++++++ ENCODER TO MOTOR ++++++++++++++++++++++++++++++++++++//
  motor_A.ENC = encoder_A;
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <main+0x2ac>)
 8002e86:	4a4b      	ldr	r2, [pc, #300]	; (8002fb4 <main+0x2e4>)
 8002e88:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002e8c:	4615      	mov	r5, r2
 8002e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e96:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_B.ENC = encoder_B;
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <main+0x2bc>)
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <main+0x2f0>)
 8002e9e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002ea2:	4615      	mov	r5, r2
 8002ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002eac:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_C.ENC = encoder_C;
 8002eb0:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <main+0x2c8>)
 8002eb2:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <main+0x2f8>)
 8002eb4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002eb8:	4615      	mov	r5, r2
 8002eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ebe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ec2:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_D.ENC = encoder_D;
 8002ec6:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <main+0x2cc>)
 8002ec8:	4a42      	ldr	r2, [pc, #264]	; (8002fd4 <main+0x304>)
 8002eca:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002ece:	4615      	mov	r5, r2
 8002ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ed8:	e884 0003 	stmia.w	r4, {r0, r1}

  //+++++++++++++++++++++++++++++++++ AKTUATOR INTIALIZATION ++++++++++++++++++++++++++++++//
  aktuator.PORT_IN1 = GPIOB;
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <main+0x310>)
 8002ede:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <main+0x2b8>)
 8002ee0:	601a      	str	r2, [r3, #0]
  aktuator.PIN_IN1 = GPIO_PIN_5;
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <main+0x310>)
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	821a      	strh	r2, [r3, #16]
  aktuator.PORT_IN2 = GPIOC;
 8002ee8:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <main+0x310>)
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <main+0x314>)
 8002eec:	605a      	str	r2, [r3, #4]
  aktuator.PIN_IN2 = GPIO_PIN_13;
 8002eee:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <main+0x310>)
 8002ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ef4:	825a      	strh	r2, [r3, #18]
  aktuator.PORT_IN3 = GPIOC;
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <main+0x310>)
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <main+0x314>)
 8002efa:	609a      	str	r2, [r3, #8]
  aktuator.PIN_IN3 = GPIO_PIN_14;
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <main+0x310>)
 8002efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f02:	829a      	strh	r2, [r3, #20]
  aktuator.PORT_IN4 = GPIOC;
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <main+0x310>)
 8002f06:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <main+0x314>)
 8002f08:	60da      	str	r2, [r3, #12]
  aktuator.PIN_IN4 = GPIO_PIN_15 ;
 8002f0a:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <main+0x310>)
 8002f0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f10:	82da      	strh	r2, [r3, #22]

  //+++++++++++++++++++++++++++++++++ COM START +++++++++++++++++++++++++++++++++++++++++++//
  komunikasi_ctrl_init(&huart6);
 8002f12:	4835      	ldr	r0, [pc, #212]	; (8002fe8 <main+0x318>)
 8002f14:	f7fe feba 	bl	8001c8c <komunikasi_ctrl_init>
  rx_ctrl_start_get();
 8002f18:	f7fe ff58 	bl	8001dcc <rx_ctrl_start_get>

  //+++++++++++++++++++++++++++++++++ PID INITIALIZATION ++++++++++++++++++++++++++++++//
    // Y Axis
    pid_vy.Kp = 15;				pid_vy.Ki = 3;				pid_vy.Kd = -0.001;
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <main+0x31c>)
 8002f1e:	4a34      	ldr	r2, [pc, #208]	; (8002ff0 <main+0x320>)
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	4b32      	ldr	r3, [pc, #200]	; (8002fec <main+0x31c>)
 8002f24:	4a33      	ldr	r2, [pc, #204]	; (8002ff4 <main+0x324>)
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <main+0x31c>)
 8002f2a:	4a33      	ldr	r2, [pc, #204]	; (8002ff8 <main+0x328>)
 8002f2c:	609a      	str	r2, [r3, #8]
    pid_vy.limMax = 600; 		pid_vy.limMin = -600; 		pid_vy.limMaxInt = 1; 	pid_vy.limMinInt = -1;
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <main+0x31c>)
 8002f30:	4a32      	ldr	r2, [pc, #200]	; (8002ffc <main+0x32c>)
 8002f32:	615a      	str	r2, [r3, #20]
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <main+0x31c>)
 8002f36:	4a32      	ldr	r2, [pc, #200]	; (8003000 <main+0x330>)
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <main+0x31c>)
 8002f3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f40:	61da      	str	r2, [r3, #28]
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <main+0x31c>)
 8002f44:	4a2f      	ldr	r2, [pc, #188]	; (8003004 <main+0x334>)
 8002f46:	619a      	str	r2, [r3, #24]
    pid_vy.T_sample = 0.1;
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <main+0x31c>)
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <main+0x338>)
 8002f4c:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vy);
 8002f4e:	4827      	ldr	r0, [pc, #156]	; (8002fec <main+0x31c>)
 8002f50:	f7fe fd46 	bl	80019e0 <PIDController_Init>

    // X Axis
    pid_vx.Kp = 15;				pid_vx.Ki = 3;				pid_vx.Kd = -0.001;
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <main+0x33c>)
 8002f56:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <main+0x320>)
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4b2c      	ldr	r3, [pc, #176]	; (800300c <main+0x33c>)
 8002f5c:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <main+0x324>)
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <main+0x33c>)
 8002f62:	4a25      	ldr	r2, [pc, #148]	; (8002ff8 <main+0x328>)
 8002f64:	609a      	str	r2, [r3, #8]
    pid_vx.limMax = 600; 		pid_vx.limMin = -600; 		pid_vx.limMaxInt = 1; 	pid_vx.limMinInt = -1;
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <main+0x33c>)
 8002f68:	4a24      	ldr	r2, [pc, #144]	; (8002ffc <main+0x32c>)
 8002f6a:	615a      	str	r2, [r3, #20]
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <main+0x33c>)
 8002f6e:	4a24      	ldr	r2, [pc, #144]	; (8003000 <main+0x330>)
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <main+0x33c>)
 8002f74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f78:	61da      	str	r2, [r3, #28]
 8002f7a:	e049      	b.n	8003010 <main+0x340>
 8002f7c:	2000073c 	.word	0x2000073c
 8002f80:	20000228 	.word	0x20000228
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	20000778 	.word	0x20000778
 8002f90:	20000150 	.word	0x20000150
 8002f94:	40000400 	.word	0x40000400
 8002f98:	200007b4 	.word	0x200007b4
 8002f9c:	200007f0 	.word	0x200007f0
 8002fa0:	20000270 	.word	0x20000270
 8002fa4:	200002b8 	.word	0x200002b8
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	2000082c 	.word	0x2000082c
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	200000c0 	.word	0x200000c0
 8002fc0:	20000844 	.word	0x20000844
 8002fc4:	20000108 	.word	0x20000108
 8002fc8:	2000085c 	.word	0x2000085c
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	20000198 	.word	0x20000198
 8002fd4:	20000874 	.word	0x20000874
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	200001e0 	.word	0x200001e0
 8002fe0:	200003a8 	.word	0x200003a8
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	20000300 	.word	0x20000300
 8002fec:	20000460 	.word	0x20000460
 8002ff0:	41700000 	.word	0x41700000
 8002ff4:	40400000 	.word	0x40400000
 8002ff8:	ba83126f 	.word	0xba83126f
 8002ffc:	44160000 	.word	0x44160000
 8003000:	c4160000 	.word	0xc4160000
 8003004:	bf800000 	.word	0xbf800000
 8003008:	3dcccccd 	.word	0x3dcccccd
 800300c:	20000498 	.word	0x20000498
 8003010:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <main+0x514>)
 8003012:	4a75      	ldr	r2, [pc, #468]	; (80031e8 <main+0x518>)
 8003014:	619a      	str	r2, [r3, #24]
    pid_vx.T_sample = 0.1;
 8003016:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <main+0x514>)
 8003018:	4a74      	ldr	r2, [pc, #464]	; (80031ec <main+0x51c>)
 800301a:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vx);
 800301c:	4871      	ldr	r0, [pc, #452]	; (80031e4 <main+0x514>)
 800301e:	f7fe fcdf 	bl	80019e0 <PIDController_Init>

    // T Axis
    pid_vt.Kp = 15;				pid_vt.Ki = 3;				pid_vt.Kd = -0.001;
 8003022:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <main+0x520>)
 8003024:	4a73      	ldr	r2, [pc, #460]	; (80031f4 <main+0x524>)
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <main+0x520>)
 800302a:	4a73      	ldr	r2, [pc, #460]	; (80031f8 <main+0x528>)
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <main+0x520>)
 8003030:	4a72      	ldr	r2, [pc, #456]	; (80031fc <main+0x52c>)
 8003032:	609a      	str	r2, [r3, #8]
    pid_vt.limMax = 600; 		pid_vt.limMin = -600; 		pid_vt.limMaxInt = 1; 	pid_vt.limMinInt = -1;
 8003034:	4b6e      	ldr	r3, [pc, #440]	; (80031f0 <main+0x520>)
 8003036:	4a72      	ldr	r2, [pc, #456]	; (8003200 <main+0x530>)
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <main+0x520>)
 800303c:	4a71      	ldr	r2, [pc, #452]	; (8003204 <main+0x534>)
 800303e:	611a      	str	r2, [r3, #16]
 8003040:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <main+0x520>)
 8003042:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003046:	61da      	str	r2, [r3, #28]
 8003048:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <main+0x520>)
 800304a:	4a67      	ldr	r2, [pc, #412]	; (80031e8 <main+0x518>)
 800304c:	619a      	str	r2, [r3, #24]
    pid_vt.T_sample = 0.1;
 800304e:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <main+0x520>)
 8003050:	4a66      	ldr	r2, [pc, #408]	; (80031ec <main+0x51c>)
 8003052:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vt);
 8003054:	4866      	ldr	r0, [pc, #408]	; (80031f0 <main+0x520>)
 8003056:	f7fe fcc3 	bl	80019e0 <PIDController_Init>

    // Yaw Direction
    pid_yaw.Kp = 25;			pid_yaw.Ki = 3;				pid_yaw.Kd = -0.001;
 800305a:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <main+0x538>)
 800305c:	4a6b      	ldr	r2, [pc, #428]	; (800320c <main+0x53c>)
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <main+0x538>)
 8003062:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <main+0x528>)
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	4b68      	ldr	r3, [pc, #416]	; (8003208 <main+0x538>)
 8003068:	4a64      	ldr	r2, [pc, #400]	; (80031fc <main+0x52c>)
 800306a:	609a      	str	r2, [r3, #8]
    pid_yaw.limMax = 800; 		pid_yaw.limMin = -800; 		pid_yaw.limMaxInt = 1; 	pid_yaw.limMinInt = -1;
 800306c:	4b66      	ldr	r3, [pc, #408]	; (8003208 <main+0x538>)
 800306e:	4a68      	ldr	r2, [pc, #416]	; (8003210 <main+0x540>)
 8003070:	615a      	str	r2, [r3, #20]
 8003072:	4b65      	ldr	r3, [pc, #404]	; (8003208 <main+0x538>)
 8003074:	4a67      	ldr	r2, [pc, #412]	; (8003214 <main+0x544>)
 8003076:	611a      	str	r2, [r3, #16]
 8003078:	4b63      	ldr	r3, [pc, #396]	; (8003208 <main+0x538>)
 800307a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800307e:	61da      	str	r2, [r3, #28]
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <main+0x538>)
 8003082:	4a59      	ldr	r2, [pc, #356]	; (80031e8 <main+0x518>)
 8003084:	619a      	str	r2, [r3, #24]
    pid_yaw.T_sample = 0.1;
 8003086:	4b60      	ldr	r3, [pc, #384]	; (8003208 <main+0x538>)
 8003088:	4a58      	ldr	r2, [pc, #352]	; (80031ec <main+0x51c>)
 800308a:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_yaw);
 800308c:	485e      	ldr	r0, [pc, #376]	; (8003208 <main+0x538>)
 800308e:	f7fe fca7 	bl	80019e0 <PIDController_Init>

    // STOP ALL Motor
	agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 8003092:	4e61      	ldr	r6, [pc, #388]	; (8003218 <main+0x548>)
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <main+0x54c>)
 8003096:	ac29      	add	r4, sp, #164	; 0xa4
 8003098:	461d      	mov	r5, r3
 800309a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800309c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800309e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <main+0x550>)
 80030b0:	ac1a      	add	r4, sp, #104	; 0x68
 80030b2:	461d      	mov	r5, r3
 80030b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030c8:	4b56      	ldr	r3, [pc, #344]	; (8003224 <main+0x554>)
 80030ca:	ac0b      	add	r4, sp, #44	; 0x2c
 80030cc:	461d      	mov	r5, r3
 80030ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030e2:	466d      	mov	r5, sp
 80030e4:	f106 0410 	add.w	r4, r6, #16
 80030e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030fc:	f7fe f84a 	bl	8001194 <agv_stop_all>
	HAL_Delay(1000);
 8003100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003104:	f001 ffbe 	bl	8005084 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800310e:	4846      	ldr	r0, [pc, #280]	; (8003228 <main+0x558>)
 8003110:	f002 fe74 	bl	8005dfc <HAL_GPIO_WritePin>
//			Yaw_Init = message_from_sensor.yaw;
//		}

	//--------------------- SENDING DATA ODOMETRY ----------------------------//

	CurrentTick = HAL_GetTick();
 8003114:	f001 ffaa 	bl	800506c <HAL_GetTick>
 8003118:	4603      	mov	r3, r0
 800311a:	4a44      	ldr	r2, [pc, #272]	; (800322c <main+0x55c>)
 800311c:	6013      	str	r3, [r2, #0]

	if(CurrentTick-SendDataTick > SEND_DATA_INTERVAL){
 800311e:	4b43      	ldr	r3, [pc, #268]	; (800322c <main+0x55c>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b43      	ldr	r3, [pc, #268]	; (8003230 <main+0x560>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d943      	bls.n	80031b4 <main+0x4e4>
		tx_ctrl_send_Odometry(kinematic.Sx,kinematic.Sy,kinematic.St,kinematic.Vx,kinematic.Vy,kinematic.Vt);
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <main+0x564>)
 800312e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fca5 	bl	8000a84 <__aeabi_d2iz>
 800313a:	4603      	mov	r3, r0
 800313c:	b21d      	sxth	r5, r3
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <main+0x564>)
 8003140:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fc9c 	bl	8000a84 <__aeabi_d2iz>
 800314c:	4603      	mov	r3, r0
 800314e:	b21e      	sxth	r6, r3
 8003150:	4b38      	ldr	r3, [pc, #224]	; (8003234 <main+0x564>)
 8003152:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fc93 	bl	8000a84 <__aeabi_d2iz>
 800315e:	4603      	mov	r3, r0
 8003160:	fa0f f883 	sxth.w	r8, r3
 8003164:	4b33      	ldr	r3, [pc, #204]	; (8003234 <main+0x564>)
 8003166:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f7fd fc89 	bl	8000a84 <__aeabi_d2iz>
 8003172:	4603      	mov	r3, r0
 8003174:	fa0f f983 	sxth.w	r9, r3
 8003178:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <main+0x564>)
 800317a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fd fc7f 	bl	8000a84 <__aeabi_d2iz>
 8003186:	4603      	mov	r3, r0
 8003188:	b21c      	sxth	r4, r3
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <main+0x564>)
 800318c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fc76 	bl	8000a84 <__aeabi_d2iz>
 8003198:	4603      	mov	r3, r0
 800319a:	b21b      	sxth	r3, r3
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	9400      	str	r4, [sp, #0]
 80031a0:	464b      	mov	r3, r9
 80031a2:	4642      	mov	r2, r8
 80031a4:	4631      	mov	r1, r6
 80031a6:	4628      	mov	r0, r5
 80031a8:	f7fe fda0 	bl	8001cec <tx_ctrl_send_Odometry>
		SendDataTick = CurrentTick;
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <main+0x55c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <main+0x560>)
 80031b2:	6013      	str	r3, [r2, #0]
//			// Sending to PC that Task is Done
//			tx_ctrl_task_done(currentStep);
//		  }
//	  }
//----------------------------- RUNNING ASTAR --------------------------------------------//
	if(lastid != message_from_sensor.astar_msg_id && message_from_sensor.id_data <= 0){
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <main+0x568>)
 80031b6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <main+0x56c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f000 82eb 	beq.w	800379c <main+0xacc>
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <main+0x568>)
 80031c8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 82e5 	bne.w	800379c <main+0xacc>
		for(int i = message_from_sensor.astar_total_length-lastlength; i >= 0; i--){
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <main+0x568>)
 80031d4:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 80031d8:	461a      	mov	r2, r3
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <main+0x570>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e2b6      	b.n	8003752 <main+0xa82>
 80031e4:	20000498 	.word	0x20000498
 80031e8:	bf800000 	.word	0xbf800000
 80031ec:	3dcccccd 	.word	0x3dcccccd
 80031f0:	200004d0 	.word	0x200004d0
 80031f4:	41700000 	.word	0x41700000
 80031f8:	40400000 	.word	0x40400000
 80031fc:	ba83126f 	.word	0xba83126f
 8003200:	44160000 	.word	0x44160000
 8003204:	c4160000 	.word	0xc4160000
 8003208:	20000508 	.word	0x20000508
 800320c:	41c80000 	.word	0x41c80000
 8003210:	44480000 	.word	0x44480000
 8003214:	c4480000 	.word	0xc4480000
 8003218:	2000073c 	.word	0x2000073c
 800321c:	200007f0 	.word	0x200007f0
 8003220:	200007b4 	.word	0x200007b4
 8003224:	20000778 	.word	0x20000778
 8003228:	40020800 	.word	0x40020800
 800322c:	20000720 	.word	0x20000720
 8003230:	20000724 	.word	0x20000724
 8003234:	200003c0 	.word	0x200003c0
 8003238:	20000540 	.word	0x20000540
 800323c:	20000734 	.word	0x20000734
 8003240:	20000730 	.word	0x20000730
			while(!run_to_point_with_yaw(message_from_sensor.astar_coordinate_x[i]*100,message_from_sensor.astar_coordinate_y[i]*100,0,15)){

//				 Interrupt message from Command
				if(message_from_sensor.id_data > 0 && message_from_sensor.aktuator > 0){
 8003244:	4b9e      	ldr	r3, [pc, #632]	; (80034c0 <main+0x7f0>)
 8003246:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800324a:	2b00      	cmp	r3, #0
 800324c:	d073      	beq.n	8003336 <main+0x666>
 800324e:	4b9c      	ldr	r3, [pc, #624]	; (80034c0 <main+0x7f0>)
 8003250:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d06e      	beq.n	8003336 <main+0x666>
					agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 8003258:	4e9a      	ldr	r6, [pc, #616]	; (80034c4 <main+0x7f4>)
 800325a:	4b9b      	ldr	r3, [pc, #620]	; (80034c8 <main+0x7f8>)
 800325c:	ac29      	add	r4, sp, #164	; 0xa4
 800325e:	461d      	mov	r5, r3
 8003260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800326a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800326c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003274:	4b95      	ldr	r3, [pc, #596]	; (80034cc <main+0x7fc>)
 8003276:	ac1a      	add	r4, sp, #104	; 0x68
 8003278:	461d      	mov	r5, r3
 800327a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800327c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800327e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800328a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800328e:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <main+0x800>)
 8003290:	ac0b      	add	r4, sp, #44	; 0x2c
 8003292:	461d      	mov	r5, r3
 8003294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800329c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032a8:	466d      	mov	r5, sp
 80032aa:	f106 0410 	add.w	r4, r6, #16
 80032ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032c2:	f7fd ffb5 	bl	8001230 <agv_reset_all>
					agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 80032c6:	4e7f      	ldr	r6, [pc, #508]	; (80034c4 <main+0x7f4>)
 80032c8:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <main+0x7f8>)
 80032ca:	ac29      	add	r4, sp, #164	; 0xa4
 80032cc:	461d      	mov	r5, r3
 80032ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032e2:	4b7a      	ldr	r3, [pc, #488]	; (80034cc <main+0x7fc>)
 80032e4:	ac1a      	add	r4, sp, #104	; 0x68
 80032e6:	461d      	mov	r5, r3
 80032e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032fc:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <main+0x800>)
 80032fe:	ac0b      	add	r4, sp, #44	; 0x2c
 8003300:	461d      	mov	r5, r3
 8003302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800330a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800330c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800330e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003316:	466d      	mov	r5, sp
 8003318:	f106 0410 	add.w	r4, r6, #16
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003324:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003328:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800332c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003330:	f7fd ff30 	bl	8001194 <agv_stop_all>
					break;
 8003334:	e02b      	b.n	800338e <main+0x6be>
			while(!run_to_point_with_yaw(message_from_sensor.astar_coordinate_x[i]*100,message_from_sensor.astar_coordinate_y[i]*100,0,15)){
 8003336:	4a62      	ldr	r2, [pc, #392]	; (80034c0 <main+0x7f0>)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800333e:	b29b      	uxth	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	4413      	add	r3, r2
 8003346:	461a      	mov	r2, r3
 8003348:	0091      	lsls	r1, r2, #2
 800334a:	461a      	mov	r2, r3
 800334c:	460b      	mov	r3, r1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	b29b      	uxth	r3, r3
 8003354:	b218      	sxth	r0, r3
 8003356:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <main+0x7f0>)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3364      	adds	r3, #100	; 0x64
 800335c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003360:	b29b      	uxth	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	4413      	add	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	0091      	lsls	r1, r2, #2
 800336c:	461a      	mov	r2, r3
 800336e:	460b      	mov	r3, r1
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	b29b      	uxth	r3, r3
 8003376:	b219      	sxth	r1, r3
 8003378:	230f      	movs	r3, #15
 800337a:	2200      	movs	r2, #0
 800337c:	f000 ff2c 	bl	80041d8 <run_to_point_with_yaw>
 8003380:	4603      	mov	r3, r0
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f af5b 	bne.w	8003244 <main+0x574>
				}
			}

//			 Set position based on Command
			if(message_from_sensor.id_data > 0){
 800338e:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <main+0x7f0>)
 8003390:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8199 	beq.w	80036cc <main+0x9fc>
				agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 800339a:	4e4a      	ldr	r6, [pc, #296]	; (80034c4 <main+0x7f4>)
 800339c:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <main+0x7f8>)
 800339e:	ac29      	add	r4, sp, #164	; 0xa4
 80033a0:	461d      	mov	r5, r3
 80033a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033b6:	4b45      	ldr	r3, [pc, #276]	; (80034cc <main+0x7fc>)
 80033b8:	ac1a      	add	r4, sp, #104	; 0x68
 80033ba:	461d      	mov	r5, r3
 80033bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <main+0x800>)
 80033d2:	ac0b      	add	r4, sp, #44	; 0x2c
 80033d4:	461d      	mov	r5, r3
 80033d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033ea:	466d      	mov	r5, sp
 80033ec:	f106 0410 	add.w	r4, r6, #16
 80033f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80033fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003400:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003404:	f7fd ff14 	bl	8001230 <agv_reset_all>
				agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 8003408:	4e2e      	ldr	r6, [pc, #184]	; (80034c4 <main+0x7f4>)
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <main+0x7f8>)
 800340c:	ac29      	add	r4, sp, #164	; 0xa4
 800340e:	461d      	mov	r5, r3
 8003410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800341a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800341c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003424:	4b29      	ldr	r3, [pc, #164]	; (80034cc <main+0x7fc>)
 8003426:	ac1a      	add	r4, sp, #104	; 0x68
 8003428:	461d      	mov	r5, r3
 800342a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800343a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <main+0x800>)
 8003440:	ac0b      	add	r4, sp, #44	; 0x2c
 8003442:	461d      	mov	r5, r3
 8003444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003458:	466d      	mov	r5, sp
 800345a:	f106 0410 	add.w	r4, r6, #16
 800345e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003466:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800346a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800346e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003472:	f7fd fe8f 	bl	8001194 <agv_stop_all>

				if(message_from_sensor.aktuator == 1){
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <main+0x7f0>)
 8003478:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d12b      	bne.n	80034d8 <main+0x808>
					aktuator_up(aktuator);
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <main+0x804>)
 8003482:	466c      	mov	r4, sp
 8003484:	f103 0210 	add.w	r2, r3, #16
 8003488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800348c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003492:	f7fd fd32 	bl	8000efa <aktuator_up>
					HAL_Delay(10000);
 8003496:	f242 7010 	movw	r0, #10000	; 0x2710
 800349a:	f001 fdf3 	bl	8005084 <HAL_Delay>
					aktuator_reset(aktuator);
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <main+0x804>)
 80034a0:	466c      	mov	r4, sp
 80034a2:	f103 0210 	add.w	r2, r3, #16
 80034a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80034ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b0:	f7fd fd48 	bl	8000f44 <aktuator_reset>
					message_from_sensor.id_data = 0;
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <main+0x7f0>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 80034bc:	e02f      	b.n	800351e <main+0x84e>
 80034be:	bf00      	nop
 80034c0:	20000540 	.word	0x20000540
 80034c4:	2000073c 	.word	0x2000073c
 80034c8:	200007f0 	.word	0x200007f0
 80034cc:	200007b4 	.word	0x200007b4
 80034d0:	20000778 	.word	0x20000778
 80034d4:	200003a8 	.word	0x200003a8
					}
				else if(message_from_sensor.aktuator == 2){
 80034d8:	4ba6      	ldr	r3, [pc, #664]	; (8003774 <main+0xaa4>)
 80034da:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d11d      	bne.n	800351e <main+0x84e>
					aktuator_down(aktuator);
 80034e2:	4ba5      	ldr	r3, [pc, #660]	; (8003778 <main+0xaa8>)
 80034e4:	466c      	mov	r4, sp
 80034e6:	f103 0210 	add.w	r2, r3, #16
 80034ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80034f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034f4:	f7fd fcdc 	bl	8000eb0 <aktuator_down>
					HAL_Delay(10000);
 80034f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80034fc:	f001 fdc2 	bl	8005084 <HAL_Delay>
					aktuator_reset(aktuator);
 8003500:	4b9d      	ldr	r3, [pc, #628]	; (8003778 <main+0xaa8>)
 8003502:	466c      	mov	r4, sp
 8003504:	f103 0210 	add.w	r2, r3, #16
 8003508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800350c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003512:	f7fd fd17 	bl	8000f44 <aktuator_reset>
					message_from_sensor.id_data = 0;
 8003516:	4b97      	ldr	r3, [pc, #604]	; (8003774 <main+0xaa4>)
 8003518:	2200      	movs	r2, #0
 800351a:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
				}

				if(message_from_sensor.x_data == 0 && message_from_sensor.y_data == 0 && message_from_sensor.t_data == 0){
 800351e:	4b95      	ldr	r3, [pc, #596]	; (8003774 <main+0xaa4>)
 8003520:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8003524:	2b00      	cmp	r3, #0
 8003526:	d17c      	bne.n	8003622 <main+0x952>
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <main+0xaa4>)
 800352a:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d177      	bne.n	8003622 <main+0x952>
 8003532:	4b90      	ldr	r3, [pc, #576]	; (8003774 <main+0xaa4>)
 8003534:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 8003538:	2b00      	cmp	r3, #0
 800353a:	d172      	bne.n	8003622 <main+0x952>
					agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 800353c:	4e8f      	ldr	r6, [pc, #572]	; (800377c <main+0xaac>)
 800353e:	4b90      	ldr	r3, [pc, #576]	; (8003780 <main+0xab0>)
 8003540:	ac29      	add	r4, sp, #164	; 0xa4
 8003542:	461d      	mov	r5, r3
 8003544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003558:	4b8a      	ldr	r3, [pc, #552]	; (8003784 <main+0xab4>)
 800355a:	ac1a      	add	r4, sp, #104	; 0x68
 800355c:	461d      	mov	r5, r3
 800355e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800356a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800356e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003572:	4b85      	ldr	r3, [pc, #532]	; (8003788 <main+0xab8>)
 8003574:	ac0b      	add	r4, sp, #44	; 0x2c
 8003576:	461d      	mov	r5, r3
 8003578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800357c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800358c:	466d      	mov	r5, sp
 800358e:	f106 0410 	add.w	r4, r6, #16
 8003592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800359e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80035a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035a6:	f7fd fe43 	bl	8001230 <agv_reset_all>
					agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 80035aa:	4e74      	ldr	r6, [pc, #464]	; (800377c <main+0xaac>)
 80035ac:	4b74      	ldr	r3, [pc, #464]	; (8003780 <main+0xab0>)
 80035ae:	ac29      	add	r4, sp, #164	; 0xa4
 80035b0:	461d      	mov	r5, r3
 80035b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035c6:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <main+0xab4>)
 80035c8:	ac1a      	add	r4, sp, #104	; 0x68
 80035ca:	461d      	mov	r5, r3
 80035cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035e0:	4b69      	ldr	r3, [pc, #420]	; (8003788 <main+0xab8>)
 80035e2:	ac0b      	add	r4, sp, #44	; 0x2c
 80035e4:	461d      	mov	r5, r3
 80035e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035fa:	466d      	mov	r5, sp
 80035fc:	f106 0410 	add.w	r4, r6, #16
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003608:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800360c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003610:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003614:	f7fd fdbe 	bl	8001194 <agv_stop_all>
					HAL_Delay(5000);
 8003618:	f241 3088 	movw	r0, #5000	; 0x1388
 800361c:	f001 fd32 	bl	8005084 <HAL_Delay>
 8003620:	e051      	b.n	80036c6 <main+0x9f6>
				}
				else{
					int16_t data_sx = kinematic.Sx+message_from_sensor.x_data;
 8003622:	4b5a      	ldr	r3, [pc, #360]	; (800378c <main+0xabc>)
 8003624:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <main+0xaa4>)
 800362a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc ff24 	bl	800047c <__aeabi_i2d>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4620      	mov	r0, r4
 800363a:	4629      	mov	r1, r5
 800363c:	f7fc fdd2 	bl	80001e4 <__adddf3>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f7fd fa1c 	bl	8000a84 <__aeabi_d2iz>
 800364c:	4603      	mov	r3, r0
 800364e:	817b      	strh	r3, [r7, #10]
					int16_t data_sy = kinematic.Sy+message_from_sensor.y_data;
 8003650:	4b4e      	ldr	r3, [pc, #312]	; (800378c <main+0xabc>)
 8003652:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <main+0xaa4>)
 8003658:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc ff0d 	bl	800047c <__aeabi_i2d>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4620      	mov	r0, r4
 8003668:	4629      	mov	r1, r5
 800366a:	f7fc fdbb 	bl	80001e4 <__adddf3>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f7fd fa05 	bl	8000a84 <__aeabi_d2iz>
 800367a:	4603      	mov	r3, r0
 800367c:	813b      	strh	r3, [r7, #8]
					int16_t data_st = (abs(message_from_sensor.yaw)/100)+message_from_sensor.t_data;
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <main+0xaa4>)
 8003680:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8003684:	2b00      	cmp	r3, #0
 8003686:	bfb8      	it	lt
 8003688:	425b      	neglt	r3, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <main+0xac0>)
 800368e:	fb82 1203 	smull	r1, r2, r2, r3
 8003692:	1152      	asrs	r2, r2, #5
 8003694:	17db      	asrs	r3, r3, #31
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	b29a      	uxth	r2, r3
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <main+0xaa4>)
 800369c:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	80fb      	strh	r3, [r7, #6]
					while(!run_to_point_with_yaw(data_sx,data_sy,data_st,5)){}
 80036a8:	bf00      	nop
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80036b0:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80036b4:	2305      	movs	r3, #5
 80036b6:	f000 fd8f 	bl	80041d8 <run_to_point_with_yaw>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f083 0301 	eor.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f1      	bne.n	80036aa <main+0x9da>
				}
				i++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
			}

			tx_ctrl_send_Odometry(kinematic.Sx,kinematic.Sy,kinematic.St,kinematic.Vx,kinematic.Vy,kinematic.Vt);
 80036cc:	4b2f      	ldr	r3, [pc, #188]	; (800378c <main+0xabc>)
 80036ce:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	f7fd f9d5 	bl	8000a84 <__aeabi_d2iz>
 80036da:	4603      	mov	r3, r0
 80036dc:	b21d      	sxth	r5, r3
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <main+0xabc>)
 80036e0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fd f9cc 	bl	8000a84 <__aeabi_d2iz>
 80036ec:	4603      	mov	r3, r0
 80036ee:	b21e      	sxth	r6, r3
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <main+0xabc>)
 80036f2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7fd f9c3 	bl	8000a84 <__aeabi_d2iz>
 80036fe:	4603      	mov	r3, r0
 8003700:	fa0f f883 	sxth.w	r8, r3
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <main+0xabc>)
 8003706:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fd f9b9 	bl	8000a84 <__aeabi_d2iz>
 8003712:	4603      	mov	r3, r0
 8003714:	fa0f f983 	sxth.w	r9, r3
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <main+0xabc>)
 800371a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f7fd f9af 	bl	8000a84 <__aeabi_d2iz>
 8003726:	4603      	mov	r3, r0
 8003728:	b21c      	sxth	r4, r3
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <main+0xabc>)
 800372c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	f7fd f9a6 	bl	8000a84 <__aeabi_d2iz>
 8003738:	4603      	mov	r3, r0
 800373a:	b21b      	sxth	r3, r3
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	9400      	str	r4, [sp, #0]
 8003740:	464b      	mov	r3, r9
 8003742:	4642      	mov	r2, r8
 8003744:	4631      	mov	r1, r6
 8003746:	4628      	mov	r0, r5
 8003748:	f7fe fad0 	bl	8001cec <tx_ctrl_send_Odometry>
		for(int i = message_from_sensor.astar_total_length-lastlength; i >= 0; i--){
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3b01      	subs	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f6bf adee 	bge.w	8003336 <main+0x666>

		}
//		tx_ctrl_task_done(message_from_sensor.astar_msg_id, &message_from_sensor);
		lastlength = message_from_sensor.astar_total_length;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <main+0xaa4>)
 800375c:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 8003760:	461a      	mov	r2, r3
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <main+0xac4>)
 8003764:	601a      	str	r2, [r3, #0]
		lastid = message_from_sensor.astar_msg_id;
 8003766:	4b03      	ldr	r3, [pc, #12]	; (8003774 <main+0xaa4>)
 8003768:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800376c:	461a      	mov	r2, r3
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <main+0xac8>)
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e0ea      	b.n	800394a <main+0xc7a>
 8003774:	20000540 	.word	0x20000540
 8003778:	200003a8 	.word	0x200003a8
 800377c:	2000073c 	.word	0x2000073c
 8003780:	200007f0 	.word	0x200007f0
 8003784:	200007b4 	.word	0x200007b4
 8003788:	20000778 	.word	0x20000778
 800378c:	200003c0 	.word	0x200003c0
 8003790:	51eb851f 	.word	0x51eb851f
 8003794:	20000730 	.word	0x20000730
 8003798:	20000734 	.word	0x20000734
	}
	else if(message_from_sensor.id_data > 0){
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <main+0xc80>)
 800379e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 809a 	beq.w	80038dc <main+0xc0c>
		if(message_from_sensor.aktuator == 1){
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <main+0xc80>)
 80037aa:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d11e      	bne.n	80037f0 <main+0xb20>
			aktuator_up(aktuator);
 80037b2:	4b68      	ldr	r3, [pc, #416]	; (8003954 <main+0xc84>)
 80037b4:	466c      	mov	r4, sp
 80037b6:	f103 0210 	add.w	r2, r3, #16
 80037ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037be:	e884 0003 	stmia.w	r4, {r0, r1}
 80037c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037c4:	f7fd fb99 	bl	8000efa <aktuator_up>
			HAL_Delay(10000);
 80037c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80037cc:	f001 fc5a 	bl	8005084 <HAL_Delay>
			aktuator_reset(aktuator);
 80037d0:	4b60      	ldr	r3, [pc, #384]	; (8003954 <main+0xc84>)
 80037d2:	466c      	mov	r4, sp
 80037d4:	f103 0210 	add.w	r2, r3, #16
 80037d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80037e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e2:	f7fd fbaf 	bl	8000f44 <aktuator_reset>
			message_from_sensor.id_data = 0;
 80037e6:	4b5a      	ldr	r3, [pc, #360]	; (8003950 <main+0xc80>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 80037ee:	e022      	b.n	8003836 <main+0xb66>
		}
		else if((message_from_sensor.aktuator == 2)){
 80037f0:	4b57      	ldr	r3, [pc, #348]	; (8003950 <main+0xc80>)
 80037f2:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d11d      	bne.n	8003836 <main+0xb66>
			aktuator_down(aktuator);
 80037fa:	4b56      	ldr	r3, [pc, #344]	; (8003954 <main+0xc84>)
 80037fc:	466c      	mov	r4, sp
 80037fe:	f103 0210 	add.w	r2, r3, #16
 8003802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003806:	e884 0003 	stmia.w	r4, {r0, r1}
 800380a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800380c:	f7fd fb50 	bl	8000eb0 <aktuator_down>
			HAL_Delay(10000);
 8003810:	f242 7010 	movw	r0, #10000	; 0x2710
 8003814:	f001 fc36 	bl	8005084 <HAL_Delay>
			aktuator_reset(aktuator);
 8003818:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <main+0xc84>)
 800381a:	466c      	mov	r4, sp
 800381c:	f103 0210 	add.w	r2, r3, #16
 8003820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003824:	e884 0003 	stmia.w	r4, {r0, r1}
 8003828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800382a:	f7fd fb8b 	bl	8000f44 <aktuator_reset>
			message_from_sensor.id_data = 0;
 800382e:	4b48      	ldr	r3, [pc, #288]	; (8003950 <main+0xc80>)
 8003830:	2200      	movs	r2, #0
 8003832:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
		}
		while(!run_to_point_with_yaw(kinematic.Sx+message_from_sensor.x_data,kinematic.Sy+message_from_sensor.y_data,kinematic.St+message_from_sensor.t_data,5)){}
 8003836:	bf00      	nop
 8003838:	4b47      	ldr	r3, [pc, #284]	; (8003958 <main+0xc88>)
 800383a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800383e:	4b44      	ldr	r3, [pc, #272]	; (8003950 <main+0xc80>)
 8003840:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe19 	bl	800047c <__aeabi_i2d>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fcc7 	bl	80001e4 <__adddf3>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	f7fd f911 	bl	8000a84 <__aeabi_d2iz>
 8003862:	4603      	mov	r3, r0
 8003864:	b21e      	sxth	r6, r3
 8003866:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <main+0xc88>)
 8003868:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 800386c:	4b38      	ldr	r3, [pc, #224]	; (8003950 <main+0xc80>)
 800386e:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 8003872:	4618      	mov	r0, r3
 8003874:	f7fc fe02 	bl	800047c <__aeabi_i2d>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	f7fc fcb0 	bl	80001e4 <__adddf3>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f7fd f8fa 	bl	8000a84 <__aeabi_d2iz>
 8003890:	4603      	mov	r3, r0
 8003892:	fa0f f883 	sxth.w	r8, r3
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <main+0xc88>)
 8003898:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <main+0xc80>)
 800389e:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fdea 	bl	800047c <__aeabi_i2d>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4620      	mov	r0, r4
 80038ae:	4629      	mov	r1, r5
 80038b0:	f7fc fc98 	bl	80001e4 <__adddf3>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fd f90a 	bl	8000ad4 <__aeabi_d2uiz>
 80038c0:	4603      	mov	r3, r0
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	2305      	movs	r3, #5
 80038c6:	4641      	mov	r1, r8
 80038c8:	4630      	mov	r0, r6
 80038ca:	f000 fc85 	bl	80041d8 <run_to_point_with_yaw>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f083 0301 	eor.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ae      	bne.n	8003838 <main+0xb68>
 80038da:	e41b      	b.n	8003114 <main+0x444>
	}
	else{
		agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 80038dc:	4e1f      	ldr	r6, [pc, #124]	; (800395c <main+0xc8c>)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <main+0xc90>)
 80038e0:	ac29      	add	r4, sp, #164	; 0xa4
 80038e2:	461d      	mov	r5, r3
 80038e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038f8:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <main+0xc94>)
 80038fa:	ac1a      	add	r4, sp, #104	; 0x68
 80038fc:	461d      	mov	r5, r3
 80038fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800390a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800390e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <main+0xc98>)
 8003914:	ac0b      	add	r4, sp, #44	; 0x2c
 8003916:	461d      	mov	r5, r3
 8003918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800391c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800392c:	466d      	mov	r5, sp
 800392e:	f106 0410 	add.w	r4, r6, #16
 8003932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800393e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003942:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003946:	f7fd fc25 	bl	8001194 <agv_stop_all>
	CurrentTick = HAL_GetTick();
 800394a:	f7ff bbe3 	b.w	8003114 <main+0x444>
 800394e:	bf00      	nop
 8003950:	20000540 	.word	0x20000540
 8003954:	200003a8 	.word	0x200003a8
 8003958:	200003c0 	.word	0x200003c0
 800395c:	2000073c 	.word	0x2000073c
 8003960:	200007f0 	.word	0x200007f0
 8003964:	200007b4 	.word	0x200007b4
 8003968:	20000778 	.word	0x20000778

0800396c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b094      	sub	sp, #80	; 0x50
 8003970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003972:	f107 0320 	add.w	r3, r7, #32
 8003976:	2230      	movs	r2, #48	; 0x30
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f005 f940 	bl	8008c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <SystemClock_Config+0xc8>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <SystemClock_Config+0xc8>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6413      	str	r3, [r2, #64]	; 0x40
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <SystemClock_Config+0xc8>)
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ac:	2300      	movs	r3, #0
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <SystemClock_Config+0xcc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <SystemClock_Config+0xcc>)
 80039b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <SystemClock_Config+0xcc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039c8:	2302      	movs	r3, #2
 80039ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039cc:	2301      	movs	r3, #1
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039d0:	2310      	movs	r3, #16
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d4:	2302      	movs	r3, #2
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039d8:	2300      	movs	r3, #0
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039dc:	2308      	movs	r3, #8
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80039e0:	2364      	movs	r3, #100	; 0x64
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039e4:	2302      	movs	r3, #2
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039e8:	2304      	movs	r3, #4
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ec:	f107 0320 	add.w	r3, r7, #32
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fa1d 	bl	8005e30 <HAL_RCC_OscConfig>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039fc:	f000 fed0 	bl	80047a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a00:	230f      	movs	r3, #15
 8003a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a04:	2302      	movs	r3, #2
 8003a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f002 fc7f 	bl	8006320 <HAL_RCC_ClockConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003a28:	f000 feba 	bl	80047a0 <Error_Handler>
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3750      	adds	r7, #80	; 0x50
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000

08003a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08c      	sub	sp, #48	; 0x30
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 f8d8 	bl	8008c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a58:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a5a:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <MX_TIM1_Init+0xac>)
 8003a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	4619      	mov	r1, r3
 8003aae:	480d      	ldr	r0, [pc, #52]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003ab0:	f002 ff6e 	bl	8006990 <HAL_TIM_Encoder_Init>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003aba:	f000 fe71 	bl	80047a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <MX_TIM1_Init+0xa8>)
 8003acc:	f003 fe2e 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003ad6:	f000 fe63 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ada:	bf00      	nop
 8003adc:	3730      	adds	r7, #48	; 0x30
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200000c0 	.word	0x200000c0
 8003ae8:	40010000 	.word	0x40010000

08003aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f005 f880 	bl	8008c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b30:	2301      	movs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	4619      	mov	r1, r3
 8003b5a:	480d      	ldr	r0, [pc, #52]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b5c:	f002 ff18 	bl	8006990 <HAL_TIM_Encoder_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003b66:	f000 fe1b 	bl	80047a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <MX_TIM2_Init+0xa4>)
 8003b78:	f003 fdd8 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003b82:	f000 fe0d 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	3730      	adds	r7, #48	; 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000108 	.word	0x20000108

08003b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08e      	sub	sp, #56	; 0x38
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba8:	f107 0320 	add.w	r3, r7, #32
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
 8003bc0:	615a      	str	r2, [r3, #20]
 8003bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003bc6:	4a3e      	ldr	r2, [pc, #248]	; (8003cc0 <MX_TIM3_Init+0x12c>)
 8003bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003bca:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003bcc:	2263      	movs	r2, #99	; 0x63
 8003bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003bd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bde:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be4:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bea:	4834      	ldr	r0, [pc, #208]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003bec:	f002 fd78 	bl	80066e0 <HAL_TIM_Base_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003bf6:	f000 fdd3 	bl	80047a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c04:	4619      	mov	r1, r3
 8003c06:	482d      	ldr	r0, [pc, #180]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c08:	f003 f9c8 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003c12:	f000 fdc5 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c16:	4829      	ldr	r0, [pc, #164]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c18:	f002 fdb1 	bl	800677e <HAL_TIM_PWM_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003c22:	f000 fdbd 	bl	80047a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c2e:	f107 0320 	add.w	r3, r7, #32
 8003c32:	4619      	mov	r1, r3
 8003c34:	4821      	ldr	r0, [pc, #132]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c36:	f003 fd79 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003c40:	f000 fdae 	bl	80047a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c44:	2360      	movs	r3, #96	; 0x60
 8003c46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	2200      	movs	r2, #0
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4818      	ldr	r0, [pc, #96]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c5c:	f003 f8dc 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003c66:	f000 fd9b 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4812      	ldr	r0, [pc, #72]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c72:	f003 f8d1 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003c7c:	f000 fd90 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2208      	movs	r2, #8
 8003c84:	4619      	mov	r1, r3
 8003c86:	480d      	ldr	r0, [pc, #52]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c88:	f003 f8c6 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003c92:	f000 fd85 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	220c      	movs	r2, #12
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4807      	ldr	r0, [pc, #28]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003c9e:	f003 f8bb 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8003ca8:	f000 fd7a 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cac:	4803      	ldr	r0, [pc, #12]	; (8003cbc <MX_TIM3_Init+0x128>)
 8003cae:	f000 ff2b 	bl	8004b08 <HAL_TIM_MspPostInit>

}
 8003cb2:	bf00      	nop
 8003cb4:	3738      	adds	r7, #56	; 0x38
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000150 	.word	0x20000150
 8003cc0:	40000400 	.word	0x40000400

08003cc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cca:	f107 030c 	add.w	r3, r7, #12
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 ff94 	bl	8008c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <MX_TIM4_Init+0xa4>)
 8003ce4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ce6:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfa:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	4619      	mov	r1, r3
 8003d30:	480c      	ldr	r0, [pc, #48]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003d32:	f002 fe2d 	bl	8006990 <HAL_TIM_Encoder_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003d3c:	f000 fd30 	bl	80047a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d40:	2300      	movs	r3, #0
 8003d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4805      	ldr	r0, [pc, #20]	; (8003d64 <MX_TIM4_Init+0xa0>)
 8003d4e:	f003 fced 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003d58:	f000 fd22 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d5c:	bf00      	nop
 8003d5e:	3730      	adds	r7, #48	; 0x30
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000198 	.word	0x20000198
 8003d68:	40000800 	.word	0x40000800

08003d6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f004 ff40 	bl	8008c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <MX_TIM5_Init+0xa4>)
 8003d8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003da0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003db6:	2301      	movs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003dda:	f002 fdd9 	bl	8006990 <HAL_TIM_Encoder_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003de4:	f000 fcdc 	bl	80047a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4805      	ldr	r0, [pc, #20]	; (8003e0c <MX_TIM5_Init+0xa0>)
 8003df6:	f003 fc99 	bl	800772c <HAL_TIMEx_MasterConfigSynchronization>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003e00:	f000 fcce 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e04:	bf00      	nop
 8003e06:	3730      	adds	r7, #48	; 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200001e0 	.word	0x200001e0
 8003e10:	40000c00 	.word	0x40000c00

08003e14 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e1a:	f107 0320 	add.w	r3, r7, #32
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	611a      	str	r2, [r3, #16]
 8003e36:	615a      	str	r2, [r3, #20]
 8003e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e3c:	4a2b      	ldr	r2, [pc, #172]	; (8003eec <MX_TIM9_Init+0xd8>)
 8003e3e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e42:	2263      	movs	r2, #99	; 0x63
 8003e44:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e52:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003e60:	4821      	ldr	r0, [pc, #132]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e62:	f002 fc3d 	bl	80066e0 <HAL_TIM_Base_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003e6c:	f000 fc98 	bl	80047a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003e76:	f107 0320 	add.w	r3, r7, #32
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	481a      	ldr	r0, [pc, #104]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e7e:	f003 f88d 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003e88:	f000 fc8a 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003e8c:	4816      	ldr	r0, [pc, #88]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003e8e:	f002 fc76 	bl	800677e <HAL_TIM_PWM_Init>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003e98:	f000 fc82 	bl	80047a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e9c:	2360      	movs	r3, #96	; 0x60
 8003e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	2200      	movs	r2, #0
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003eb4:	f002 ffb0 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003ebe:	f000 fc6f 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003eca:	f002 ffa5 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003ed4:	f000 fc64 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003ed8:	4803      	ldr	r0, [pc, #12]	; (8003ee8 <MX_TIM9_Init+0xd4>)
 8003eda:	f000 fe15 	bl	8004b08 <HAL_TIM_MspPostInit>

}
 8003ede:	bf00      	nop
 8003ee0:	3730      	adds	r7, #48	; 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000228 	.word	0x20000228
 8003eec:	40014000 	.word	0x40014000

08003ef0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
 8003f04:	615a      	str	r2, [r3, #20]
 8003f06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f0a:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <MX_TIM10_Init+0x98>)
 8003f0c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f10:	2263      	movs	r2, #99	; 0x63
 8003f12:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f20:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003f2e:	4815      	ldr	r0, [pc, #84]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f30:	f002 fbd6 	bl	80066e0 <HAL_TIM_Base_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003f3a:	f000 fc31 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003f3e:	4811      	ldr	r0, [pc, #68]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f40:	f002 fc1d 	bl	800677e <HAL_TIM_PWM_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003f4a:	f000 fc29 	bl	80047a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f4e:	2360      	movs	r3, #96	; 0x60
 8003f50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	2200      	movs	r2, #0
 8003f62:	4619      	mov	r1, r3
 8003f64:	4807      	ldr	r0, [pc, #28]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f66:	f002 ff57 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003f70:	f000 fc16 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003f74:	4803      	ldr	r0, [pc, #12]	; (8003f84 <MX_TIM10_Init+0x94>)
 8003f76:	f000 fdc7 	bl	8004b08 <HAL_TIM_MspPostInit>

}
 8003f7a:	bf00      	nop
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000270 	.word	0x20000270
 8003f88:	40014400 	.word	0x40014400

08003f8c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
 8003fa0:	615a      	str	r2, [r3, #20]
 8003fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003fa4:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fa6:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <MX_TIM11_Init+0x98>)
 8003fa8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8003faa:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fac:	2263      	movs	r2, #99	; 0x63
 8003fae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fbc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbe:	4b18      	ldr	r3, [pc, #96]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003fca:	4815      	ldr	r0, [pc, #84]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fcc:	f002 fb88 	bl	80066e0 <HAL_TIM_Base_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003fd6:	f000 fbe3 	bl	80047a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003fda:	4811      	ldr	r0, [pc, #68]	; (8004020 <MX_TIM11_Init+0x94>)
 8003fdc:	f002 fbcf 	bl	800677e <HAL_TIM_PWM_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003fe6:	f000 fbdb 	bl	80047a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fea:	2360      	movs	r3, #96	; 0x60
 8003fec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4619      	mov	r1, r3
 8004000:	4807      	ldr	r0, [pc, #28]	; (8004020 <MX_TIM11_Init+0x94>)
 8004002:	f002 ff09 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800400c:	f000 fbc8 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004010:	4803      	ldr	r0, [pc, #12]	; (8004020 <MX_TIM11_Init+0x94>)
 8004012:	f000 fd79 	bl	8004b08 <HAL_TIM_MspPostInit>

}
 8004016:	bf00      	nop
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200002b8 	.word	0x200002b8
 8004024:	40014800 	.word	0x40014800

08004028 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <MX_USART6_UART_Init+0x50>)
 8004030:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 8004034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004038:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 800404e:	220c      	movs	r2, #12
 8004050:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800405e:	4805      	ldr	r0, [pc, #20]	; (8004074 <MX_USART6_UART_Init+0x4c>)
 8004060:	f003 fbe6 	bl	8007830 <HAL_UART_Init>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800406a:	f000 fb99 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000300 	.word	0x20000300
 8004078:	40011400 	.word	0x40011400

0800407c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <MX_DMA_Init+0x3c>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <MX_DMA_Init+0x3c>)
 800408c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004090:	6313      	str	r3, [r2, #48]	; 0x30
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <MX_DMA_Init+0x3c>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	2039      	movs	r0, #57	; 0x39
 80040a4:	f001 f8ed 	bl	8005282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80040a8:	2039      	movs	r0, #57	; 0x39
 80040aa:	f001 f906 	bl	80052ba <HAL_NVIC_EnableIRQ>

}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800

080040bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c2:	f107 0314 	add.w	r3, r7, #20
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <MX_GPIO_Init+0x10c>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	4a3b      	ldr	r2, [pc, #236]	; (80041c8 <MX_GPIO_Init+0x10c>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	6313      	str	r3, [r2, #48]	; 0x30
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <MX_GPIO_Init+0x10c>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <MX_GPIO_Init+0x10c>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	4a34      	ldr	r2, [pc, #208]	; (80041c8 <MX_GPIO_Init+0x10c>)
 80040f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fc:	6313      	str	r3, [r2, #48]	; 0x30
 80040fe:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <MX_GPIO_Init+0x10c>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <MX_GPIO_Init+0x10c>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a2d      	ldr	r2, [pc, #180]	; (80041c8 <MX_GPIO_Init+0x10c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <MX_GPIO_Init+0x10c>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <MX_GPIO_Init+0x10c>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <MX_GPIO_Init+0x10c>)
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	6313      	str	r3, [r2, #48]	; 0x30
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <MX_GPIO_Init+0x10c>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_UART_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8004142:	2200      	movs	r2, #0
 8004144:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004148:	4820      	ldr	r0, [pc, #128]	; (80041cc <MX_GPIO_Init+0x110>)
 800414a:	f001 fe57 	bl	8005dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|ENR_D_Pin|ENL_D_Pin, GPIO_PIN_RESET);
 800414e:	2200      	movs	r2, #0
 8004150:	f248 4110 	movw	r1, #33808	; 0x8410
 8004154:	481e      	ldr	r0, [pc, #120]	; (80041d0 <MX_GPIO_Init+0x114>)
 8004156:	f001 fe51 	bl	8005dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 800415a:	2200      	movs	r2, #0
 800415c:	f24f 4134 	movw	r1, #62516	; 0xf434
 8004160:	481c      	ldr	r0, [pc, #112]	; (80041d4 <MX_GPIO_Init+0x118>)
 8004162:	f001 fe4b 	bl	8005dfc <HAL_GPIO_WritePin>
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UART_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = LED_UART_Pin|IN3_Pin|IN4_Pin;
 8004166:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800416a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416c:	2301      	movs	r3, #1
 800416e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	4619      	mov	r1, r3
 800417e:	4813      	ldr	r0, [pc, #76]	; (80041cc <MX_GPIO_Init+0x110>)
 8004180:	f001 fcb8 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin ENR_D_Pin ENL_D_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|ENR_D_Pin|ENL_D_Pin;
 8004184:	f248 4310 	movw	r3, #33808	; 0x8410
 8004188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <MX_GPIO_Init+0x114>)
 800419e:	f001 fca9 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENR_A_Pin ENL_A_Pin ENR_B_Pin ENL_B_Pin
                           ENR_C_Pin ENL_C_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 80041a2:	f24f 4334 	movw	r3, #62516	; 0xf434
 80041a6:	617b      	str	r3, [r7, #20]
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a8:	2301      	movs	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b0:	2300      	movs	r3, #0
 80041b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	4806      	ldr	r0, [pc, #24]	; (80041d4 <MX_GPIO_Init+0x118>)
 80041bc:	f001 fc9a 	bl	8005af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041c0:	bf00      	nop
 80041c2:	3728      	adds	r7, #40	; 0x28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40020800 	.word	0x40020800
 80041d0:	40020000 	.word	0x40020000
 80041d4:	40020400 	.word	0x40020400

080041d8 <run_to_point_with_yaw>:
		current_msgid = msgid;
	}
	return false;
}

bool run_to_point_with_yaw(int16_t sx, int16_t sy, uint16_t heading, int16_t error){
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	ed2d 8b02 	vpush	{d8}
 80041e0:	b0bd      	sub	sp, #244	; 0xf4
 80041e2:	af38      	add	r7, sp, #224	; 0xe0
 80041e4:	4604      	mov	r4, r0
 80041e6:	4608      	mov	r0, r1
 80041e8:	4611      	mov	r1, r2
 80041ea:	461a      	mov	r2, r3
 80041ec:	4623      	mov	r3, r4
 80041ee:	80fb      	strh	r3, [r7, #6]
 80041f0:	4603      	mov	r3, r0
 80041f2:	80bb      	strh	r3, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	803b      	strh	r3, [r7, #0]
//	if(current_msgid < msgid){
		double degree = 0;
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if(abs(kinematic.Sx - sx) < error && abs(kinematic.Sy - sy) < error && abs(degree - heading) < error){
 8004208:	4b62      	ldr	r3, [pc, #392]	; (8004394 <run_to_point_with_yaw+0x1bc>)
 800420a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f932 	bl	800047c <__aeabi_i2d>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fb ffde 	bl	80001e0 <__aeabi_dsub>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f7fc fc2a 	bl	8000a84 <__aeabi_d2iz>
 8004230:	4603      	mov	r3, r0
 8004232:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004236:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800423a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800423e:	429a      	cmp	r2, r3
 8004240:	f280 80b2 	bge.w	80043a8 <run_to_point_with_yaw+0x1d0>
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <run_to_point_with_yaw+0x1bc>)
 8004246:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 800424a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f914 	bl	800047c <__aeabi_i2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4620      	mov	r0, r4
 800425a:	4629      	mov	r1, r5
 800425c:	f7fb ffc0 	bl	80001e0 <__aeabi_dsub>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	f7fc fc0c 	bl	8000a84 <__aeabi_d2iz>
 800426c:	4603      	mov	r3, r0
 800426e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004272:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004276:	f9b7 3000 	ldrsh.w	r3, [r7]
 800427a:	429a      	cmp	r2, r3
 800427c:	f280 8094 	bge.w	80043a8 <run_to_point_with_yaw+0x1d0>
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc f8fa 	bl	800047c <__aeabi_i2d>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004290:	f7fb ffa6 	bl	80001e0 <__aeabi_dsub>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	f7fc fbf2 	bl	8000a84 <__aeabi_d2iz>
 80042a0:	4603      	mov	r3, r0
 80042a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80042a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80042aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	da7a      	bge.n	80043a8 <run_to_point_with_yaw+0x1d0>
			agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 80042b2:	4e39      	ldr	r6, [pc, #228]	; (8004398 <run_to_point_with_yaw+0x1c0>)
 80042b4:	4b39      	ldr	r3, [pc, #228]	; (800439c <run_to_point_with_yaw+0x1c4>)
 80042b6:	ac29      	add	r4, sp, #164	; 0xa4
 80042b8:	461d      	mov	r5, r3
 80042ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042ce:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <run_to_point_with_yaw+0x1c8>)
 80042d0:	ac1a      	add	r4, sp, #104	; 0x68
 80042d2:	461d      	mov	r5, r3
 80042d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <run_to_point_with_yaw+0x1cc>)
 80042ea:	ac0b      	add	r4, sp, #44	; 0x2c
 80042ec:	461d      	mov	r5, r3
 80042ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004302:	466d      	mov	r5, sp
 8004304:	f106 0410 	add.w	r4, r6, #16
 8004308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800430c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004310:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004314:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004318:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800431c:	f7fc ff88 	bl	8001230 <agv_reset_all>
			agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 8004320:	4e1d      	ldr	r6, [pc, #116]	; (8004398 <run_to_point_with_yaw+0x1c0>)
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <run_to_point_with_yaw+0x1c4>)
 8004324:	ac29      	add	r4, sp, #164	; 0xa4
 8004326:	461d      	mov	r5, r3
 8004328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800432a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800432c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800432e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <run_to_point_with_yaw+0x1c8>)
 800433e:	ac1a      	add	r4, sp, #104	; 0x68
 8004340:	461d      	mov	r5, r3
 8004342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800434a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800434c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800434e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <run_to_point_with_yaw+0x1cc>)
 8004358:	ac0b      	add	r4, sp, #44	; 0x2c
 800435a:	461d      	mov	r5, r3
 800435c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004368:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800436c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004370:	466d      	mov	r5, sp
 8004372:	f106 0410 	add.w	r4, r6, #16
 8004376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800437a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800437c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800437e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004382:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004386:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800438a:	f7fc ff03 	bl	8001194 <agv_stop_all>
			return true;
 800438e:	2301      	movs	r3, #1
 8004390:	e1e5      	b.n	800475e <run_to_point_with_yaw+0x586>
 8004392:	bf00      	nop
 8004394:	200003c0 	.word	0x200003c0
 8004398:	2000073c 	.word	0x2000073c
 800439c:	200007f0 	.word	0x200007f0
 80043a0:	200007b4 	.word	0x200007b4
 80043a4:	20000778 	.word	0x20000778
		}
		else{
			if(message_from_sensor.yaw < 0){
 80043a8:	4b73      	ldr	r3, [pc, #460]	; (8004578 <run_to_point_with_yaw+0x3a0>)
 80043aa:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f280 80f6 	bge.w	80045a0 <run_to_point_with_yaw+0x3c8>
				degree = abs(message_from_sensor.yaw)/100;
 80043b4:	4b70      	ldr	r3, [pc, #448]	; (8004578 <run_to_point_with_yaw+0x3a0>)
 80043b6:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfb8      	it	lt
 80043be:	425b      	neglt	r3, r3
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4a6e      	ldr	r2, [pc, #440]	; (800457c <run_to_point_with_yaw+0x3a4>)
 80043c4:	fb82 1203 	smull	r1, r2, r2, r3
 80043c8:	1152      	asrs	r2, r2, #5
 80043ca:	17db      	asrs	r3, r3, #31
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f854 	bl	800047c <__aeabi_i2d>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
				PIDController_Update(&pid_vx, sx, kinematic.Sx);
 80043dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e0:	ee07 3a90 	vmov	s15, r3
 80043e4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80043e8:	4b65      	ldr	r3, [pc, #404]	; (8004580 <run_to_point_with_yaw+0x3a8>)
 80043ea:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7fc fb8f 	bl	8000b14 <__aeabi_d2f>
 80043f6:	4603      	mov	r3, r0
 80043f8:	ee00 3a90 	vmov	s1, r3
 80043fc:	eeb0 0a48 	vmov.f32	s0, s16
 8004400:	4860      	ldr	r0, [pc, #384]	; (8004584 <run_to_point_with_yaw+0x3ac>)
 8004402:	f7fd fb0b 	bl	8001a1c <PIDController_Update>
				PIDController_Update(&pid_vy, sy, kinematic.Sy);
 8004406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004412:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <run_to_point_with_yaw+0x3a8>)
 8004414:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f7fc fb7a 	bl	8000b14 <__aeabi_d2f>
 8004420:	4603      	mov	r3, r0
 8004422:	ee00 3a90 	vmov	s1, r3
 8004426:	eeb0 0a48 	vmov.f32	s0, s16
 800442a:	4857      	ldr	r0, [pc, #348]	; (8004588 <run_to_point_with_yaw+0x3b0>)
 800442c:	f7fd faf6 	bl	8001a1c <PIDController_Update>
				PIDController_Update(&pid_yaw, heading, degree);
 8004430:	887b      	ldrh	r3, [r7, #2]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800443a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800443e:	f7fc fb69 	bl	8000b14 <__aeabi_d2f>
 8004442:	4603      	mov	r3, r0
 8004444:	ee00 3a90 	vmov	s1, r3
 8004448:	eeb0 0a48 	vmov.f32	s0, s16
 800444c:	484f      	ldr	r0, [pc, #316]	; (800458c <run_to_point_with_yaw+0x3b4>)
 800444e:	f7fd fae5 	bl	8001a1c <PIDController_Update>
				agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 8004452:	4e4f      	ldr	r6, [pc, #316]	; (8004590 <run_to_point_with_yaw+0x3b8>)
 8004454:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <run_to_point_with_yaw+0x3bc>)
 8004456:	ac29      	add	r4, sp, #164	; 0xa4
 8004458:	461d      	mov	r5, r3
 800445a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004466:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800446a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <run_to_point_with_yaw+0x3c0>)
 8004470:	ac1a      	add	r4, sp, #104	; 0x68
 8004472:	461d      	mov	r5, r3
 8004474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800447a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800447c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800447e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004488:	4b44      	ldr	r3, [pc, #272]	; (800459c <run_to_point_with_yaw+0x3c4>)
 800448a:	ac0b      	add	r4, sp, #44	; 0x2c
 800448c:	461d      	mov	r5, r3
 800448e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800449a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800449e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044a2:	466d      	mov	r5, sp
 80044a4:	f106 0410 	add.w	r4, r6, #16
 80044a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80044b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80044b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044bc:	f7fc feb8 	bl	8001230 <agv_reset_all>
				agv_inverse_kinematic(pid_vx.out, pid_vy.out, (pid_yaw.out), 0, motor_A, motor_B, motor_C, motor_D);
 80044c0:	4b30      	ldr	r3, [pc, #192]	; (8004584 <run_to_point_with_yaw+0x3ac>)
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fb ffeb 	bl	80004a0 <__aeabi_f2d>
 80044ca:	4680      	mov	r8, r0
 80044cc:	4689      	mov	r9, r1
 80044ce:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <run_to_point_with_yaw+0x3b0>)
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fb ffe4 	bl	80004a0 <__aeabi_f2d>
 80044d8:	4682      	mov	sl, r0
 80044da:	468b      	mov	fp, r1
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <run_to_point_with_yaw+0x3b4>)
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fb ffdd 	bl	80004a0 <__aeabi_f2d>
 80044e6:	ec41 0b17 	vmov	d7, r0, r1
 80044ea:	4e29      	ldr	r6, [pc, #164]	; (8004590 <run_to_point_with_yaw+0x3b8>)
 80044ec:	4b29      	ldr	r3, [pc, #164]	; (8004594 <run_to_point_with_yaw+0x3bc>)
 80044ee:	ac29      	add	r4, sp, #164	; 0xa4
 80044f0:	461d      	mov	r5, r3
 80044f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <run_to_point_with_yaw+0x3c0>)
 8004508:	ac1a      	add	r4, sp, #104	; 0x68
 800450a:	461d      	mov	r5, r3
 800450c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800450e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004518:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800451c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004520:	4b1e      	ldr	r3, [pc, #120]	; (800459c <run_to_point_with_yaw+0x3c4>)
 8004522:	ac0b      	add	r4, sp, #44	; 0x2c
 8004524:	461d      	mov	r5, r3
 8004526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800453a:	466d      	mov	r5, sp
 800453c:	f106 0410 	add.w	r4, r6, #16
 8004540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004548:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800454c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004550:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004554:	ed9f 3b06 	vldr	d3, [pc, #24]	; 8004570 <run_to_point_with_yaw+0x398>
 8004558:	eeb0 2a47 	vmov.f32	s4, s14
 800455c:	eef0 2a67 	vmov.f32	s5, s15
 8004560:	ec4b ab11 	vmov	d1, sl, fp
 8004564:	ec49 8b10 	vmov	d0, r8, r9
 8004568:	f7fc ff4e 	bl	8001408 <agv_inverse_kinematic>
				return false;
 800456c:	2300      	movs	r3, #0
 800456e:	e0f6      	b.n	800475e <run_to_point_with_yaw+0x586>
	...
 8004578:	20000540 	.word	0x20000540
 800457c:	51eb851f 	.word	0x51eb851f
 8004580:	200003c0 	.word	0x200003c0
 8004584:	20000498 	.word	0x20000498
 8004588:	20000460 	.word	0x20000460
 800458c:	20000508 	.word	0x20000508
 8004590:	2000073c 	.word	0x2000073c
 8004594:	200007f0 	.word	0x200007f0
 8004598:	200007b4 	.word	0x200007b4
 800459c:	20000778 	.word	0x20000778
			}
			else{
				degree = (message_from_sensor.yaw)/100;
 80045a0:	4b75      	ldr	r3, [pc, #468]	; (8004778 <run_to_point_with_yaw+0x5a0>)
 80045a2:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80045a6:	4a75      	ldr	r2, [pc, #468]	; (800477c <run_to_point_with_yaw+0x5a4>)
 80045a8:	fb82 1203 	smull	r1, r2, r2, r3
 80045ac:	1152      	asrs	r2, r2, #5
 80045ae:	17db      	asrs	r3, r3, #31
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ff61 	bl	800047c <__aeabi_i2d>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	e9c7 2302 	strd	r2, r3, [r7, #8]
				PIDController_Update(&pid_vx, sx, kinematic.Sx);
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80045ce:	4b6c      	ldr	r3, [pc, #432]	; (8004780 <run_to_point_with_yaw+0x5a8>)
 80045d0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	f7fc fa9c 	bl	8000b14 <__aeabi_d2f>
 80045dc:	4603      	mov	r3, r0
 80045de:	ee00 3a90 	vmov	s1, r3
 80045e2:	eeb0 0a48 	vmov.f32	s0, s16
 80045e6:	4867      	ldr	r0, [pc, #412]	; (8004784 <run_to_point_with_yaw+0x5ac>)
 80045e8:	f7fd fa18 	bl	8001a1c <PIDController_Update>
				PIDController_Update(&pid_vy, sy, kinematic.Sy);
 80045ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <run_to_point_with_yaw+0x5a8>)
 80045fa:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	f7fc fa87 	bl	8000b14 <__aeabi_d2f>
 8004606:	4603      	mov	r3, r0
 8004608:	ee00 3a90 	vmov	s1, r3
 800460c:	eeb0 0a48 	vmov.f32	s0, s16
 8004610:	485d      	ldr	r0, [pc, #372]	; (8004788 <run_to_point_with_yaw+0x5b0>)
 8004612:	f7fd fa03 	bl	8001a1c <PIDController_Update>
				PIDController_Update(&pid_yaw, heading, degree);
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	ee07 3a90 	vmov	s15, r3
 800461c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8004620:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004624:	f7fc fa76 	bl	8000b14 <__aeabi_d2f>
 8004628:	4603      	mov	r3, r0
 800462a:	ee00 3a90 	vmov	s1, r3
 800462e:	eeb0 0a48 	vmov.f32	s0, s16
 8004632:	4856      	ldr	r0, [pc, #344]	; (800478c <run_to_point_with_yaw+0x5b4>)
 8004634:	f7fd f9f2 	bl	8001a1c <PIDController_Update>
				agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 8004638:	4e55      	ldr	r6, [pc, #340]	; (8004790 <run_to_point_with_yaw+0x5b8>)
 800463a:	4b56      	ldr	r3, [pc, #344]	; (8004794 <run_to_point_with_yaw+0x5bc>)
 800463c:	ac29      	add	r4, sp, #164	; 0xa4
 800463e:	461d      	mov	r5, r3
 8004640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800464a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800464c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <run_to_point_with_yaw+0x5c0>)
 8004656:	ac1a      	add	r4, sp, #104	; 0x68
 8004658:	461d      	mov	r5, r3
 800465a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800465c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800465e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800466a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <run_to_point_with_yaw+0x5c4>)
 8004670:	ac0b      	add	r4, sp, #44	; 0x2c
 8004672:	461d      	mov	r5, r3
 8004674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800467c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004688:	466d      	mov	r5, sp
 800468a:	f106 0410 	add.w	r4, r6, #16
 800468e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004696:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800469a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800469e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80046a2:	f7fc fdc5 	bl	8001230 <agv_reset_all>
				agv_inverse_kinematic(pid_vx.out, pid_vy.out, (-pid_yaw.out), 0, motor_A, motor_B, motor_C, motor_D);
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <run_to_point_with_yaw+0x5ac>)
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fb fef8 	bl	80004a0 <__aeabi_f2d>
 80046b0:	4680      	mov	r8, r0
 80046b2:	4689      	mov	r9, r1
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <run_to_point_with_yaw+0x5b0>)
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb fef1 	bl	80004a0 <__aeabi_f2d>
 80046be:	4682      	mov	sl, r0
 80046c0:	468b      	mov	fp, r1
 80046c2:	4b32      	ldr	r3, [pc, #200]	; (800478c <run_to_point_with_yaw+0x5b4>)
 80046c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80046c8:	eef1 7a67 	vneg.f32	s15, s15
 80046cc:	ee17 3a90 	vmov	r3, s15
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fb fee5 	bl	80004a0 <__aeabi_f2d>
 80046d6:	ec41 0b17 	vmov	d7, r0, r1
 80046da:	4e2d      	ldr	r6, [pc, #180]	; (8004790 <run_to_point_with_yaw+0x5b8>)
 80046dc:	4b2d      	ldr	r3, [pc, #180]	; (8004794 <run_to_point_with_yaw+0x5bc>)
 80046de:	ac29      	add	r4, sp, #164	; 0xa4
 80046e0:	461d      	mov	r5, r3
 80046e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046f6:	4b28      	ldr	r3, [pc, #160]	; (8004798 <run_to_point_with_yaw+0x5c0>)
 80046f8:	ac1a      	add	r4, sp, #104	; 0x68
 80046fa:	461d      	mov	r5, r3
 80046fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800470c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004710:	4b22      	ldr	r3, [pc, #136]	; (800479c <run_to_point_with_yaw+0x5c4>)
 8004712:	ac0b      	add	r4, sp, #44	; 0x2c
 8004714:	461d      	mov	r5, r3
 8004716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800472a:	466d      	mov	r5, sp
 800472c:	f106 0410 	add.w	r4, r6, #16
 8004730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004738:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800473c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004740:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004744:	ed9f 3b0a 	vldr	d3, [pc, #40]	; 8004770 <run_to_point_with_yaw+0x598>
 8004748:	eeb0 2a47 	vmov.f32	s4, s14
 800474c:	eef0 2a67 	vmov.f32	s5, s15
 8004750:	ec4b ab11 	vmov	d1, sl, fp
 8004754:	ec49 8b10 	vmov	d0, r8, r9
 8004758:	f7fc fe56 	bl	8001408 <agv_inverse_kinematic>
				return false;
 800475c:	2300      	movs	r3, #0

		}
//		current_msgid = msgid;
//	}
	return false;
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	ecbd 8b02 	vpop	{d8}
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476c:	f3af 8000 	nop.w
	...
 8004778:	20000540 	.word	0x20000540
 800477c:	51eb851f 	.word	0x51eb851f
 8004780:	200003c0 	.word	0x200003c0
 8004784:	20000498 	.word	0x20000498
 8004788:	20000460 	.word	0x20000460
 800478c:	20000508 	.word	0x20000508
 8004790:	2000073c 	.word	0x2000073c
 8004794:	200007f0 	.word	0x200007f0
 8004798:	200007b4 	.word	0x200007b4
 800479c:	20000778 	.word	0x20000778

080047a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047a4:	b672      	cpsid	i
}
 80047a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047a8:	e7fe      	b.n	80047a8 <Error_Handler+0x8>
	...

080047ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_MspInit+0x4c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <HAL_MspInit+0x4c>)
 80047bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c0:	6453      	str	r3, [r2, #68]	; 0x44
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_MspInit+0x4c>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_MspInit+0x4c>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <HAL_MspInit+0x4c>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_MspInit+0x4c>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800

080047fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b090      	sub	sp, #64	; 0x40
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a83      	ldr	r2, [pc, #524]	; (8004a28 <HAL_TIM_Encoder_MspInit+0x22c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d135      	bne.n	800488a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	4b82      	ldr	r3, [pc, #520]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4a81      	ldr	r2, [pc, #516]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b7f      	ldr	r3, [pc, #508]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	4b7b      	ldr	r3, [pc, #492]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a7a      	ldr	r2, [pc, #488]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b78      	ldr	r3, [pc, #480]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485c:	2302      	movs	r3, #2
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004864:	2300      	movs	r3, #0
 8004866:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004868:	2301      	movs	r3, #1
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004870:	4619      	mov	r1, r3
 8004872:	486f      	ldr	r0, [pc, #444]	; (8004a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8004874:	f001 f93e 	bl	8005af4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004878:	2200      	movs	r2, #0
 800487a:	2100      	movs	r1, #0
 800487c:	201b      	movs	r0, #27
 800487e:	f000 fd00 	bl	8005282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004882:	201b      	movs	r0, #27
 8004884:	f000 fd19 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004888:	e0ca      	b.n	8004a20 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d152      	bne.n	800493a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	4b64      	ldr	r3, [pc, #400]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	4a63      	ldr	r2, [pc, #396]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6413      	str	r3, [r2, #64]	; 0x40
 80048a4:	4b61      	ldr	r3, [pc, #388]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4a5c      	ldr	r2, [pc, #368]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6313      	str	r3, [r2, #48]	; 0x30
 80048c0:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	4b56      	ldr	r3, [pc, #344]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	4a55      	ldr	r2, [pc, #340]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	6313      	str	r3, [r2, #48]	; 0x30
 80048dc:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048e8:	2320      	movs	r3, #32
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ec:	2302      	movs	r3, #2
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f4:	2300      	movs	r3, #0
 80048f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048f8:	2301      	movs	r3, #1
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004900:	4619      	mov	r1, r3
 8004902:	484b      	ldr	r0, [pc, #300]	; (8004a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8004904:	f001 f8f6 	bl	8005af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004908:	2308      	movs	r3, #8
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490c:	2302      	movs	r3, #2
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004914:	2300      	movs	r3, #0
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004918:	2301      	movs	r3, #1
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004920:	4619      	mov	r1, r3
 8004922:	4844      	ldr	r0, [pc, #272]	; (8004a34 <HAL_TIM_Encoder_MspInit+0x238>)
 8004924:	f001 f8e6 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004928:	2200      	movs	r2, #0
 800492a:	2100      	movs	r1, #0
 800492c:	201c      	movs	r0, #28
 800492e:	f000 fca8 	bl	8005282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004932:	201c      	movs	r0, #28
 8004934:	f000 fcc1 	bl	80052ba <HAL_NVIC_EnableIRQ>
}
 8004938:	e072      	b.n	8004a20 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <HAL_TIM_Encoder_MspInit+0x23c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d134      	bne.n	80049ae <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	4a37      	ldr	r2, [pc, #220]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	6413      	str	r3, [r2, #64]	; 0x40
 8004954:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4a30      	ldr	r2, [pc, #192]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	6313      	str	r3, [r2, #48]	; 0x30
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800497c:	23c0      	movs	r3, #192	; 0xc0
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	2302      	movs	r3, #2
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004984:	2301      	movs	r3, #1
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004988:	2300      	movs	r3, #0
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800498c:	2302      	movs	r3, #2
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004994:	4619      	mov	r1, r3
 8004996:	4827      	ldr	r0, [pc, #156]	; (8004a34 <HAL_TIM_Encoder_MspInit+0x238>)
 8004998:	f001 f8ac 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800499c:	2200      	movs	r2, #0
 800499e:	2100      	movs	r1, #0
 80049a0:	201e      	movs	r0, #30
 80049a2:	f000 fc6e 	bl	8005282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80049a6:	201e      	movs	r0, #30
 80049a8:	f000 fc87 	bl	80052ba <HAL_NVIC_EnableIRQ>
}
 80049ac:	e038      	b.n	8004a20 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <HAL_TIM_Encoder_MspInit+0x240>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d133      	bne.n	8004a20 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80049c2:	f043 0308 	orr.w	r3, r3, #8
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
 80049c8:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6313      	str	r3, [r2, #48]	; 0x30
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x230>)
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049f0:	2303      	movs	r3, #3
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f4:	2302      	movs	r3, #2
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049f8:	2301      	movs	r3, #1
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fc:	2300      	movs	r3, #0
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004a00:	2302      	movs	r3, #2
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4809      	ldr	r0, [pc, #36]	; (8004a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8004a0c:	f001 f872 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004a10:	2200      	movs	r2, #0
 8004a12:	2100      	movs	r1, #0
 8004a14:	2032      	movs	r0, #50	; 0x32
 8004a16:	f000 fc34 	bl	8005282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004a1a:	2032      	movs	r0, #50	; 0x32
 8004a1c:	f000 fc4d 	bl	80052ba <HAL_NVIC_EnableIRQ>
}
 8004a20:	bf00      	nop
 8004a22:	3740      	adds	r7, #64	; 0x40
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00

08004a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <HAL_TIM_Base_MspInit+0xb4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	6413      	str	r3, [r2, #64]	; 0x40
 8004a62:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004a6e:	e03a      	b.n	8004ae6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a21      	ldr	r2, [pc, #132]	; (8004afc <HAL_TIM_Base_MspInit+0xbc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10e      	bne.n	8004a98 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6453      	str	r3, [r2, #68]	; 0x44
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
}
 8004a96:	e026      	b.n	8004ae6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_TIM_Base_MspInit+0xc0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	e012      	b.n	8004ae6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <HAL_TIM_Base_MspInit+0xc4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10d      	bne.n	8004ae6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_TIM_Base_MspInit+0xb8>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	f107 031c 	add.w	r3, r7, #28
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a58      	ldr	r2, [pc, #352]	; (8004c88 <HAL_TIM_MspPostInit+0x180>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d13c      	bne.n	8004ba4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	4a56      	ldr	r2, [pc, #344]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3a:	4b54      	ldr	r3, [pc, #336]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	4a4f      	ldr	r2, [pc, #316]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004b50:	f043 0302 	orr.w	r3, r3, #2
 8004b54:	6313      	str	r3, [r2, #48]	; 0x30
 8004b56:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b62:	23c0      	movs	r3, #192	; 0xc0
 8004b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b66:	2302      	movs	r3, #2
 8004b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b72:	2302      	movs	r3, #2
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b76:	f107 031c 	add.w	r3, r7, #28
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4844      	ldr	r0, [pc, #272]	; (8004c90 <HAL_TIM_MspPostInit+0x188>)
 8004b7e:	f000 ffb9 	bl	8005af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b82:	2303      	movs	r3, #3
 8004b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b92:	2302      	movs	r3, #2
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b96:	f107 031c 	add.w	r3, r7, #28
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	483d      	ldr	r0, [pc, #244]	; (8004c94 <HAL_TIM_MspPostInit+0x18c>)
 8004b9e:	f000 ffa9 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004ba2:	e06c      	b.n	8004c7e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM9)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3b      	ldr	r2, [pc, #236]	; (8004c98 <HAL_TIM_MspPostInit+0x190>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d11e      	bne.n	8004bec <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a35      	ldr	r2, [pc, #212]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b33      	ldr	r3, [pc, #204]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004bca:	230c      	movs	r3, #12
 8004bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bde:	f107 031c 	add.w	r3, r7, #28
 8004be2:	4619      	mov	r1, r3
 8004be4:	482a      	ldr	r0, [pc, #168]	; (8004c90 <HAL_TIM_MspPostInit+0x188>)
 8004be6:	f000 ff85 	bl	8005af4 <HAL_GPIO_Init>
}
 8004bea:	e048      	b.n	8004c7e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_TIM_MspPostInit+0x194>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d11f      	bne.n	8004c36 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004c00:	f043 0302 	orr.w	r3, r3, #2
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	2300      	movs	r3, #0
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004c24:	2303      	movs	r3, #3
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c28:	f107 031c 	add.w	r3, r7, #28
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4819      	ldr	r0, [pc, #100]	; (8004c94 <HAL_TIM_MspPostInit+0x18c>)
 8004c30:	f000 ff60 	bl	8005af4 <HAL_GPIO_Init>
}
 8004c34:	e023      	b.n	8004c7e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM11)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_TIM_MspPostInit+0x198>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d11e      	bne.n	8004c7e <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004c4a:	f043 0302 	orr.w	r3, r3, #2
 8004c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_TIM_MspPostInit+0x184>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c72:	f107 031c 	add.w	r3, r7, #28
 8004c76:	4619      	mov	r1, r3
 8004c78:	4806      	ldr	r0, [pc, #24]	; (8004c94 <HAL_TIM_MspPostInit+0x18c>)
 8004c7a:	f000 ff3b 	bl	8005af4 <HAL_GPIO_Init>
}
 8004c7e:	bf00      	nop
 8004c80:	3730      	adds	r7, #48	; 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020000 	.word	0x40020000
 8004c94:	40020400 	.word	0x40020400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800

08004ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	; 0x28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a35      	ldr	r2, [pc, #212]	; (8004d98 <HAL_UART_MspInit+0xf4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d163      	bne.n	8004d8e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <HAL_UART_MspInit+0xf8>)
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	4a33      	ldr	r2, [pc, #204]	; (8004d9c <HAL_UART_MspInit+0xf8>)
 8004cd0:	f043 0320 	orr.w	r3, r3, #32
 8004cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_UART_MspInit+0xf8>)
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_UART_MspInit+0xf8>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_UART_MspInit+0xf8>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_UART_MspInit+0xf8>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004d10:	2308      	movs	r3, #8
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4821      	ldr	r0, [pc, #132]	; (8004da0 <HAL_UART_MspInit+0xfc>)
 8004d1c:	f000 feea 	bl	8005af4 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d22:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <HAL_UART_MspInit+0x104>)
 8004d24:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004d26:	4b1f      	ldr	r3, [pc, #124]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d28:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004d2c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d40:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d42:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d54:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004d62:	4810      	ldr	r0, [pc, #64]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d64:	f000 fac4 	bl	80052f0 <HAL_DMA_Init>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004d6e:	f7ff fd17 	bl	80047a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a0b      	ldr	r2, [pc, #44]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d78:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <HAL_UART_MspInit+0x100>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	2047      	movs	r0, #71	; 0x47
 8004d84:	f000 fa7d 	bl	8005282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004d88:	2047      	movs	r0, #71	; 0x47
 8004d8a:	f000 fa96 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004d8e:	bf00      	nop
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40020000 	.word	0x40020000
 8004da4:	20000348 	.word	0x20000348
 8004da8:	40026428 	.word	0x40026428

08004dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004db0:	e7fe      	b.n	8004db0 <NMI_Handler+0x4>

08004db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004db2:	b480      	push	{r7}
 8004db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004db6:	e7fe      	b.n	8004db6 <HardFault_Handler+0x4>

08004db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dbc:	e7fe      	b.n	8004dbc <MemManage_Handler+0x4>

08004dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dc2:	e7fe      	b.n	8004dc2 <BusFault_Handler+0x4>

08004dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dc8:	e7fe      	b.n	8004dc8 <UsageFault_Handler+0x4>

08004dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dea:	bf00      	nop
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indexPos++;
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <SysTick_Handler+0xa8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	4a27      	ldr	r2, [pc, #156]	; (8004e9c <SysTick_Handler+0xa8>)
 8004e00:	6013      	str	r3, [r2, #0]
		if(indexPos == 500){
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <SysTick_Handler+0xa8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e0a:	d142      	bne.n	8004e92 <SysTick_Handler+0x9e>
			encoder_A.speed = ((encoder_A.position-encoder_A.old_position)*2); // * 2 karena 500ms
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <SysTick_Handler+0xac>)
 8004e0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <SysTick_Handler+0xac>)
 8004e16:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4a20      	ldr	r2, [pc, #128]	; (8004ea0 <SysTick_Handler+0xac>)
 8004e20:	6153      	str	r3, [r2, #20]
			encoder_A.old_position = encoder_A.position;
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <SysTick_Handler+0xac>)
 8004e24:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <SysTick_Handler+0xac>)
 8004e2a:	821a      	strh	r2, [r3, #16]

			encoder_B.speed = ((encoder_B.position-encoder_B.old_position)*2);
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <SysTick_Handler+0xb0>)
 8004e2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <SysTick_Handler+0xb0>)
 8004e36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <SysTick_Handler+0xb0>)
 8004e40:	6153      	str	r3, [r2, #20]
			encoder_B.old_position = encoder_B.position;
 8004e42:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <SysTick_Handler+0xb0>)
 8004e44:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004e48:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <SysTick_Handler+0xb0>)
 8004e4a:	821a      	strh	r2, [r3, #16]

			encoder_C.speed = ((encoder_C.position-encoder_C.old_position)*2);
 8004e4c:	4b16      	ldr	r3, [pc, #88]	; (8004ea8 <SysTick_Handler+0xb4>)
 8004e4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004e52:	461a      	mov	r2, r3
 8004e54:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <SysTick_Handler+0xb4>)
 8004e56:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4a12      	ldr	r2, [pc, #72]	; (8004ea8 <SysTick_Handler+0xb4>)
 8004e60:	6153      	str	r3, [r2, #20]
			encoder_C.old_position = encoder_C.position;
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <SysTick_Handler+0xb4>)
 8004e64:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <SysTick_Handler+0xb4>)
 8004e6a:	821a      	strh	r2, [r3, #16]

			encoder_D.speed = ((encoder_D.position-encoder_D.old_position)*2);
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <SysTick_Handler+0xb8>)
 8004e6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004e72:	461a      	mov	r2, r3
 8004e74:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <SysTick_Handler+0xb8>)
 8004e76:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <SysTick_Handler+0xb8>)
 8004e80:	6153      	str	r3, [r2, #20]
			encoder_D.old_position = encoder_D.position;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <SysTick_Handler+0xb8>)
 8004e84:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <SysTick_Handler+0xb8>)
 8004e8a:	821a      	strh	r2, [r3, #16]

			indexPos = 0;
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <SysTick_Handler+0xa8>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e92:	f000 f8d7 	bl	8005044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	2000088c 	.word	0x2000088c
 8004ea0:	2000082c 	.word	0x2000082c
 8004ea4:	20000844 	.word	0x20000844
 8004ea8:	2000085c 	.word	0x2000085c
 8004eac:	20000874 	.word	0x20000874

08004eb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eb4:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <TIM1_CC_IRQHandler+0x10>)
 8004eb6:	f001 febf 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200000c0 	.word	0x200000c0

08004ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ec8:	4802      	ldr	r0, [pc, #8]	; (8004ed4 <TIM2_IRQHandler+0x10>)
 8004eca:	f001 feb5 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000108 	.word	0x20000108

08004ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <TIM4_IRQHandler+0x10>)
 8004ede:	f001 feab 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000198 	.word	0x20000198

08004eec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004ef0:	4802      	ldr	r0, [pc, #8]	; (8004efc <TIM5_IRQHandler+0x10>)
 8004ef2:	f001 fea1 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200001e0 	.word	0x200001e0

08004f00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <DMA2_Stream1_IRQHandler+0x10>)
 8004f06:	f000 fb8b 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000348 	.word	0x20000348

08004f14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004f18:	4802      	ldr	r0, [pc, #8]	; (8004f24 <USART6_IRQHandler+0x10>)
 8004f1a:	f002 fd89 	bl	8007a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000300 	.word	0x20000300

08004f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SystemInit+0x20>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	4a05      	ldr	r2, [pc, #20]	; (8004f48 <SystemInit+0x20>)
 8004f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f50:	f7ff ffea 	bl	8004f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f56:	490d      	ldr	r1, [pc, #52]	; (8004f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f58:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f5c:	e002      	b.n	8004f64 <LoopCopyDataInit>

08004f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f62:	3304      	adds	r3, #4

08004f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f68:	d3f9      	bcc.n	8004f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f6c:	4c0a      	ldr	r4, [pc, #40]	; (8004f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f70:	e001      	b.n	8004f76 <LoopFillZerobss>

08004f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f74:	3204      	adds	r2, #4

08004f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f78:	d3fb      	bcc.n	8004f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f7a:	f003 fe49 	bl	8008c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f7e:	f7fd fea7 	bl	8002cd0 <main>
  bx  lr    
 8004f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004f90:	0800a4f0 	.word	0x0800a4f0
  ldr r2, =_sbss
 8004f94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004f98:	20000894 	.word	0x20000894

08004f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f9c:	e7fe      	b.n	8004f9c <ADC_IRQHandler>
	...

08004fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <HAL_Init+0x40>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0d      	ldr	r2, [pc, #52]	; (8004fe0 <HAL_Init+0x40>)
 8004faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_Init+0x40>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <HAL_Init+0x40>)
 8004fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <HAL_Init+0x40>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <HAL_Init+0x40>)
 8004fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc8:	2003      	movs	r0, #3
 8004fca:	f000 f94f 	bl	800526c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fce:	200f      	movs	r0, #15
 8004fd0:	f000 f808 	bl	8004fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fd4:	f7ff fbea 	bl	80047ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023c00 	.word	0x40023c00

08004fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_InitTick+0x54>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_InitTick+0x58>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f967 	bl	80052d6 <HAL_SYSTICK_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e00e      	b.n	8005030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b0f      	cmp	r3, #15
 8005016:	d80a      	bhi.n	800502e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005018:	2200      	movs	r2, #0
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005020:	f000 f92f 	bl	8005282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005024:	4a06      	ldr	r2, [pc, #24]	; (8005040 <HAL_InitTick+0x5c>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20000000 	.word	0x20000000
 800503c:	20000008 	.word	0x20000008
 8005040:	20000004 	.word	0x20000004

08005044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_IncTick+0x20>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_IncTick+0x24>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4413      	add	r3, r2
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_IncTick+0x24>)
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000008 	.word	0x20000008
 8005068:	20000890 	.word	0x20000890

0800506c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return uwTick;
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_GetTick+0x14>)
 8005072:	681b      	ldr	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000890 	.word	0x20000890

08005084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800508c:	f7ff ffee 	bl	800506c <HAL_GetTick>
 8005090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800509c:	d005      	beq.n	80050aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_Delay+0x44>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050aa:	bf00      	nop
 80050ac:	f7ff ffde 	bl	800506c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d8f7      	bhi.n	80050ac <HAL_Delay+0x28>
  {
  }
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000008 	.word	0x20000008

080050cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050e8:	4013      	ands	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	60d3      	str	r3, [r2, #12]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__NVIC_GetPriorityGrouping+0x18>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	f003 0307 	and.w	r3, r3, #7
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	db0b      	blt.n	800515a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	f003 021f 	and.w	r2, r3, #31
 8005148:	4907      	ldr	r1, [pc, #28]	; (8005168 <__NVIC_EnableIRQ+0x38>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2001      	movs	r0, #1
 8005152:	fa00 f202 	lsl.w	r2, r0, r2
 8005156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e100 	.word	0xe000e100

0800516c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db0a      	blt.n	8005196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	490c      	ldr	r1, [pc, #48]	; (80051b8 <__NVIC_SetPriority+0x4c>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	440b      	add	r3, r1
 8005190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005194:	e00a      	b.n	80051ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4908      	ldr	r1, [pc, #32]	; (80051bc <__NVIC_SetPriority+0x50>)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	3b04      	subs	r3, #4
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	440b      	add	r3, r1
 80051aa:	761a      	strb	r2, [r3, #24]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000e100 	.word	0xe000e100
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f1c3 0307 	rsb	r3, r3, #7
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf28      	it	cs
 80051de:	2304      	movcs	r3, #4
 80051e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d902      	bls.n	80051f0 <NVIC_EncodePriority+0x30>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	3b03      	subs	r3, #3
 80051ee:	e000      	b.n	80051f2 <NVIC_EncodePriority+0x32>
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43da      	mvns	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	401a      	ands	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	43d9      	mvns	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	4313      	orrs	r3, r2
         );
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	; 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005238:	d301      	bcc.n	800523e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800523a:	2301      	movs	r3, #1
 800523c:	e00f      	b.n	800525e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800523e:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <SysTick_Config+0x40>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3b01      	subs	r3, #1
 8005244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005246:	210f      	movs	r1, #15
 8005248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800524c:	f7ff ff8e 	bl	800516c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <SysTick_Config+0x40>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <SysTick_Config+0x40>)
 8005258:	2207      	movs	r2, #7
 800525a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	e000e010 	.word	0xe000e010

0800526c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ff29 	bl	80050cc <__NVIC_SetPriorityGrouping>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	4603      	mov	r3, r0
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005294:	f7ff ff3e 	bl	8005114 <__NVIC_GetPriorityGrouping>
 8005298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7ff ff8e 	bl	80051c0 <NVIC_EncodePriority>
 80052a4:	4602      	mov	r2, r0
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff5d 	bl	800516c <__NVIC_SetPriority>
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff31 	bl	8005130 <__NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ffa2 	bl	8005228 <SysTick_Config>
 80052e4:	4603      	mov	r3, r0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff feb6 	bl	800506c <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e099      	b.n	8005440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532c:	e00f      	b.n	800534e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532e:	f7ff fe9d 	bl	800506c <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b05      	cmp	r3, #5
 800533a:	d908      	bls.n	800534e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e078      	b.n	8005440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e8      	bne.n	800532e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <HAL_DMA_Init+0x158>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800537a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	4313      	orrs	r3, r2
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d117      	bne.n	8005412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fb01 	bl	80059fc <DMA_CheckFifoParam>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800540e:	2301      	movs	r3, #1
 8005410:	e016      	b.n	8005440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fab8 	bl	8005990 <DMA_CalcBaseAndBitshift>
 8005420:	4603      	mov	r3, r0
 8005422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005428:	223f      	movs	r2, #63	; 0x3f
 800542a:	409a      	lsls	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	f010803f 	.word	0xf010803f

0800544c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_DMA_Start_IT+0x26>
 800546e:	2302      	movs	r3, #2
 8005470:	e040      	b.n	80054f4 <HAL_DMA_Start_IT+0xa8>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d12f      	bne.n	80054e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fa4a 	bl	8005934 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	223f      	movs	r2, #63	; 0x3f
 80054a6:	409a      	lsls	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0216 	orr.w	r2, r2, #22
 80054ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e005      	b.n	80054f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800550a:	f7ff fdaf 	bl	800506c <HAL_GetTick>
 800550e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d008      	beq.n	800552e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e052      	b.n	80055d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0216 	bic.w	r2, r2, #22
 800553c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800554c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <HAL_DMA_Abort+0x62>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0208 	bic.w	r2, r2, #8
 800556c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800557e:	e013      	b.n	80055a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005580:	f7ff fd74 	bl	800506c <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b05      	cmp	r3, #5
 800558c:	d90c      	bls.n	80055a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2203      	movs	r2, #3
 8005598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e015      	b.n	80055d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e4      	bne.n	8005580 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	223f      	movs	r2, #63	; 0x3f
 80055bc:	409a      	lsls	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d004      	beq.n	80055fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e00c      	b.n	8005614 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2205      	movs	r2, #5
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800562c:	4b8e      	ldr	r3, [pc, #568]	; (8005868 <HAL_DMA_IRQHandler+0x248>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a8e      	ldr	r2, [pc, #568]	; (800586c <HAL_DMA_IRQHandler+0x24c>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	0a9b      	lsrs	r3, r3, #10
 8005638:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564a:	2208      	movs	r2, #8
 800564c:	409a      	lsls	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01a      	beq.n	800568c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d013      	beq.n	800568c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0204 	bic.w	r2, r2, #4
 8005672:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	2208      	movs	r2, #8
 800567a:	409a      	lsls	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	f043 0201 	orr.w	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	2201      	movs	r2, #1
 8005692:	409a      	lsls	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d012      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	2201      	movs	r2, #1
 80056b0:	409a      	lsls	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	f043 0202 	orr.w	r2, r3, #2
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c6:	2204      	movs	r2, #4
 80056c8:	409a      	lsls	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d012      	beq.n	80056f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	2204      	movs	r2, #4
 80056e6:	409a      	lsls	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f0:	f043 0204 	orr.w	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fc:	2210      	movs	r2, #16
 80056fe:	409a      	lsls	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d043      	beq.n	8005790 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d03c      	beq.n	8005790 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571a:	2210      	movs	r2, #16
 800571c:	409a      	lsls	r2, r3
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d108      	bne.n	8005750 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d024      	beq.n	8005790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
 800574e:	e01f      	b.n	8005790 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
 8005760:	e016      	b.n	8005790 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0208 	bic.w	r2, r2, #8
 800577e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005794:	2220      	movs	r2, #32
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 808f 	beq.w	80058c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8087 	beq.w	80058c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	2220      	movs	r2, #32
 80057b8:	409a      	lsls	r2, r3
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d136      	bne.n	8005838 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0216 	bic.w	r2, r2, #22
 80057d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <HAL_DMA_IRQHandler+0x1da>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0208 	bic.w	r2, r2, #8
 8005808:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	223f      	movs	r2, #63	; 0x3f
 8005810:	409a      	lsls	r2, r3
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582a:	2b00      	cmp	r3, #0
 800582c:	d07e      	beq.n	800592c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
        }
        return;
 8005836:	e079      	b.n	800592c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01d      	beq.n	8005882 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10d      	bne.n	8005870 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005858:	2b00      	cmp	r3, #0
 800585a:	d031      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
 8005864:	e02c      	b.n	80058c0 <HAL_DMA_IRQHandler+0x2a0>
 8005866:	bf00      	nop
 8005868:	20000000 	.word	0x20000000
 800586c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e01e      	b.n	80058c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10f      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0210 	bic.w	r2, r2, #16
 800589e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d032      	beq.n	800592e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d022      	beq.n	800591a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2205      	movs	r2, #5
 80058d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d307      	bcc.n	8005908 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f2      	bne.n	80058ec <HAL_DMA_IRQHandler+0x2cc>
 8005906:	e000      	b.n	800590a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005908:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
 800592a:	e000      	b.n	800592e <HAL_DMA_IRQHandler+0x30e>
        return;
 800592c:	bf00      	nop
    }
  }
}
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005950:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d108      	bne.n	8005974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005972:	e007      	b.n	8005984 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	3b10      	subs	r3, #16
 80059a0:	4a14      	ldr	r2, [pc, #80]	; (80059f4 <DMA_CalcBaseAndBitshift+0x64>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <DMA_CalcBaseAndBitshift+0x68>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d909      	bls.n	80059d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	659a      	str	r2, [r3, #88]	; 0x58
 80059d0:	e007      	b.n	80059e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	aaaaaaab 	.word	0xaaaaaaab
 80059f8:	0800a290 	.word	0x0800a290

080059fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11f      	bne.n	8005a56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d856      	bhi.n	8005aca <DMA_CheckFifoParam+0xce>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <DMA_CheckFifoParam+0x28>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a47 	.word	0x08005a47
 8005a2c:	08005a35 	.word	0x08005a35
 8005a30:	08005acb 	.word	0x08005acb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d046      	beq.n	8005ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a44:	e043      	b.n	8005ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a4e:	d140      	bne.n	8005ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a54:	e03d      	b.n	8005ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5e:	d121      	bne.n	8005aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d837      	bhi.n	8005ad6 <DMA_CheckFifoParam+0xda>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <DMA_CheckFifoParam+0x70>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a83 	.word	0x08005a83
 8005a74:	08005a7d 	.word	0x08005a7d
 8005a78:	08005a95 	.word	0x08005a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e030      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d025      	beq.n	8005ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a92:	e022      	b.n	8005ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a9c:	d11f      	bne.n	8005ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005aa2:	e01c      	b.n	8005ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d903      	bls.n	8005ab2 <DMA_CheckFifoParam+0xb6>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d003      	beq.n	8005ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ab0:	e018      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab6:	e015      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac8:	e00b      	b.n	8005ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8005aca:	bf00      	nop
 8005acc:	e00a      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ace:	bf00      	nop
 8005ad0:	e008      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e006      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e159      	b.n	8005dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b10:	2201      	movs	r2, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4013      	ands	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	f040 8148 	bne.w	8005dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d005      	beq.n	8005b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d130      	bne.n	8005ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	2203      	movs	r2, #3
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43db      	mvns	r3, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 0201 	and.w	r2, r3, #1
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d017      	beq.n	8005be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d123      	bne.n	8005c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	08da      	lsrs	r2, r3, #3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3208      	adds	r2, #8
 8005bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	220f      	movs	r2, #15
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	08da      	lsrs	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3208      	adds	r2, #8
 8005c32:	69b9      	ldr	r1, [r7, #24]
 8005c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	2203      	movs	r2, #3
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 0203 	and.w	r2, r3, #3
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a2 	beq.w	8005dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	4b57      	ldr	r3, [pc, #348]	; (8005ddc <HAL_GPIO_Init+0x2e8>)
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	4a56      	ldr	r2, [pc, #344]	; (8005ddc <HAL_GPIO_Init+0x2e8>)
 8005c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c88:	6453      	str	r3, [r2, #68]	; 0x44
 8005c8a:	4b54      	ldr	r3, [pc, #336]	; (8005ddc <HAL_GPIO_Init+0x2e8>)
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c96:	4a52      	ldr	r2, [pc, #328]	; (8005de0 <HAL_GPIO_Init+0x2ec>)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	089b      	lsrs	r3, r3, #2
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	220f      	movs	r2, #15
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a49      	ldr	r2, [pc, #292]	; (8005de4 <HAL_GPIO_Init+0x2f0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d019      	beq.n	8005cf6 <HAL_GPIO_Init+0x202>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a48      	ldr	r2, [pc, #288]	; (8005de8 <HAL_GPIO_Init+0x2f4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_GPIO_Init+0x1fe>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a47      	ldr	r2, [pc, #284]	; (8005dec <HAL_GPIO_Init+0x2f8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00d      	beq.n	8005cee <HAL_GPIO_Init+0x1fa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a46      	ldr	r2, [pc, #280]	; (8005df0 <HAL_GPIO_Init+0x2fc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d007      	beq.n	8005cea <HAL_GPIO_Init+0x1f6>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a45      	ldr	r2, [pc, #276]	; (8005df4 <HAL_GPIO_Init+0x300>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_GPIO_Init+0x1f2>
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	e008      	b.n	8005cf8 <HAL_GPIO_Init+0x204>
 8005ce6:	2307      	movs	r3, #7
 8005ce8:	e006      	b.n	8005cf8 <HAL_GPIO_Init+0x204>
 8005cea:	2303      	movs	r3, #3
 8005cec:	e004      	b.n	8005cf8 <HAL_GPIO_Init+0x204>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e002      	b.n	8005cf8 <HAL_GPIO_Init+0x204>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <HAL_GPIO_Init+0x204>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	f002 0203 	and.w	r2, r2, #3
 8005cfe:	0092      	lsls	r2, r2, #2
 8005d00:	4093      	lsls	r3, r2
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d08:	4935      	ldr	r1, [pc, #212]	; (8005de0 <HAL_GPIO_Init+0x2ec>)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	089b      	lsrs	r3, r3, #2
 8005d0e:	3302      	adds	r3, #2
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d16:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d3a:	4a2f      	ldr	r2, [pc, #188]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d40:	4b2d      	ldr	r3, [pc, #180]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d64:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d6a:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	43db      	mvns	r3, r3
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	4013      	ands	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005db8:	4a0f      	ldr	r2, [pc, #60]	; (8005df8 <HAL_GPIO_Init+0x304>)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	2b0f      	cmp	r3, #15
 8005dc8:	f67f aea2 	bls.w	8005b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	40013800 	.word	0x40013800
 8005de4:	40020000 	.word	0x40020000
 8005de8:	40020400 	.word	0x40020400
 8005dec:	40020800 	.word	0x40020800
 8005df0:	40020c00 	.word	0x40020c00
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40013c00 	.word	0x40013c00

08005dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	807b      	strh	r3, [r7, #2]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e0c:	787b      	ldrb	r3, [r7, #1]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e12:	887a      	ldrh	r2, [r7, #2]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e18:	e003      	b.n	8005e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e1a:	887b      	ldrh	r3, [r7, #2]
 8005e1c:	041a      	lsls	r2, r3, #16
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	619a      	str	r2, [r3, #24]
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e267      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d075      	beq.n	8005f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e4e:	4b88      	ldr	r3, [pc, #544]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d00c      	beq.n	8005e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b85      	ldr	r3, [pc, #532]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d112      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e66:	4b82      	ldr	r3, [pc, #520]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e72:	d10b      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	4b7e      	ldr	r3, [pc, #504]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05b      	beq.n	8005f38 <HAL_RCC_OscConfig+0x108>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d157      	bne.n	8005f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e242      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d106      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x74>
 8005e96:	4b76      	ldr	r3, [pc, #472]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a75      	ldr	r2, [pc, #468]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x98>
 8005eae:	4b70      	ldr	r3, [pc, #448]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6f      	ldr	r2, [pc, #444]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b6d      	ldr	r3, [pc, #436]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a6c      	ldr	r2, [pc, #432]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ec8:	4b69      	ldr	r3, [pc, #420]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a68      	ldr	r2, [pc, #416]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b66      	ldr	r3, [pc, #408]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a65      	ldr	r2, [pc, #404]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7ff f8c0 	bl	800506c <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7ff f8bc 	bl	800506c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e207      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b5b      	ldr	r3, [pc, #364]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xc0>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7ff f8ac 	bl	800506c <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7ff f8a8 	bl	800506c <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1f3      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	4b51      	ldr	r3, [pc, #324]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0xe8>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d063      	beq.n	800600e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f46:	4b4a      	ldr	r3, [pc, #296]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d11c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5e:	4b44      	ldr	r3, [pc, #272]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	4b41      	ldr	r3, [pc, #260]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e1c7      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f82:	4b3b      	ldr	r3, [pc, #236]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4937      	ldr	r1, [pc, #220]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	e03a      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fa0:	4b34      	ldr	r3, [pc, #208]	; (8006074 <HAL_RCC_OscConfig+0x244>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7ff f861 	bl	800506c <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fae:	f7ff f85d 	bl	800506c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e1a8      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fcc:	4b28      	ldr	r3, [pc, #160]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4925      	ldr	r1, [pc, #148]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	e015      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe2:	4b24      	ldr	r3, [pc, #144]	; (8006074 <HAL_RCC_OscConfig+0x244>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7ff f840 	bl	800506c <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7ff f83c 	bl	800506c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e187      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d036      	beq.n	8006088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_RCC_OscConfig+0x248>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7ff f820 	bl	800506c <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006030:	f7ff f81c 	bl	800506c <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e167      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCC_OscConfig+0x240>)
 8006044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x200>
 800604e:	e01b      	b.n	8006088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <HAL_RCC_OscConfig+0x248>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006056:	f7ff f809 	bl	800506c <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800605c:	e00e      	b.n	800607c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605e:	f7ff f805 	bl	800506c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d907      	bls.n	800607c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e150      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
 8006070:	40023800 	.word	0x40023800
 8006074:	42470000 	.word	0x42470000
 8006078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800607c:	4b88      	ldr	r3, [pc, #544]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800607e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1ea      	bne.n	800605e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8097 	beq.w	80061c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609a:	4b81      	ldr	r3, [pc, #516]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	4b7d      	ldr	r3, [pc, #500]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	4a7c      	ldr	r2, [pc, #496]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6413      	str	r3, [r2, #64]	; 0x40
 80060b6:	4b7a      	ldr	r3, [pc, #488]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c6:	4b77      	ldr	r3, [pc, #476]	; (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d118      	bne.n	8006104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d2:	4b74      	ldr	r3, [pc, #464]	; (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a73      	ldr	r2, [pc, #460]	; (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060de:	f7fe ffc5 	bl	800506c <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e6:	f7fe ffc1 	bl	800506c <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e10c      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f8:	4b6a      	ldr	r3, [pc, #424]	; (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x2ea>
 800610c:	4b64      	ldr	r3, [pc, #400]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	4a63      	ldr	r2, [pc, #396]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	; 0x70
 8006118:	e01c      	b.n	8006154 <HAL_RCC_OscConfig+0x324>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b05      	cmp	r3, #5
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0x30c>
 8006122:	4b5f      	ldr	r3, [pc, #380]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	4a5e      	ldr	r2, [pc, #376]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	6713      	str	r3, [r2, #112]	; 0x70
 800612e:	4b5c      	ldr	r3, [pc, #368]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006132:	4a5b      	ldr	r2, [pc, #364]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	6713      	str	r3, [r2, #112]	; 0x70
 800613a:	e00b      	b.n	8006154 <HAL_RCC_OscConfig+0x324>
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	4a57      	ldr	r2, [pc, #348]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	6713      	str	r3, [r2, #112]	; 0x70
 8006148:	4b55      	ldr	r3, [pc, #340]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614c:	4a54      	ldr	r2, [pc, #336]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800614e:	f023 0304 	bic.w	r3, r3, #4
 8006152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fe ff86 	bl	800506c <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fe ff82 	bl	800506c <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e0cb      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617a:	4b49      	ldr	r3, [pc, #292]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ee      	beq.n	8006164 <HAL_RCC_OscConfig+0x334>
 8006186:	e014      	b.n	80061b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006188:	f7fe ff70 	bl	800506c <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fe ff6c 	bl	800506c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0b5      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1ee      	bne.n	8006190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b8:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	4a38      	ldr	r2, [pc, #224]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a1 	beq.w	8006310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ce:	4b34      	ldr	r3, [pc, #208]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d05c      	beq.n	8006294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d141      	bne.n	8006266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <HAL_RCC_OscConfig+0x478>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fe ff40 	bl	800506c <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fe ff3c 	bl	800506c <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e087      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	019b      	lsls	r3, r3, #6
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	3b01      	subs	r3, #1
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	061b      	lsls	r3, r3, #24
 8006232:	491b      	ldr	r1, [pc, #108]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <HAL_RCC_OscConfig+0x478>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623e:	f7fe ff15 	bl	800506c <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006246:	f7fe ff11 	bl	800506c <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e05c      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x416>
 8006264:	e054      	b.n	8006310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006266:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <HAL_RCC_OscConfig+0x478>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fe fefe 	bl	800506c <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006274:	f7fe fefa 	bl	800506c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e045      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x444>
 8006292:	e03d      	b.n	8006310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e038      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000
 80062a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_RCC_OscConfig+0x4ec>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d028      	beq.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d121      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d11a      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d111      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	3b01      	subs	r3, #1
 80062f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d107      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800

08006320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0cc      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006334:	4b68      	ldr	r3, [pc, #416]	; (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d90c      	bls.n	800635c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006342:	4b65      	ldr	r3, [pc, #404]	; (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b63      	ldr	r3, [pc, #396]	; (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0b8      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d020      	beq.n	80063aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006374:	4b59      	ldr	r3, [pc, #356]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a58      	ldr	r2, [pc, #352]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800637e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800638c:	4b53      	ldr	r3, [pc, #332]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a52      	ldr	r2, [pc, #328]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006398:	4b50      	ldr	r3, [pc, #320]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	494d      	ldr	r1, [pc, #308]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d044      	beq.n	8006440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063be:	4b47      	ldr	r3, [pc, #284]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d119      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e07f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d003      	beq.n	80063de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d107      	bne.n	80063ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063de:	4b3f      	ldr	r3, [pc, #252]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e06f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ee:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e067      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063fe:	4b37      	ldr	r3, [pc, #220]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f023 0203 	bic.w	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4934      	ldr	r1, [pc, #208]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	4313      	orrs	r3, r2
 800640e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006410:	f7fe fe2c 	bl	800506c <HAL_GetTick>
 8006414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	e00a      	b.n	800642e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f7fe fe28 	bl	800506c <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e04f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642e:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 020c 	and.w	r2, r3, #12
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	429a      	cmp	r2, r3
 800643e:	d1eb      	bne.n	8006418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006440:	4b25      	ldr	r3, [pc, #148]	; (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d20c      	bcs.n	8006468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b22      	ldr	r3, [pc, #136]	; (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b20      	ldr	r3, [pc, #128]	; (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e032      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	4916      	ldr	r1, [pc, #88]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006482:	4313      	orrs	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	490e      	ldr	r1, [pc, #56]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064a6:	f000 f821 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80064aa:	4602      	mov	r2, r0
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	490a      	ldr	r1, [pc, #40]	; (80064e0 <HAL_RCC_ClockConfig+0x1c0>)
 80064b8:	5ccb      	ldrb	r3, [r1, r3]
 80064ba:	fa22 f303 	lsr.w	r3, r2, r3
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <HAL_RCC_ClockConfig+0x1c4>)
 80064c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <HAL_RCC_ClockConfig+0x1c8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fd8c 	bl	8004fe4 <HAL_InitTick>

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40023c00 	.word	0x40023c00
 80064dc:	40023800 	.word	0x40023800
 80064e0:	0800a278 	.word	0x0800a278
 80064e4:	20000000 	.word	0x20000000
 80064e8:	20000004 	.word	0x20000004

080064ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b090      	sub	sp, #64	; 0x40
 80064f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
 80064f8:	2300      	movs	r3, #0
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fc:	2300      	movs	r3, #0
 80064fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006504:	4b59      	ldr	r3, [pc, #356]	; (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d00d      	beq.n	800652c <HAL_RCC_GetSysClockFreq+0x40>
 8006510:	2b08      	cmp	r3, #8
 8006512:	f200 80a1 	bhi.w	8006658 <HAL_RCC_GetSysClockFreq+0x16c>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x34>
 800651a:	2b04      	cmp	r3, #4
 800651c:	d003      	beq.n	8006526 <HAL_RCC_GetSysClockFreq+0x3a>
 800651e:	e09b      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006520:	4b53      	ldr	r3, [pc, #332]	; (8006670 <HAL_RCC_GetSysClockFreq+0x184>)
 8006522:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006524:	e09b      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006526:	4b53      	ldr	r3, [pc, #332]	; (8006674 <HAL_RCC_GetSysClockFreq+0x188>)
 8006528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800652a:	e098      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800652c:	4b4f      	ldr	r3, [pc, #316]	; (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006536:	4b4d      	ldr	r3, [pc, #308]	; (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d028      	beq.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b4a      	ldr	r3, [pc, #296]	; (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	627a      	str	r2, [r7, #36]	; 0x24
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006554:	2100      	movs	r1, #0
 8006556:	4b47      	ldr	r3, [pc, #284]	; (8006674 <HAL_RCC_GetSysClockFreq+0x188>)
 8006558:	fb03 f201 	mul.w	r2, r3, r1
 800655c:	2300      	movs	r3, #0
 800655e:	fb00 f303 	mul.w	r3, r0, r3
 8006562:	4413      	add	r3, r2
 8006564:	4a43      	ldr	r2, [pc, #268]	; (8006674 <HAL_RCC_GetSysClockFreq+0x188>)
 8006566:	fba0 1202 	umull	r1, r2, r0, r2
 800656a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800656c:	460a      	mov	r2, r1
 800656e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006572:	4413      	add	r3, r2
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	2200      	movs	r2, #0
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	61fa      	str	r2, [r7, #28]
 800657e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006586:	f7fa fb15 	bl	8000bb4 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4613      	mov	r3, r2
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006592:	e053      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006594:	4b35      	ldr	r3, [pc, #212]	; (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	2200      	movs	r2, #0
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	617a      	str	r2, [r7, #20]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065a6:	f04f 0b00 	mov.w	fp, #0
 80065aa:	4652      	mov	r2, sl
 80065ac:	465b      	mov	r3, fp
 80065ae:	f04f 0000 	mov.w	r0, #0
 80065b2:	f04f 0100 	mov.w	r1, #0
 80065b6:	0159      	lsls	r1, r3, #5
 80065b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065bc:	0150      	lsls	r0, r2, #5
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	ebb2 080a 	subs.w	r8, r2, sl
 80065c6:	eb63 090b 	sbc.w	r9, r3, fp
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065de:	ebb2 0408 	subs.w	r4, r2, r8
 80065e2:	eb63 0509 	sbc.w	r5, r3, r9
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	00eb      	lsls	r3, r5, #3
 80065f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f4:	00e2      	lsls	r2, r4, #3
 80065f6:	4614      	mov	r4, r2
 80065f8:	461d      	mov	r5, r3
 80065fa:	eb14 030a 	adds.w	r3, r4, sl
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	eb45 030b 	adc.w	r3, r5, fp
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006612:	4629      	mov	r1, r5
 8006614:	028b      	lsls	r3, r1, #10
 8006616:	4621      	mov	r1, r4
 8006618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800661c:	4621      	mov	r1, r4
 800661e:	028a      	lsls	r2, r1, #10
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	2200      	movs	r2, #0
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	60fa      	str	r2, [r7, #12]
 800662c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006630:	f7fa fac0 	bl	8000bb4 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4613      	mov	r3, r2
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	3301      	adds	r3, #1
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800664c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006656:	e002      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_RCC_GetSysClockFreq+0x184>)
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800665c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006660:	4618      	mov	r0, r3
 8006662:	3740      	adds	r7, #64	; 0x40
 8006664:	46bd      	mov	sp, r7
 8006666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666a:	bf00      	nop
 800666c:	40023800 	.word	0x40023800
 8006670:	00f42400 	.word	0x00f42400
 8006674:	017d7840 	.word	0x017d7840

08006678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800667c:	4b03      	ldr	r3, [pc, #12]	; (800668c <HAL_RCC_GetHCLKFreq+0x14>)
 800667e:	681b      	ldr	r3, [r3, #0]
}
 8006680:	4618      	mov	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000000 	.word	0x20000000

08006690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006694:	f7ff fff0 	bl	8006678 <HAL_RCC_GetHCLKFreq>
 8006698:	4602      	mov	r2, r0
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	0a9b      	lsrs	r3, r3, #10
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	4903      	ldr	r1, [pc, #12]	; (80066b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a6:	5ccb      	ldrb	r3, [r1, r3]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40023800 	.word	0x40023800
 80066b4:	0800a288 	.word	0x0800a288

080066b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066bc:	f7ff ffdc 	bl	8006678 <HAL_RCC_GetHCLKFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	0b5b      	lsrs	r3, r3, #13
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	4903      	ldr	r1, [pc, #12]	; (80066dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40023800 	.word	0x40023800
 80066dc:	0800a288 	.word	0x0800a288

080066e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e041      	b.n	8006776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fe f99a 	bl	8004a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f000 fd2c 	bl	800717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e041      	b.n	8006814 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f839 	bl	800681c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	4610      	mov	r0, r2
 80067be:	f000 fcdd 	bl	800717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_TIM_PWM_Start+0x24>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e022      	b.n	800689a <HAL_TIM_PWM_Start+0x6a>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b04      	cmp	r3, #4
 8006858:	d109      	bne.n	800686e <HAL_TIM_PWM_Start+0x3e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e015      	b.n	800689a <HAL_TIM_PWM_Start+0x6a>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d109      	bne.n	8006888 <HAL_TIM_PWM_Start+0x58>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e008      	b.n	800689a <HAL_TIM_PWM_Start+0x6a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	bf14      	ite	ne
 8006894:	2301      	movne	r3, #1
 8006896:	2300      	moveq	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e068      	b.n	8006974 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_PWM_Start+0x82>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b0:	e013      	b.n	80068da <HAL_TIM_PWM_Start+0xaa>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Start+0x92>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c0:	e00b      	b.n	80068da <HAL_TIM_PWM_Start+0xaa>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start+0xa2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d0:	e003      	b.n	80068da <HAL_TIM_PWM_Start+0xaa>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fefc 	bl	80076e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a23      	ldr	r2, [pc, #140]	; (800697c <HAL_TIM_PWM_Start+0x14c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d107      	bne.n	8006902 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006900:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1d      	ldr	r2, [pc, #116]	; (800697c <HAL_TIM_PWM_Start+0x14c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d018      	beq.n	800693e <HAL_TIM_PWM_Start+0x10e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006914:	d013      	beq.n	800693e <HAL_TIM_PWM_Start+0x10e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_TIM_PWM_Start+0x150>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIM_PWM_Start+0x10e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a17      	ldr	r2, [pc, #92]	; (8006984 <HAL_TIM_PWM_Start+0x154>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_TIM_PWM_Start+0x10e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a16      	ldr	r2, [pc, #88]	; (8006988 <HAL_TIM_PWM_Start+0x158>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIM_PWM_Start+0x10e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <HAL_TIM_PWM_Start+0x15c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d111      	bne.n	8006962 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b06      	cmp	r3, #6
 800694e:	d010      	beq.n	8006972 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	e007      	b.n	8006972 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40010000 	.word	0x40010000
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800
 8006988:	40000c00 	.word	0x40000c00
 800698c:	40014000 	.word	0x40014000

08006990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e097      	b.n	8006ad4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fd ff1f 	bl	80047fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d4:	f023 0307 	bic.w	r3, r3, #7
 80069d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f000 fbc9 	bl	800717c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	4313      	orrs	r3, r2
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a30:	f023 030c 	bic.w	r3, r3, #12
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	011a      	lsls	r2, r3, #4
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	031b      	lsls	r3, r3, #12
 8006a60:	4313      	orrs	r3, r2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	4313      	orrs	r3, r2
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006af4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006afc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d110      	bne.n	8006b2e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d102      	bne.n	8006b18 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b12:	7b7b      	ldrb	r3, [r7, #13]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e089      	b.n	8006c30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b2c:	e031      	b.n	8006b92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d110      	bne.n	8006b56 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d102      	bne.n	8006b40 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b3a:	7b3b      	ldrb	r3, [r7, #12]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e075      	b.n	8006c30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b54:	e01d      	b.n	8006b92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d108      	bne.n	8006b6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b62:	7b7b      	ldrb	r3, [r7, #13]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d102      	bne.n	8006b6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b68:	7b3b      	ldrb	r3, [r7, #12]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e05e      	b.n	8006c30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d010      	beq.n	8006bc0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006b9e:	e01f      	b.n	8006be0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fd99 	bl	80076e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0202 	orr.w	r2, r2, #2
 8006bbc:	60da      	str	r2, [r3, #12]
      break;
 8006bbe:	e02e      	b.n	8006c1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fd89 	bl	80076e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0204 	orr.w	r2, r2, #4
 8006bdc:	60da      	str	r2, [r3, #12]
      break;
 8006bde:	e01e      	b.n	8006c1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2201      	movs	r2, #1
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fd79 	bl	80076e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2104      	movs	r1, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fd72 	bl	80076e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0202 	orr.w	r2, r2, #2
 8006c0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0204 	orr.w	r2, r2, #4
 8006c1a:	60da      	str	r2, [r3, #12]
      break;
 8006c1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0201 	orr.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d020      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0202 	mvn.w	r2, #2
 8006c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fb fce0 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa57 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa5e 	bl	8007152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d020      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01b      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0204 	mvn.w	r2, #4
 8006cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb fcba 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa31 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa38 	bl	8007152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d020      	beq.n	8006d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01b      	beq.n	8006d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0208 	mvn.w	r2, #8
 8006d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fb fc94 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa0b 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa12 	bl	8007152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d020      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0210 	mvn.w	r2, #16
 8006d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2208      	movs	r2, #8
 8006d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fb fc6e 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9e5 	bl	800713e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f9ec 	bl	8007152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0201 	mvn.w	r2, #1
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9c3 	bl	800712a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd2a 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f9bd 	bl	8007166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0220 	mvn.w	r2, #32
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fcfc 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e0ae      	b.n	8006f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b0c      	cmp	r3, #12
 8006e42:	f200 809f 	bhi.w	8006f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e46:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e81 	.word	0x08006e81
 8006e50:	08006f85 	.word	0x08006f85
 8006e54:	08006f85 	.word	0x08006f85
 8006e58:	08006f85 	.word	0x08006f85
 8006e5c:	08006ec1 	.word	0x08006ec1
 8006e60:	08006f85 	.word	0x08006f85
 8006e64:	08006f85 	.word	0x08006f85
 8006e68:	08006f85 	.word	0x08006f85
 8006e6c:	08006f03 	.word	0x08006f03
 8006e70:	08006f85 	.word	0x08006f85
 8006e74:	08006f85 	.word	0x08006f85
 8006e78:	08006f85 	.word	0x08006f85
 8006e7c:	08006f43 	.word	0x08006f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fa04 	bl	8007294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0204 	bic.w	r2, r2, #4
 8006eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6999      	ldr	r1, [r3, #24]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	619a      	str	r2, [r3, #24]
      break;
 8006ebe:	e064      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fa4a 	bl	8007360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6999      	ldr	r1, [r3, #24]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	619a      	str	r2, [r3, #24]
      break;
 8006f00:	e043      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fa95 	bl	8007438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0208 	orr.w	r2, r2, #8
 8006f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0204 	bic.w	r2, r2, #4
 8006f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69d9      	ldr	r1, [r3, #28]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	61da      	str	r2, [r3, #28]
      break;
 8006f40:	e023      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fadf 	bl	800750c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69d9      	ldr	r1, [r3, #28]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	021a      	lsls	r2, r3, #8
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	61da      	str	r2, [r3, #28]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
      break;
 8006f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e0b4      	b.n	8007122 <HAL_TIM_ConfigClockSource+0x186>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff0:	d03e      	beq.n	8007070 <HAL_TIM_ConfigClockSource+0xd4>
 8006ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff6:	f200 8087 	bhi.w	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffe:	f000 8086 	beq.w	800710e <HAL_TIM_ConfigClockSource+0x172>
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007006:	d87f      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b70      	cmp	r3, #112	; 0x70
 800700a:	d01a      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0xa6>
 800700c:	2b70      	cmp	r3, #112	; 0x70
 800700e:	d87b      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b60      	cmp	r3, #96	; 0x60
 8007012:	d050      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x11a>
 8007014:	2b60      	cmp	r3, #96	; 0x60
 8007016:	d877      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007018:	2b50      	cmp	r3, #80	; 0x50
 800701a:	d03c      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0xfa>
 800701c:	2b50      	cmp	r3, #80	; 0x50
 800701e:	d873      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d058      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x13a>
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d86f      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b30      	cmp	r3, #48	; 0x30
 800702a:	d064      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 800702c:	2b30      	cmp	r3, #48	; 0x30
 800702e:	d86b      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	2b20      	cmp	r3, #32
 8007032:	d060      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007034:	2b20      	cmp	r3, #32
 8007036:	d867      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d05c      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 800703c:	2b10      	cmp	r3, #16
 800703e:	d05a      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007040:	e062      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007052:	f000 fb25 	bl	80076a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	609a      	str	r2, [r3, #8]
      break;
 800706e:	e04f      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007080:	f000 fb0e 	bl	80076a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007092:	609a      	str	r2, [r3, #8]
      break;
 8007094:	e03c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070a2:	461a      	mov	r2, r3
 80070a4:	f000 fa82 	bl	80075ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2150      	movs	r1, #80	; 0x50
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fadb 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 80070b4:	e02c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070c2:	461a      	mov	r2, r3
 80070c4:	f000 faa1 	bl	800760a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2160      	movs	r1, #96	; 0x60
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 facb 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 80070d4:	e01c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e2:	461a      	mov	r2, r3
 80070e4:	f000 fa62 	bl	80075ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2140      	movs	r1, #64	; 0x40
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fabb 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 80070f4:	e00c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f000 fab2 	bl	800766a <TIM_ITRx_SetConfig>
      break;
 8007106:	e003      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e000      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800710e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
	...

0800717c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a3a      	ldr	r2, [pc, #232]	; (8007278 <TIM_Base_SetConfig+0xfc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_Base_SetConfig+0x38>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d00b      	beq.n	80071b4 <TIM_Base_SetConfig+0x38>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a37      	ldr	r2, [pc, #220]	; (800727c <TIM_Base_SetConfig+0x100>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_Base_SetConfig+0x38>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a36      	ldr	r2, [pc, #216]	; (8007280 <TIM_Base_SetConfig+0x104>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0x38>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a35      	ldr	r2, [pc, #212]	; (8007284 <TIM_Base_SetConfig+0x108>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d108      	bne.n	80071c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2b      	ldr	r2, [pc, #172]	; (8007278 <TIM_Base_SetConfig+0xfc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01b      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d017      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a28      	ldr	r2, [pc, #160]	; (800727c <TIM_Base_SetConfig+0x100>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a27      	ldr	r2, [pc, #156]	; (8007280 <TIM_Base_SetConfig+0x104>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00f      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a26      	ldr	r2, [pc, #152]	; (8007284 <TIM_Base_SetConfig+0x108>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00b      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a25      	ldr	r2, [pc, #148]	; (8007288 <TIM_Base_SetConfig+0x10c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a24      	ldr	r2, [pc, #144]	; (800728c <TIM_Base_SetConfig+0x110>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_Base_SetConfig+0x8a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a23      	ldr	r2, [pc, #140]	; (8007290 <TIM_Base_SetConfig+0x114>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d108      	bne.n	8007218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a0e      	ldr	r2, [pc, #56]	; (8007278 <TIM_Base_SetConfig+0xfc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d103      	bne.n	800724c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b01      	cmp	r3, #1
 800725c:	d105      	bne.n	800726a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f023 0201 	bic.w	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	611a      	str	r2, [r3, #16]
  }
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40014000 	.word	0x40014000
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800

08007294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	f023 0201 	bic.w	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 0302 	bic.w	r3, r3, #2
 80072dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1c      	ldr	r2, [pc, #112]	; (800735c <TIM_OC1_SetConfig+0xc8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10c      	bne.n	800730a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0308 	bic.w	r3, r3, #8
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a13      	ldr	r2, [pc, #76]	; (800735c <TIM_OC1_SetConfig+0xc8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d111      	bne.n	8007336 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40010000 	.word	0x40010000

08007360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 0210 	bic.w	r2, r3, #16
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 0320 	bic.w	r3, r3, #32
 80073aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <TIM_OC2_SetConfig+0xd4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10d      	bne.n	80073dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a15      	ldr	r2, [pc, #84]	; (8007434 <TIM_OC2_SetConfig+0xd4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d113      	bne.n	800740c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40010000 	.word	0x40010000

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <TIM_OC3_SetConfig+0xd0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d10d      	bne.n	80074b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800749c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a14      	ldr	r2, [pc, #80]	; (8007508 <TIM_OC3_SetConfig+0xd0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d113      	bne.n	80074e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	621a      	str	r2, [r3, #32]
}
 80074fc:	bf00      	nop
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	40010000 	.word	0x40010000

0800750c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <TIM_OC4_SetConfig+0x9c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d109      	bne.n	8007580 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	019b      	lsls	r3, r3, #6
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000

080075ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f023 030a 	bic.w	r3, r3, #10
 80075e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	621a      	str	r2, [r3, #32]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800760a:	b480      	push	{r7}
 800760c:	b087      	sub	sp, #28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f023 0210 	bic.w	r2, r3, #16
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	031b      	lsls	r3, r3, #12
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007646:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	f043 0307 	orr.w	r3, r3, #7
 800768c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	021a      	lsls	r2, r3, #8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	609a      	str	r2, [r3, #8]
}
 80076d4:	bf00      	nop
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2201      	movs	r2, #1
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	43db      	mvns	r3, r3
 8007702:	401a      	ands	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007740:	2302      	movs	r3, #2
 8007742:	e050      	b.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007790:	d013      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a16      	ldr	r2, [pc, #88]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a15      	ldr	r2, [pc, #84]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a13      	ldr	r2, [pc, #76]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d10c      	bne.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40014000 	.word	0x40014000

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e042      	b.n	80078c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fd fa24 	bl	8004ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2224      	movs	r2, #36	; 0x24
 8007860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 ff4f 	bl	8008718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691a      	ldr	r2, [r3, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695a      	ldr	r2, [r3, #20]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d175      	bne.n	80079dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Transmit+0x2c>
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e06e      	b.n	80079de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2221      	movs	r2, #33	; 0x21
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790e:	f7fd fbad 	bl	800506c <HAL_GetTick>
 8007912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d108      	bne.n	800793c <HAL_UART_Transmit+0x6c>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e003      	b.n	8007944 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007944:	e02e      	b.n	80079a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2200      	movs	r2, #0
 800794e:	2180      	movs	r1, #128	; 0x80
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fc27 	bl	80081a4 <UART_WaitOnFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e03a      	b.n	80079de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800797c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	3302      	adds	r3, #2
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	e007      	b.n	8007996 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	3301      	adds	r3, #1
 8007994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1cb      	bne.n	8007946 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2200      	movs	r2, #0
 80079b6:	2140      	movs	r1, #64	; 0x40
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 fbf3 	bl	80081a4 <UART_WaitOnFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e006      	b.n	80079de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	e000      	b.n	80079de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079dc:	2302      	movs	r3, #2
  }
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d112      	bne.n	8007a26 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_UART_Receive_DMA+0x26>
 8007a06:	88fb      	ldrh	r3, [r7, #6]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e00b      	b.n	8007a28 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fc1b 	bl	8008258 <UART_Start_Receive_DMA>
 8007a22:	4603      	mov	r3, r0
 8007a24:	e000      	b.n	8007a28 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b0ba      	sub	sp, #232	; 0xe8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10f      	bne.n	8007a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <HAL_UART_IRQHandler+0x66>
 8007a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fd83 	bl	800859a <UART_Receive_IT>
      return;
 8007a94:	e25b      	b.n	8007f4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80de 	beq.w	8007c5c <HAL_UART_IRQHandler+0x22c>
 8007aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80d1 	beq.w	8007c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_UART_IRQHandler+0xae>
 8007ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	f043 0201 	orr.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_UART_IRQHandler+0xd2>
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	f043 0202 	orr.w	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_UART_IRQHandler+0xf6>
 8007b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	f043 0204 	orr.w	r2, r3, #4
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d011      	beq.n	8007b56 <HAL_UART_IRQHandler+0x126>
 8007b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4e:	f043 0208 	orr.w	r2, r3, #8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 81f2 	beq.w	8007f44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_UART_IRQHandler+0x14e>
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fd0e 	bl	800859a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2301      	moveq	r3, #1
 8007b8e:	2300      	movne	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <HAL_UART_IRQHandler+0x17a>
 8007ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d04f      	beq.n	8007c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fc16 	bl	80083dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d141      	bne.n	8007c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1d9      	bne.n	8007bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d013      	beq.n	8007c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c16:	4a7e      	ldr	r2, [pc, #504]	; (8007e10 <HAL_UART_IRQHandler+0x3e0>)
 8007c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fcdc 	bl	80055dc <HAL_DMA_Abort_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	e00e      	b.n	8007c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f99e 	bl	8007f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	e00a      	b.n	8007c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f99a 	bl	8007f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	e006      	b.n	8007c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f996 	bl	8007f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007c56:	e175      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	bf00      	nop
    return;
 8007c5a:	e173      	b.n	8007f44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	f040 814f 	bne.w	8007f04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8148 	beq.w	8007f04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8141 	beq.w	8007f04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c82:	2300      	movs	r3, #0
 8007c84:	60bb      	str	r3, [r7, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	f040 80b6 	bne.w	8007e14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 8145 	beq.w	8007f48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	f080 813e 	bcs.w	8007f48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cde:	f000 8088 	beq.w	8007df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1d9      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3314      	adds	r3, #20
 8007d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3314      	adds	r3, #20
 8007d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e1      	bne.n	8007d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3314      	adds	r3, #20
 8007d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e3      	bne.n	8007d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e3      	bne.n	8007db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fd fb85 	bl	80054fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f8c1 	bl	8007f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e0e:	e09b      	b.n	8007f48 <HAL_UART_IRQHandler+0x518>
 8007e10:	080084a3 	.word	0x080084a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 808e 	beq.w	8007f4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8089 	beq.w	8007f4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e3      	bne.n	8007e3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3314      	adds	r3, #20
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	623b      	str	r3, [r7, #32]
   return(result);
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3314      	adds	r3, #20
 8007e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e96:	633a      	str	r2, [r7, #48]	; 0x30
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e3      	bne.n	8007e72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0310 	bic.w	r3, r3, #16
 8007ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	330c      	adds	r3, #12
 8007ed8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007edc:	61fa      	str	r2, [r7, #28]
 8007ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	69b9      	ldr	r1, [r7, #24]
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e3      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f847 	bl	8007f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f02:	e023      	b.n	8007f4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <HAL_UART_IRQHandler+0x4f4>
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fad4 	bl	80084ca <UART_Transmit_IT>
    return;
 8007f22:	e014      	b.n	8007f4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00e      	beq.n	8007f4e <HAL_UART_IRQHandler+0x51e>
 8007f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d008      	beq.n	8007f4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fb14 	bl	800856a <UART_EndTransmit_IT>
    return;
 8007f42:	e004      	b.n	8007f4e <HAL_UART_IRQHandler+0x51e>
    return;
 8007f44:	bf00      	nop
 8007f46:	e002      	b.n	8007f4e <HAL_UART_IRQHandler+0x51e>
      return;
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <HAL_UART_IRQHandler+0x51e>
      return;
 8007f4c:	bf00      	nop
  }
}
 8007f4e:	37e8      	adds	r7, #232	; 0xe8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b09c      	sub	sp, #112	; 0x70
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d172      	bne.n	80080aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	330c      	adds	r3, #12
 8007fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fea:	65ba      	str	r2, [r7, #88]	; 0x58
 8007fec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e5      	bne.n	8007fca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	667b      	str	r3, [r7, #100]	; 0x64
 8008016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3314      	adds	r3, #20
 800801c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800801e:	647a      	str	r2, [r7, #68]	; 0x44
 8008020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3314      	adds	r3, #20
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	623b      	str	r3, [r7, #32]
   return(result);
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008048:	663b      	str	r3, [r7, #96]	; 0x60
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3314      	adds	r3, #20
 8008050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008052:	633a      	str	r2, [r7, #48]	; 0x30
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008068:	2220      	movs	r2, #32
 800806a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	2b01      	cmp	r3, #1
 8008074:	d119      	bne.n	80080aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	60fb      	str	r3, [r7, #12]
   return(result);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f023 0310 	bic.w	r3, r3, #16
 800808c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800808e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008096:	61fa      	str	r2, [r7, #28]
 8008098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	69b9      	ldr	r1, [r7, #24]
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	617b      	str	r3, [r7, #20]
   return(result);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ac:	2200      	movs	r2, #0
 80080ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d106      	bne.n	80080c6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080bc:	4619      	mov	r1, r3
 80080be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080c0:	f7ff ff66 	bl	8007f90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080c4:	e002      	b.n	80080cc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80080c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080c8:	f7fa fdd8 	bl	8002c7c <HAL_UART_RxCpltCallback>
}
 80080cc:	bf00      	nop
 80080ce:	3770      	adds	r7, #112	; 0x70
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d108      	bne.n	8008102 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080f4:	085b      	lsrs	r3, r3, #1
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4619      	mov	r1, r3
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff ff48 	bl	8007f90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008100:	e002      	b.n	8008108 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff ff30 	bl	8007f68 <HAL_UART_RxHalfCpltCallback>
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812c:	2b80      	cmp	r3, #128	; 0x80
 800812e:	bf0c      	ite	eq
 8008130:	2301      	moveq	r3, #1
 8008132:	2300      	movne	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b21      	cmp	r3, #33	; 0x21
 8008142:	d108      	bne.n	8008156 <UART_DMAError+0x46>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f000 f91b 	bl	800838c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008160:	2b40      	cmp	r3, #64	; 0x40
 8008162:	bf0c      	ite	eq
 8008164:	2301      	moveq	r3, #1
 8008166:	2300      	movne	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b22      	cmp	r3, #34	; 0x22
 8008176:	d108      	bne.n	800818a <UART_DMAError+0x7a>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008184:	68b8      	ldr	r0, [r7, #8]
 8008186:	f000 f929 	bl	80083dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	f043 0210 	orr.w	r2, r3, #16
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008196:	68b8      	ldr	r0, [r7, #8]
 8008198:	f7ff fef0 	bl	8007f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	4613      	mov	r3, r2
 80081b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b4:	e03b      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081bc:	d037      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081be:	f7fc ff55 	bl	800506c <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	6a3a      	ldr	r2, [r7, #32]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e03a      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d023      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0x8a>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b80      	cmp	r3, #128	; 0x80
 80081ea:	d020      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0x8a>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d01d      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d116      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 f8e0 	bl	80083dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2208      	movs	r2, #8
 8008220:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e00f      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4013      	ands	r3, r2
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	bf0c      	ite	eq
 800823e:	2301      	moveq	r3, #1
 8008240:	2300      	movne	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	429a      	cmp	r2, r3
 800824a:	d0b4      	beq.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b098      	sub	sp, #96	; 0x60
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	88fa      	ldrh	r2, [r7, #6]
 8008270:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2222      	movs	r2, #34	; 0x22
 800827c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008284:	4a3e      	ldr	r2, [pc, #248]	; (8008380 <UART_Start_Receive_DMA+0x128>)
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828c:	4a3d      	ldr	r2, [pc, #244]	; (8008384 <UART_Start_Receive_DMA+0x12c>)
 800828e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008294:	4a3c      	ldr	r2, [pc, #240]	; (8008388 <UART_Start_Receive_DMA+0x130>)
 8008296:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829c:	2200      	movs	r2, #0
 800829e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80082a0:	f107 0308 	add.w	r3, r7, #8
 80082a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4619      	mov	r1, r3
 80082b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	f7fd f8c8 	bl	800544c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d019      	beq.n	800830e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	330c      	adds	r3, #12
 80082e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	330c      	adds	r3, #12
 80082f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80082fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e5      	bne.n	80082da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3314      	adds	r3, #20
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	657b      	str	r3, [r7, #84]	; 0x54
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3314      	adds	r3, #20
 800832c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800832e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e5      	bne.n	800830e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	617b      	str	r3, [r7, #20]
   return(result);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008358:	653b      	str	r3, [r7, #80]	; 0x50
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008362:	627a      	str	r2, [r7, #36]	; 0x24
 8008364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6a39      	ldr	r1, [r7, #32]
 8008368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3760      	adds	r7, #96	; 0x60
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	08007fa9 	.word	0x08007fa9
 8008384:	080080d5 	.word	0x080080d5
 8008388:	08008111 	.word	0x08008111

0800838c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800838c:	b480      	push	{r7}
 800838e:	b089      	sub	sp, #36	; 0x24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	61ba      	str	r2, [r7, #24]
 80083b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6979      	ldr	r1, [r7, #20]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	613b      	str	r3, [r7, #16]
   return(result);
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e5      	bne.n	8008394 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80083d0:	bf00      	nop
 80083d2:	3724      	adds	r7, #36	; 0x24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083dc:	b480      	push	{r7}
 80083de:	b095      	sub	sp, #84	; 0x54
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008404:	643a      	str	r2, [r7, #64]	; 0x40
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800840a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e5      	bne.n	80083e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3314      	adds	r3, #20
 800841e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	61fb      	str	r3, [r7, #28]
   return(result);
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	f023 0301 	bic.w	r3, r3, #1
 800842e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3314      	adds	r3, #20
 8008436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008438:	62fa      	str	r2, [r7, #44]	; 0x2c
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800843e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e5      	bne.n	8008418 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	2b01      	cmp	r3, #1
 8008452:	d119      	bne.n	8008488 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	60bb      	str	r3, [r7, #8]
   return(result);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f023 0310 	bic.w	r3, r3, #16
 800846a:	647b      	str	r3, [r7, #68]	; 0x44
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008474:	61ba      	str	r2, [r7, #24]
 8008476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6979      	ldr	r1, [r7, #20]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	613b      	str	r3, [r7, #16]
   return(result);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008496:	bf00      	nop
 8008498:	3754      	adds	r7, #84	; 0x54
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff fd5d 	bl	8007f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b21      	cmp	r3, #33	; 0x21
 80084dc:	d13e      	bne.n	800855c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e6:	d114      	bne.n	8008512 <UART_Transmit_IT+0x48>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d110      	bne.n	8008512 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008504:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	1c9a      	adds	r2, r3, #2
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]
 8008510:	e008      	b.n	8008524 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	1c59      	adds	r1, r3, #1
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6211      	str	r1, [r2, #32]
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29b      	uxth	r3, r3
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4619      	mov	r1, r3
 8008532:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10f      	bne.n	8008558 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008546:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008556:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	e000      	b.n	800855e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800855c:	2302      	movs	r3, #2
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008580:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fce2 	bl	8007f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b08c      	sub	sp, #48	; 0x30
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b22      	cmp	r3, #34	; 0x22
 80085ac:	f040 80ae 	bne.w	800870c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b8:	d117      	bne.n	80085ea <UART_Receive_IT+0x50>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d113      	bne.n	80085ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d8:	b29a      	uxth	r2, r3
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e2:	1c9a      	adds	r2, r3, #2
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	629a      	str	r2, [r3, #40]	; 0x28
 80085e8:	e026      	b.n	8008638 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fc:	d007      	beq.n	800860e <UART_Receive_IT+0x74>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <UART_Receive_IT+0x82>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	b2da      	uxtb	r2, r3
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e008      	b.n	800862e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008628:	b2da      	uxtb	r2, r3
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	b29b      	uxth	r3, r3
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4619      	mov	r1, r3
 8008646:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008648:	2b00      	cmp	r3, #0
 800864a:	d15d      	bne.n	8008708 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0220 	bic.w	r2, r2, #32
 800865a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800866a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695a      	ldr	r2, [r3, #20]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	2b01      	cmp	r3, #1
 8008690:	d135      	bne.n	80086fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	613b      	str	r3, [r7, #16]
   return(result);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f023 0310 	bic.w	r3, r3, #16
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b8:	623a      	str	r2, [r7, #32]
 80086ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	69f9      	ldr	r1, [r7, #28]
 80086be:	6a3a      	ldr	r2, [r7, #32]
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d10a      	bne.n	80086f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fc4a 	bl	8007f90 <HAL_UARTEx_RxEventCallback>
 80086fc:	e002      	b.n	8008704 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fa fabc 	bl	8002c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	e002      	b.n	800870e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e000      	b.n	800870e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800870c:	2302      	movs	r3, #2
  }
}
 800870e:	4618      	mov	r0, r3
 8008710:	3730      	adds	r7, #48	; 0x30
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800871c:	b0c0      	sub	sp, #256	; 0x100
 800871e:	af00      	add	r7, sp, #0
 8008720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008734:	68d9      	ldr	r1, [r3, #12]
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	ea40 0301 	orr.w	r3, r0, r1
 8008740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	431a      	orrs	r2, r3
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	431a      	orrs	r2, r3
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008770:	f021 010c 	bic.w	r1, r1, #12
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800877e:	430b      	orrs	r3, r1
 8008780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	6999      	ldr	r1, [r3, #24]
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	ea40 0301 	orr.w	r3, r0, r1
 800879e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b8f      	ldr	r3, [pc, #572]	; (80089e4 <UART_SetConfig+0x2cc>)
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d005      	beq.n	80087b8 <UART_SetConfig+0xa0>
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4b8d      	ldr	r3, [pc, #564]	; (80089e8 <UART_SetConfig+0x2d0>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d104      	bne.n	80087c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087b8:	f7fd ff7e 	bl	80066b8 <HAL_RCC_GetPCLK2Freq>
 80087bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80087c0:	e003      	b.n	80087ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c2:	f7fd ff65 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
 80087c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d4:	f040 810c 	bne.w	80089f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087ea:	4622      	mov	r2, r4
 80087ec:	462b      	mov	r3, r5
 80087ee:	1891      	adds	r1, r2, r2
 80087f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80087f2:	415b      	adcs	r3, r3
 80087f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087fa:	4621      	mov	r1, r4
 80087fc:	eb12 0801 	adds.w	r8, r2, r1
 8008800:	4629      	mov	r1, r5
 8008802:	eb43 0901 	adc.w	r9, r3, r1
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800881a:	4690      	mov	r8, r2
 800881c:	4699      	mov	r9, r3
 800881e:	4623      	mov	r3, r4
 8008820:	eb18 0303 	adds.w	r3, r8, r3
 8008824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008828:	462b      	mov	r3, r5
 800882a:	eb49 0303 	adc.w	r3, r9, r3
 800882e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800883e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008846:	460b      	mov	r3, r1
 8008848:	18db      	adds	r3, r3, r3
 800884a:	653b      	str	r3, [r7, #80]	; 0x50
 800884c:	4613      	mov	r3, r2
 800884e:	eb42 0303 	adc.w	r3, r2, r3
 8008852:	657b      	str	r3, [r7, #84]	; 0x54
 8008854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800885c:	f7f8 f9aa 	bl	8000bb4 <__aeabi_uldivmod>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4b61      	ldr	r3, [pc, #388]	; (80089ec <UART_SetConfig+0x2d4>)
 8008866:	fba3 2302 	umull	r2, r3, r3, r2
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	011c      	lsls	r4, r3, #4
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008872:	2200      	movs	r2, #0
 8008874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800887c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	1891      	adds	r1, r2, r2
 8008886:	64b9      	str	r1, [r7, #72]	; 0x48
 8008888:	415b      	adcs	r3, r3
 800888a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800888c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008890:	4641      	mov	r1, r8
 8008892:	eb12 0a01 	adds.w	sl, r2, r1
 8008896:	4649      	mov	r1, r9
 8008898:	eb43 0b01 	adc.w	fp, r3, r1
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088b0:	4692      	mov	sl, r2
 80088b2:	469b      	mov	fp, r3
 80088b4:	4643      	mov	r3, r8
 80088b6:	eb1a 0303 	adds.w	r3, sl, r3
 80088ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088be:	464b      	mov	r3, r9
 80088c0:	eb4b 0303 	adc.w	r3, fp, r3
 80088c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088dc:	460b      	mov	r3, r1
 80088de:	18db      	adds	r3, r3, r3
 80088e0:	643b      	str	r3, [r7, #64]	; 0x40
 80088e2:	4613      	mov	r3, r2
 80088e4:	eb42 0303 	adc.w	r3, r2, r3
 80088e8:	647b      	str	r3, [r7, #68]	; 0x44
 80088ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088f2:	f7f8 f95f 	bl	8000bb4 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4611      	mov	r1, r2
 80088fc:	4b3b      	ldr	r3, [pc, #236]	; (80089ec <UART_SetConfig+0x2d4>)
 80088fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	2264      	movs	r2, #100	; 0x64
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	1acb      	subs	r3, r1, r3
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008912:	4b36      	ldr	r3, [pc, #216]	; (80089ec <UART_SetConfig+0x2d4>)
 8008914:	fba3 2302 	umull	r2, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008920:	441c      	add	r4, r3
 8008922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800892c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	1891      	adds	r1, r2, r2
 800893a:	63b9      	str	r1, [r7, #56]	; 0x38
 800893c:	415b      	adcs	r3, r3
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008944:	4641      	mov	r1, r8
 8008946:	1851      	adds	r1, r2, r1
 8008948:	6339      	str	r1, [r7, #48]	; 0x30
 800894a:	4649      	mov	r1, r9
 800894c:	414b      	adcs	r3, r1
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800895c:	4659      	mov	r1, fp
 800895e:	00cb      	lsls	r3, r1, #3
 8008960:	4651      	mov	r1, sl
 8008962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008966:	4651      	mov	r1, sl
 8008968:	00ca      	lsls	r2, r1, #3
 800896a:	4610      	mov	r0, r2
 800896c:	4619      	mov	r1, r3
 800896e:	4603      	mov	r3, r0
 8008970:	4642      	mov	r2, r8
 8008972:	189b      	adds	r3, r3, r2
 8008974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008978:	464b      	mov	r3, r9
 800897a:	460a      	mov	r2, r1
 800897c:	eb42 0303 	adc.w	r3, r2, r3
 8008980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008998:	460b      	mov	r3, r1
 800899a:	18db      	adds	r3, r3, r3
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
 800899e:	4613      	mov	r3, r2
 80089a0:	eb42 0303 	adc.w	r3, r2, r3
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80089ae:	f7f8 f901 	bl	8000bb4 <__aeabi_uldivmod>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <UART_SetConfig+0x2d4>)
 80089b8:	fba3 1302 	umull	r1, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	2164      	movs	r1, #100	; 0x64
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	3332      	adds	r3, #50	; 0x32
 80089ca:	4a08      	ldr	r2, [pc, #32]	; (80089ec <UART_SetConfig+0x2d4>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 0207 	and.w	r2, r3, #7
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4422      	add	r2, r4
 80089de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089e0:	e106      	b.n	8008bf0 <UART_SetConfig+0x4d8>
 80089e2:	bf00      	nop
 80089e4:	40011000 	.word	0x40011000
 80089e8:	40011400 	.word	0x40011400
 80089ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	1891      	adds	r1, r2, r2
 8008a08:	6239      	str	r1, [r7, #32]
 8008a0a:	415b      	adcs	r3, r3
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a12:	4641      	mov	r1, r8
 8008a14:	1854      	adds	r4, r2, r1
 8008a16:	4649      	mov	r1, r9
 8008a18:	eb43 0501 	adc.w	r5, r3, r1
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	00eb      	lsls	r3, r5, #3
 8008a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a2a:	00e2      	lsls	r2, r4, #3
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	461d      	mov	r5, r3
 8008a30:	4643      	mov	r3, r8
 8008a32:	18e3      	adds	r3, r4, r3
 8008a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a38:	464b      	mov	r3, r9
 8008a3a:	eb45 0303 	adc.w	r3, r5, r3
 8008a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a5e:	4629      	mov	r1, r5
 8008a60:	008b      	lsls	r3, r1, #2
 8008a62:	4621      	mov	r1, r4
 8008a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a68:	4621      	mov	r1, r4
 8008a6a:	008a      	lsls	r2, r1, #2
 8008a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a70:	f7f8 f8a0 	bl	8000bb4 <__aeabi_uldivmod>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4b60      	ldr	r3, [pc, #384]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	011c      	lsls	r4, r3, #4
 8008a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a94:	4642      	mov	r2, r8
 8008a96:	464b      	mov	r3, r9
 8008a98:	1891      	adds	r1, r2, r2
 8008a9a:	61b9      	str	r1, [r7, #24]
 8008a9c:	415b      	adcs	r3, r3
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	1851      	adds	r1, r2, r1
 8008aa8:	6139      	str	r1, [r7, #16]
 8008aaa:	4649      	mov	r1, r9
 8008aac:	414b      	adcs	r3, r1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008abc:	4659      	mov	r1, fp
 8008abe:	00cb      	lsls	r3, r1, #3
 8008ac0:	4651      	mov	r1, sl
 8008ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ac6:	4651      	mov	r1, sl
 8008ac8:	00ca      	lsls	r2, r1, #3
 8008aca:	4610      	mov	r0, r2
 8008acc:	4619      	mov	r1, r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ad8:	464b      	mov	r3, r9
 8008ada:	460a      	mov	r2, r1
 8008adc:	eb42 0303 	adc.w	r3, r2, r3
 8008ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008afc:	4649      	mov	r1, r9
 8008afe:	008b      	lsls	r3, r1, #2
 8008b00:	4641      	mov	r1, r8
 8008b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b06:	4641      	mov	r1, r8
 8008b08:	008a      	lsls	r2, r1, #2
 8008b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b0e:	f7f8 f851 	bl	8000bb4 <__aeabi_uldivmod>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	4b38      	ldr	r3, [pc, #224]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	2264      	movs	r2, #100	; 0x64
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	1acb      	subs	r3, r1, r3
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	3332      	adds	r3, #50	; 0x32
 8008b2c:	4a33      	ldr	r2, [pc, #204]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b38:	441c      	add	r4, r3
 8008b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3e:	2200      	movs	r2, #0
 8008b40:	673b      	str	r3, [r7, #112]	; 0x70
 8008b42:	677a      	str	r2, [r7, #116]	; 0x74
 8008b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b48:	4642      	mov	r2, r8
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	1891      	adds	r1, r2, r2
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	415b      	adcs	r3, r3
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b58:	4641      	mov	r1, r8
 8008b5a:	1851      	adds	r1, r2, r1
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	4649      	mov	r1, r9
 8008b60:	414b      	adcs	r3, r1
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b70:	4659      	mov	r1, fp
 8008b72:	00cb      	lsls	r3, r1, #3
 8008b74:	4651      	mov	r1, sl
 8008b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b7a:	4651      	mov	r1, sl
 8008b7c:	00ca      	lsls	r2, r1, #3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4619      	mov	r1, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	4642      	mov	r2, r8
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b8a:	464b      	mov	r3, r9
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	eb42 0303 	adc.w	r3, r2, r3
 8008b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b9e:	667a      	str	r2, [r7, #100]	; 0x64
 8008ba0:	f04f 0200 	mov.w	r2, #0
 8008ba4:	f04f 0300 	mov.w	r3, #0
 8008ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008bac:	4649      	mov	r1, r9
 8008bae:	008b      	lsls	r3, r1, #2
 8008bb0:	4641      	mov	r1, r8
 8008bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	008a      	lsls	r2, r1, #2
 8008bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008bbe:	f7f7 fff9 	bl	8000bb4 <__aeabi_uldivmod>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	2164      	movs	r1, #100	; 0x64
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	3332      	adds	r3, #50	; 0x32
 8008bda:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008be0:	095b      	lsrs	r3, r3, #5
 8008be2:	f003 020f 	and.w	r2, r3, #15
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4422      	add	r2, r4
 8008bee:	609a      	str	r2, [r3, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bfc:	51eb851f 	.word	0x51eb851f

08008c00 <memset>:
 8008c00:	4402      	add	r2, r0
 8008c02:	4603      	mov	r3, r0
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d100      	bne.n	8008c0a <memset+0xa>
 8008c08:	4770      	bx	lr
 8008c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0e:	e7f9      	b.n	8008c04 <memset+0x4>

08008c10 <__libc_init_array>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4d0d      	ldr	r5, [pc, #52]	; (8008c48 <__libc_init_array+0x38>)
 8008c14:	4c0d      	ldr	r4, [pc, #52]	; (8008c4c <__libc_init_array+0x3c>)
 8008c16:	1b64      	subs	r4, r4, r5
 8008c18:	10a4      	asrs	r4, r4, #2
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	42a6      	cmp	r6, r4
 8008c1e:	d109      	bne.n	8008c34 <__libc_init_array+0x24>
 8008c20:	4d0b      	ldr	r5, [pc, #44]	; (8008c50 <__libc_init_array+0x40>)
 8008c22:	4c0c      	ldr	r4, [pc, #48]	; (8008c54 <__libc_init_array+0x44>)
 8008c24:	f001 fb1c 	bl	800a260 <_init>
 8008c28:	1b64      	subs	r4, r4, r5
 8008c2a:	10a4      	asrs	r4, r4, #2
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	42a6      	cmp	r6, r4
 8008c30:	d105      	bne.n	8008c3e <__libc_init_array+0x2e>
 8008c32:	bd70      	pop	{r4, r5, r6, pc}
 8008c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c38:	4798      	blx	r3
 8008c3a:	3601      	adds	r6, #1
 8008c3c:	e7ee      	b.n	8008c1c <__libc_init_array+0xc>
 8008c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c42:	4798      	blx	r3
 8008c44:	3601      	adds	r6, #1
 8008c46:	e7f2      	b.n	8008c2e <__libc_init_array+0x1e>
 8008c48:	0800a4e8 	.word	0x0800a4e8
 8008c4c:	0800a4e8 	.word	0x0800a4e8
 8008c50:	0800a4e8 	.word	0x0800a4e8
 8008c54:	0800a4ec 	.word	0x0800a4ec

08008c58 <atan2>:
 8008c58:	f000 ba36 	b.w	80090c8 <__ieee754_atan2>
 8008c5c:	0000      	movs	r0, r0
	...

08008c60 <cos>:
 8008c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c62:	ec53 2b10 	vmov	r2, r3, d0
 8008c66:	4826      	ldr	r0, [pc, #152]	; (8008d00 <cos+0xa0>)
 8008c68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008c6c:	4281      	cmp	r1, r0
 8008c6e:	dc06      	bgt.n	8008c7e <cos+0x1e>
 8008c70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008cf8 <cos+0x98>
 8008c74:	b005      	add	sp, #20
 8008c76:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c7a:	f000 b89d 	b.w	8008db8 <__kernel_cos>
 8008c7e:	4821      	ldr	r0, [pc, #132]	; (8008d04 <cos+0xa4>)
 8008c80:	4281      	cmp	r1, r0
 8008c82:	dd09      	ble.n	8008c98 <cos+0x38>
 8008c84:	ee10 0a10 	vmov	r0, s0
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f7f7 faa9 	bl	80001e0 <__aeabi_dsub>
 8008c8e:	ec41 0b10 	vmov	d0, r0, r1
 8008c92:	b005      	add	sp, #20
 8008c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c98:	4668      	mov	r0, sp
 8008c9a:	f000 fadd 	bl	8009258 <__ieee754_rem_pio2>
 8008c9e:	f000 0003 	and.w	r0, r0, #3
 8008ca2:	2801      	cmp	r0, #1
 8008ca4:	d00b      	beq.n	8008cbe <cos+0x5e>
 8008ca6:	2802      	cmp	r0, #2
 8008ca8:	d016      	beq.n	8008cd8 <cos+0x78>
 8008caa:	b9e0      	cbnz	r0, 8008ce6 <cos+0x86>
 8008cac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cb0:	ed9d 0b00 	vldr	d0, [sp]
 8008cb4:	f000 f880 	bl	8008db8 <__kernel_cos>
 8008cb8:	ec51 0b10 	vmov	r0, r1, d0
 8008cbc:	e7e7      	b.n	8008c8e <cos+0x2e>
 8008cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cc2:	ed9d 0b00 	vldr	d0, [sp]
 8008cc6:	f000 f93f 	bl	8008f48 <__kernel_sin>
 8008cca:	ec53 2b10 	vmov	r2, r3, d0
 8008cce:	ee10 0a10 	vmov	r0, s0
 8008cd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008cd6:	e7da      	b.n	8008c8e <cos+0x2e>
 8008cd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cdc:	ed9d 0b00 	vldr	d0, [sp]
 8008ce0:	f000 f86a 	bl	8008db8 <__kernel_cos>
 8008ce4:	e7f1      	b.n	8008cca <cos+0x6a>
 8008ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cea:	ed9d 0b00 	vldr	d0, [sp]
 8008cee:	2001      	movs	r0, #1
 8008cf0:	f000 f92a 	bl	8008f48 <__kernel_sin>
 8008cf4:	e7e0      	b.n	8008cb8 <cos+0x58>
 8008cf6:	bf00      	nop
	...
 8008d00:	3fe921fb 	.word	0x3fe921fb
 8008d04:	7fefffff 	.word	0x7fefffff

08008d08 <sin>:
 8008d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d0a:	ec53 2b10 	vmov	r2, r3, d0
 8008d0e:	4828      	ldr	r0, [pc, #160]	; (8008db0 <sin+0xa8>)
 8008d10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d14:	4281      	cmp	r1, r0
 8008d16:	dc07      	bgt.n	8008d28 <sin+0x20>
 8008d18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008da8 <sin+0xa0>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	b005      	add	sp, #20
 8008d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d24:	f000 b910 	b.w	8008f48 <__kernel_sin>
 8008d28:	4822      	ldr	r0, [pc, #136]	; (8008db4 <sin+0xac>)
 8008d2a:	4281      	cmp	r1, r0
 8008d2c:	dd09      	ble.n	8008d42 <sin+0x3a>
 8008d2e:	ee10 0a10 	vmov	r0, s0
 8008d32:	4619      	mov	r1, r3
 8008d34:	f7f7 fa54 	bl	80001e0 <__aeabi_dsub>
 8008d38:	ec41 0b10 	vmov	d0, r0, r1
 8008d3c:	b005      	add	sp, #20
 8008d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d42:	4668      	mov	r0, sp
 8008d44:	f000 fa88 	bl	8009258 <__ieee754_rem_pio2>
 8008d48:	f000 0003 	and.w	r0, r0, #3
 8008d4c:	2801      	cmp	r0, #1
 8008d4e:	d00c      	beq.n	8008d6a <sin+0x62>
 8008d50:	2802      	cmp	r0, #2
 8008d52:	d011      	beq.n	8008d78 <sin+0x70>
 8008d54:	b9f0      	cbnz	r0, 8008d94 <sin+0x8c>
 8008d56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d5a:	ed9d 0b00 	vldr	d0, [sp]
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f000 f8f2 	bl	8008f48 <__kernel_sin>
 8008d64:	ec51 0b10 	vmov	r0, r1, d0
 8008d68:	e7e6      	b.n	8008d38 <sin+0x30>
 8008d6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d6e:	ed9d 0b00 	vldr	d0, [sp]
 8008d72:	f000 f821 	bl	8008db8 <__kernel_cos>
 8008d76:	e7f5      	b.n	8008d64 <sin+0x5c>
 8008d78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d7c:	ed9d 0b00 	vldr	d0, [sp]
 8008d80:	2001      	movs	r0, #1
 8008d82:	f000 f8e1 	bl	8008f48 <__kernel_sin>
 8008d86:	ec53 2b10 	vmov	r2, r3, d0
 8008d8a:	ee10 0a10 	vmov	r0, s0
 8008d8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008d92:	e7d1      	b.n	8008d38 <sin+0x30>
 8008d94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d98:	ed9d 0b00 	vldr	d0, [sp]
 8008d9c:	f000 f80c 	bl	8008db8 <__kernel_cos>
 8008da0:	e7f1      	b.n	8008d86 <sin+0x7e>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
	...
 8008db0:	3fe921fb 	.word	0x3fe921fb
 8008db4:	7fefffff 	.word	0x7fefffff

08008db8 <__kernel_cos>:
 8008db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	ec57 6b10 	vmov	r6, r7, d0
 8008dc0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008dc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008dc8:	ed8d 1b00 	vstr	d1, [sp]
 8008dcc:	da07      	bge.n	8008dde <__kernel_cos+0x26>
 8008dce:	ee10 0a10 	vmov	r0, s0
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fe56 	bl	8000a84 <__aeabi_d2iz>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f000 8088 	beq.w	8008eee <__kernel_cos+0x136>
 8008dde:	4632      	mov	r2, r6
 8008de0:	463b      	mov	r3, r7
 8008de2:	4630      	mov	r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	f7f7 fbb3 	bl	8000550 <__aeabi_dmul>
 8008dea:	4b51      	ldr	r3, [pc, #324]	; (8008f30 <__kernel_cos+0x178>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
 8008df2:	f7f7 fbad 	bl	8000550 <__aeabi_dmul>
 8008df6:	a340      	add	r3, pc, #256	; (adr r3, 8008ef8 <__kernel_cos+0x140>)
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	468b      	mov	fp, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7f7 fba4 	bl	8000550 <__aeabi_dmul>
 8008e08:	a33d      	add	r3, pc, #244	; (adr r3, 8008f00 <__kernel_cos+0x148>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 f9e9 	bl	80001e4 <__adddf3>
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	f7f7 fb9b 	bl	8000550 <__aeabi_dmul>
 8008e1a:	a33b      	add	r3, pc, #236	; (adr r3, 8008f08 <__kernel_cos+0x150>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 f9de 	bl	80001e0 <__aeabi_dsub>
 8008e24:	4622      	mov	r2, r4
 8008e26:	462b      	mov	r3, r5
 8008e28:	f7f7 fb92 	bl	8000550 <__aeabi_dmul>
 8008e2c:	a338      	add	r3, pc, #224	; (adr r3, 8008f10 <__kernel_cos+0x158>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 f9d7 	bl	80001e4 <__adddf3>
 8008e36:	4622      	mov	r2, r4
 8008e38:	462b      	mov	r3, r5
 8008e3a:	f7f7 fb89 	bl	8000550 <__aeabi_dmul>
 8008e3e:	a336      	add	r3, pc, #216	; (adr r3, 8008f18 <__kernel_cos+0x160>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 f9cc 	bl	80001e0 <__aeabi_dsub>
 8008e48:	4622      	mov	r2, r4
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	f7f7 fb80 	bl	8000550 <__aeabi_dmul>
 8008e50:	a333      	add	r3, pc, #204	; (adr r3, 8008f20 <__kernel_cos+0x168>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 f9c5 	bl	80001e4 <__adddf3>
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	f7f7 fb77 	bl	8000550 <__aeabi_dmul>
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	f7f7 fb73 	bl	8000550 <__aeabi_dmul>
 8008e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460d      	mov	r5, r1
 8008e72:	4630      	mov	r0, r6
 8008e74:	4639      	mov	r1, r7
 8008e76:	f7f7 fb6b 	bl	8000550 <__aeabi_dmul>
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7f7 f9ad 	bl	80001e0 <__aeabi_dsub>
 8008e86:	4b2b      	ldr	r3, [pc, #172]	; (8008f34 <__kernel_cos+0x17c>)
 8008e88:	4598      	cmp	r8, r3
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	dc10      	bgt.n	8008eb2 <__kernel_cos+0xfa>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4650      	mov	r0, sl
 8008e96:	4659      	mov	r1, fp
 8008e98:	f7f7 f9a2 	bl	80001e0 <__aeabi_dsub>
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4926      	ldr	r1, [pc, #152]	; (8008f38 <__kernel_cos+0x180>)
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f7f7 f99c 	bl	80001e0 <__aeabi_dsub>
 8008ea8:	ec41 0b10 	vmov	d0, r0, r1
 8008eac:	b003      	add	sp, #12
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	4b22      	ldr	r3, [pc, #136]	; (8008f3c <__kernel_cos+0x184>)
 8008eb4:	4920      	ldr	r1, [pc, #128]	; (8008f38 <__kernel_cos+0x180>)
 8008eb6:	4598      	cmp	r8, r3
 8008eb8:	bfcc      	ite	gt
 8008eba:	4d21      	ldrgt	r5, [pc, #132]	; (8008f40 <__kernel_cos+0x188>)
 8008ebc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	f7f7 f98a 	bl	80001e0 <__aeabi_dsub>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	4650      	mov	r0, sl
 8008ed6:	4659      	mov	r1, fp
 8008ed8:	f7f7 f982 	bl	80001e0 <__aeabi_dsub>
 8008edc:	4632      	mov	r2, r6
 8008ede:	463b      	mov	r3, r7
 8008ee0:	f7f7 f97e 	bl	80001e0 <__aeabi_dsub>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4640      	mov	r0, r8
 8008eea:	4649      	mov	r1, r9
 8008eec:	e7da      	b.n	8008ea4 <__kernel_cos+0xec>
 8008eee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008f28 <__kernel_cos+0x170>
 8008ef2:	e7db      	b.n	8008eac <__kernel_cos+0xf4>
 8008ef4:	f3af 8000 	nop.w
 8008ef8:	be8838d4 	.word	0xbe8838d4
 8008efc:	bda8fae9 	.word	0xbda8fae9
 8008f00:	bdb4b1c4 	.word	0xbdb4b1c4
 8008f04:	3e21ee9e 	.word	0x3e21ee9e
 8008f08:	809c52ad 	.word	0x809c52ad
 8008f0c:	3e927e4f 	.word	0x3e927e4f
 8008f10:	19cb1590 	.word	0x19cb1590
 8008f14:	3efa01a0 	.word	0x3efa01a0
 8008f18:	16c15177 	.word	0x16c15177
 8008f1c:	3f56c16c 	.word	0x3f56c16c
 8008f20:	5555554c 	.word	0x5555554c
 8008f24:	3fa55555 	.word	0x3fa55555
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	3ff00000 	.word	0x3ff00000
 8008f30:	3fe00000 	.word	0x3fe00000
 8008f34:	3fd33332 	.word	0x3fd33332
 8008f38:	3ff00000 	.word	0x3ff00000
 8008f3c:	3fe90000 	.word	0x3fe90000
 8008f40:	3fd20000 	.word	0x3fd20000
 8008f44:	00000000 	.word	0x00000000

08008f48 <__kernel_sin>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	ed2d 8b04 	vpush	{d8-d9}
 8008f50:	eeb0 8a41 	vmov.f32	s16, s2
 8008f54:	eef0 8a61 	vmov.f32	s17, s3
 8008f58:	ec55 4b10 	vmov	r4, r5, d0
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008f66:	9001      	str	r0, [sp, #4]
 8008f68:	da06      	bge.n	8008f78 <__kernel_sin+0x30>
 8008f6a:	ee10 0a10 	vmov	r0, s0
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 fd88 	bl	8000a84 <__aeabi_d2iz>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d051      	beq.n	800901c <__kernel_sin+0xd4>
 8008f78:	4622      	mov	r2, r4
 8008f7a:	462b      	mov	r3, r5
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7f7 fae6 	bl	8000550 <__aeabi_dmul>
 8008f84:	4682      	mov	sl, r0
 8008f86:	468b      	mov	fp, r1
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7f7 fade 	bl	8000550 <__aeabi_dmul>
 8008f94:	a341      	add	r3, pc, #260	; (adr r3, 800909c <__kernel_sin+0x154>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4689      	mov	r9, r1
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	f7f7 fad5 	bl	8000550 <__aeabi_dmul>
 8008fa6:	a33f      	add	r3, pc, #252	; (adr r3, 80090a4 <__kernel_sin+0x15c>)
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f7f7 f918 	bl	80001e0 <__aeabi_dsub>
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	465b      	mov	r3, fp
 8008fb4:	f7f7 facc 	bl	8000550 <__aeabi_dmul>
 8008fb8:	a33c      	add	r3, pc, #240	; (adr r3, 80090ac <__kernel_sin+0x164>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f7f7 f911 	bl	80001e4 <__adddf3>
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	f7f7 fac3 	bl	8000550 <__aeabi_dmul>
 8008fca:	a33a      	add	r3, pc, #232	; (adr r3, 80090b4 <__kernel_sin+0x16c>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f7f7 f906 	bl	80001e0 <__aeabi_dsub>
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	f7f7 faba 	bl	8000550 <__aeabi_dmul>
 8008fdc:	a337      	add	r3, pc, #220	; (adr r3, 80090bc <__kernel_sin+0x174>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f7f7 f8ff 	bl	80001e4 <__adddf3>
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	4606      	mov	r6, r0
 8008fea:	460f      	mov	r7, r1
 8008fec:	b9eb      	cbnz	r3, 800902a <__kernel_sin+0xe2>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	f7f7 faab 	bl	8000550 <__aeabi_dmul>
 8008ffa:	a325      	add	r3, pc, #148	; (adr r3, 8009090 <__kernel_sin+0x148>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 f8ee 	bl	80001e0 <__aeabi_dsub>
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	f7f7 faa2 	bl	8000550 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4620      	mov	r0, r4
 8009012:	4629      	mov	r1, r5
 8009014:	f7f7 f8e6 	bl	80001e4 <__adddf3>
 8009018:	4604      	mov	r4, r0
 800901a:	460d      	mov	r5, r1
 800901c:	ec45 4b10 	vmov	d0, r4, r5
 8009020:	b003      	add	sp, #12
 8009022:	ecbd 8b04 	vpop	{d8-d9}
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <__kernel_sin+0x150>)
 800902c:	ec51 0b18 	vmov	r0, r1, d8
 8009030:	2200      	movs	r2, #0
 8009032:	f7f7 fa8d 	bl	8000550 <__aeabi_dmul>
 8009036:	4632      	mov	r2, r6
 8009038:	ec41 0b19 	vmov	d9, r0, r1
 800903c:	463b      	mov	r3, r7
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 fa85 	bl	8000550 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	ec51 0b19 	vmov	r0, r1, d9
 800904e:	f7f7 f8c7 	bl	80001e0 <__aeabi_dsub>
 8009052:	4652      	mov	r2, sl
 8009054:	465b      	mov	r3, fp
 8009056:	f7f7 fa7b 	bl	8000550 <__aeabi_dmul>
 800905a:	ec53 2b18 	vmov	r2, r3, d8
 800905e:	f7f7 f8bf 	bl	80001e0 <__aeabi_dsub>
 8009062:	a30b      	add	r3, pc, #44	; (adr r3, 8009090 <__kernel_sin+0x148>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	4606      	mov	r6, r0
 800906a:	460f      	mov	r7, r1
 800906c:	4640      	mov	r0, r8
 800906e:	4649      	mov	r1, r9
 8009070:	f7f7 fa6e 	bl	8000550 <__aeabi_dmul>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4630      	mov	r0, r6
 800907a:	4639      	mov	r1, r7
 800907c:	f7f7 f8b2 	bl	80001e4 <__adddf3>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 f8aa 	bl	80001e0 <__aeabi_dsub>
 800908c:	e7c4      	b.n	8009018 <__kernel_sin+0xd0>
 800908e:	bf00      	nop
 8009090:	55555549 	.word	0x55555549
 8009094:	3fc55555 	.word	0x3fc55555
 8009098:	3fe00000 	.word	0x3fe00000
 800909c:	5acfd57c 	.word	0x5acfd57c
 80090a0:	3de5d93a 	.word	0x3de5d93a
 80090a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80090a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80090ac:	57b1fe7d 	.word	0x57b1fe7d
 80090b0:	3ec71de3 	.word	0x3ec71de3
 80090b4:	19c161d5 	.word	0x19c161d5
 80090b8:	3f2a01a0 	.word	0x3f2a01a0
 80090bc:	1110f8a6 	.word	0x1110f8a6
 80090c0:	3f811111 	.word	0x3f811111
 80090c4:	00000000 	.word	0x00000000

080090c8 <__ieee754_atan2>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	ec57 6b11 	vmov	r6, r7, d1
 80090d0:	4273      	negs	r3, r6
 80090d2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009250 <__ieee754_atan2+0x188>
 80090d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80090da:	4333      	orrs	r3, r6
 80090dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80090e0:	4543      	cmp	r3, r8
 80090e2:	ec51 0b10 	vmov	r0, r1, d0
 80090e6:	ee11 5a10 	vmov	r5, s2
 80090ea:	d80a      	bhi.n	8009102 <__ieee754_atan2+0x3a>
 80090ec:	4244      	negs	r4, r0
 80090ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090f2:	4304      	orrs	r4, r0
 80090f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80090f8:	4544      	cmp	r4, r8
 80090fa:	ee10 9a10 	vmov	r9, s0
 80090fe:	468e      	mov	lr, r1
 8009100:	d907      	bls.n	8009112 <__ieee754_atan2+0x4a>
 8009102:	4632      	mov	r2, r6
 8009104:	463b      	mov	r3, r7
 8009106:	f7f7 f86d 	bl	80001e4 <__adddf3>
 800910a:	ec41 0b10 	vmov	d0, r0, r1
 800910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009112:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009116:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800911a:	4334      	orrs	r4, r6
 800911c:	d103      	bne.n	8009126 <__ieee754_atan2+0x5e>
 800911e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009122:	f000 baa1 	b.w	8009668 <atan>
 8009126:	17bc      	asrs	r4, r7, #30
 8009128:	f004 0402 	and.w	r4, r4, #2
 800912c:	ea53 0909 	orrs.w	r9, r3, r9
 8009130:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009134:	d107      	bne.n	8009146 <__ieee754_atan2+0x7e>
 8009136:	2c02      	cmp	r4, #2
 8009138:	d05f      	beq.n	80091fa <__ieee754_atan2+0x132>
 800913a:	2c03      	cmp	r4, #3
 800913c:	d1e5      	bne.n	800910a <__ieee754_atan2+0x42>
 800913e:	a140      	add	r1, pc, #256	; (adr r1, 8009240 <__ieee754_atan2+0x178>)
 8009140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009144:	e7e1      	b.n	800910a <__ieee754_atan2+0x42>
 8009146:	4315      	orrs	r5, r2
 8009148:	d106      	bne.n	8009158 <__ieee754_atan2+0x90>
 800914a:	f1be 0f00 	cmp.w	lr, #0
 800914e:	da5f      	bge.n	8009210 <__ieee754_atan2+0x148>
 8009150:	a13d      	add	r1, pc, #244	; (adr r1, 8009248 <__ieee754_atan2+0x180>)
 8009152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009156:	e7d8      	b.n	800910a <__ieee754_atan2+0x42>
 8009158:	4542      	cmp	r2, r8
 800915a:	d10f      	bne.n	800917c <__ieee754_atan2+0xb4>
 800915c:	4293      	cmp	r3, r2
 800915e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009162:	d107      	bne.n	8009174 <__ieee754_atan2+0xac>
 8009164:	2c02      	cmp	r4, #2
 8009166:	d84c      	bhi.n	8009202 <__ieee754_atan2+0x13a>
 8009168:	4b33      	ldr	r3, [pc, #204]	; (8009238 <__ieee754_atan2+0x170>)
 800916a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800916e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009172:	e7ca      	b.n	800910a <__ieee754_atan2+0x42>
 8009174:	2c02      	cmp	r4, #2
 8009176:	d848      	bhi.n	800920a <__ieee754_atan2+0x142>
 8009178:	4b30      	ldr	r3, [pc, #192]	; (800923c <__ieee754_atan2+0x174>)
 800917a:	e7f6      	b.n	800916a <__ieee754_atan2+0xa2>
 800917c:	4543      	cmp	r3, r8
 800917e:	d0e4      	beq.n	800914a <__ieee754_atan2+0x82>
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009186:	ea4f 5223 	mov.w	r2, r3, asr #20
 800918a:	da1e      	bge.n	80091ca <__ieee754_atan2+0x102>
 800918c:	2f00      	cmp	r7, #0
 800918e:	da01      	bge.n	8009194 <__ieee754_atan2+0xcc>
 8009190:	323c      	adds	r2, #60	; 0x3c
 8009192:	db1e      	blt.n	80091d2 <__ieee754_atan2+0x10a>
 8009194:	4632      	mov	r2, r6
 8009196:	463b      	mov	r3, r7
 8009198:	f7f7 fb04 	bl	80007a4 <__aeabi_ddiv>
 800919c:	ec41 0b10 	vmov	d0, r0, r1
 80091a0:	f000 fc02 	bl	80099a8 <fabs>
 80091a4:	f000 fa60 	bl	8009668 <atan>
 80091a8:	ec51 0b10 	vmov	r0, r1, d0
 80091ac:	2c01      	cmp	r4, #1
 80091ae:	d013      	beq.n	80091d8 <__ieee754_atan2+0x110>
 80091b0:	2c02      	cmp	r4, #2
 80091b2:	d015      	beq.n	80091e0 <__ieee754_atan2+0x118>
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	d0a8      	beq.n	800910a <__ieee754_atan2+0x42>
 80091b8:	a317      	add	r3, pc, #92	; (adr r3, 8009218 <__ieee754_atan2+0x150>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 f80f 	bl	80001e0 <__aeabi_dsub>
 80091c2:	a317      	add	r3, pc, #92	; (adr r3, 8009220 <__ieee754_atan2+0x158>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	e014      	b.n	80091f4 <__ieee754_atan2+0x12c>
 80091ca:	a117      	add	r1, pc, #92	; (adr r1, 8009228 <__ieee754_atan2+0x160>)
 80091cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091d0:	e7ec      	b.n	80091ac <__ieee754_atan2+0xe4>
 80091d2:	2000      	movs	r0, #0
 80091d4:	2100      	movs	r1, #0
 80091d6:	e7e9      	b.n	80091ac <__ieee754_atan2+0xe4>
 80091d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091dc:	4619      	mov	r1, r3
 80091de:	e794      	b.n	800910a <__ieee754_atan2+0x42>
 80091e0:	a30d      	add	r3, pc, #52	; (adr r3, 8009218 <__ieee754_atan2+0x150>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f7f6 fffb 	bl	80001e0 <__aeabi_dsub>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	a10c      	add	r1, pc, #48	; (adr r1, 8009220 <__ieee754_atan2+0x158>)
 80091f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f4:	f7f6 fff4 	bl	80001e0 <__aeabi_dsub>
 80091f8:	e787      	b.n	800910a <__ieee754_atan2+0x42>
 80091fa:	a109      	add	r1, pc, #36	; (adr r1, 8009220 <__ieee754_atan2+0x158>)
 80091fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009200:	e783      	b.n	800910a <__ieee754_atan2+0x42>
 8009202:	a10b      	add	r1, pc, #44	; (adr r1, 8009230 <__ieee754_atan2+0x168>)
 8009204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009208:	e77f      	b.n	800910a <__ieee754_atan2+0x42>
 800920a:	2000      	movs	r0, #0
 800920c:	2100      	movs	r1, #0
 800920e:	e77c      	b.n	800910a <__ieee754_atan2+0x42>
 8009210:	a105      	add	r1, pc, #20	; (adr r1, 8009228 <__ieee754_atan2+0x160>)
 8009212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009216:	e778      	b.n	800910a <__ieee754_atan2+0x42>
 8009218:	33145c07 	.word	0x33145c07
 800921c:	3ca1a626 	.word	0x3ca1a626
 8009220:	54442d18 	.word	0x54442d18
 8009224:	400921fb 	.word	0x400921fb
 8009228:	54442d18 	.word	0x54442d18
 800922c:	3ff921fb 	.word	0x3ff921fb
 8009230:	54442d18 	.word	0x54442d18
 8009234:	3fe921fb 	.word	0x3fe921fb
 8009238:	0800a298 	.word	0x0800a298
 800923c:	0800a2b0 	.word	0x0800a2b0
 8009240:	54442d18 	.word	0x54442d18
 8009244:	c00921fb 	.word	0xc00921fb
 8009248:	54442d18 	.word	0x54442d18
 800924c:	bff921fb 	.word	0xbff921fb
 8009250:	7ff00000 	.word	0x7ff00000
 8009254:	00000000 	.word	0x00000000

08009258 <__ieee754_rem_pio2>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	ed2d 8b02 	vpush	{d8}
 8009260:	ec55 4b10 	vmov	r4, r5, d0
 8009264:	4bca      	ldr	r3, [pc, #808]	; (8009590 <__ieee754_rem_pio2+0x338>)
 8009266:	b08b      	sub	sp, #44	; 0x2c
 8009268:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800926c:	4598      	cmp	r8, r3
 800926e:	4682      	mov	sl, r0
 8009270:	9502      	str	r5, [sp, #8]
 8009272:	dc08      	bgt.n	8009286 <__ieee754_rem_pio2+0x2e>
 8009274:	2200      	movs	r2, #0
 8009276:	2300      	movs	r3, #0
 8009278:	ed80 0b00 	vstr	d0, [r0]
 800927c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009280:	f04f 0b00 	mov.w	fp, #0
 8009284:	e028      	b.n	80092d8 <__ieee754_rem_pio2+0x80>
 8009286:	4bc3      	ldr	r3, [pc, #780]	; (8009594 <__ieee754_rem_pio2+0x33c>)
 8009288:	4598      	cmp	r8, r3
 800928a:	dc78      	bgt.n	800937e <__ieee754_rem_pio2+0x126>
 800928c:	9b02      	ldr	r3, [sp, #8]
 800928e:	4ec2      	ldr	r6, [pc, #776]	; (8009598 <__ieee754_rem_pio2+0x340>)
 8009290:	2b00      	cmp	r3, #0
 8009292:	ee10 0a10 	vmov	r0, s0
 8009296:	a3b0      	add	r3, pc, #704	; (adr r3, 8009558 <__ieee754_rem_pio2+0x300>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	4629      	mov	r1, r5
 800929e:	dd39      	ble.n	8009314 <__ieee754_rem_pio2+0xbc>
 80092a0:	f7f6 ff9e 	bl	80001e0 <__aeabi_dsub>
 80092a4:	45b0      	cmp	r8, r6
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	d01b      	beq.n	80092e4 <__ieee754_rem_pio2+0x8c>
 80092ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8009560 <__ieee754_rem_pio2+0x308>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f6 ff95 	bl	80001e0 <__aeabi_dsub>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	e9ca 2300 	strd	r2, r3, [sl]
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f6 ff8d 	bl	80001e0 <__aeabi_dsub>
 80092c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009560 <__ieee754_rem_pio2+0x308>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f6 ff88 	bl	80001e0 <__aeabi_dsub>
 80092d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092d4:	f04f 0b01 	mov.w	fp, #1
 80092d8:	4658      	mov	r0, fp
 80092da:	b00b      	add	sp, #44	; 0x2c
 80092dc:	ecbd 8b02 	vpop	{d8}
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009568 <__ieee754_rem_pio2+0x310>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ff79 	bl	80001e0 <__aeabi_dsub>
 80092ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8009570 <__ieee754_rem_pio2+0x318>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	4604      	mov	r4, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	f7f6 ff72 	bl	80001e0 <__aeabi_dsub>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	e9ca 2300 	strd	r2, r3, [sl]
 8009304:	4620      	mov	r0, r4
 8009306:	4629      	mov	r1, r5
 8009308:	f7f6 ff6a 	bl	80001e0 <__aeabi_dsub>
 800930c:	a398      	add	r3, pc, #608	; (adr r3, 8009570 <__ieee754_rem_pio2+0x318>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	e7db      	b.n	80092cc <__ieee754_rem_pio2+0x74>
 8009314:	f7f6 ff66 	bl	80001e4 <__adddf3>
 8009318:	45b0      	cmp	r8, r6
 800931a:	4604      	mov	r4, r0
 800931c:	460d      	mov	r5, r1
 800931e:	d016      	beq.n	800934e <__ieee754_rem_pio2+0xf6>
 8009320:	a38f      	add	r3, pc, #572	; (adr r3, 8009560 <__ieee754_rem_pio2+0x308>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f6 ff5d 	bl	80001e4 <__adddf3>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	e9ca 2300 	strd	r2, r3, [sl]
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f6 ff53 	bl	80001e0 <__aeabi_dsub>
 800933a:	a389      	add	r3, pc, #548	; (adr r3, 8009560 <__ieee754_rem_pio2+0x308>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f6 ff50 	bl	80001e4 <__adddf3>
 8009344:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009348:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800934c:	e7c4      	b.n	80092d8 <__ieee754_rem_pio2+0x80>
 800934e:	a386      	add	r3, pc, #536	; (adr r3, 8009568 <__ieee754_rem_pio2+0x310>)
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	f7f6 ff46 	bl	80001e4 <__adddf3>
 8009358:	a385      	add	r3, pc, #532	; (adr r3, 8009570 <__ieee754_rem_pio2+0x318>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	f7f6 ff3f 	bl	80001e4 <__adddf3>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	e9ca 2300 	strd	r2, r3, [sl]
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	f7f6 ff35 	bl	80001e0 <__aeabi_dsub>
 8009376:	a37e      	add	r3, pc, #504	; (adr r3, 8009570 <__ieee754_rem_pio2+0x318>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	e7e0      	b.n	8009340 <__ieee754_rem_pio2+0xe8>
 800937e:	4b87      	ldr	r3, [pc, #540]	; (800959c <__ieee754_rem_pio2+0x344>)
 8009380:	4598      	cmp	r8, r3
 8009382:	f300 80d8 	bgt.w	8009536 <__ieee754_rem_pio2+0x2de>
 8009386:	f000 fb0f 	bl	80099a8 <fabs>
 800938a:	ec55 4b10 	vmov	r4, r5, d0
 800938e:	ee10 0a10 	vmov	r0, s0
 8009392:	a379      	add	r3, pc, #484	; (adr r3, 8009578 <__ieee754_rem_pio2+0x320>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	4629      	mov	r1, r5
 800939a:	f7f7 f8d9 	bl	8000550 <__aeabi_dmul>
 800939e:	4b80      	ldr	r3, [pc, #512]	; (80095a0 <__ieee754_rem_pio2+0x348>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	f7f6 ff1f 	bl	80001e4 <__adddf3>
 80093a6:	f7f7 fb6d 	bl	8000a84 <__aeabi_d2iz>
 80093aa:	4683      	mov	fp, r0
 80093ac:	f7f7 f866 	bl	800047c <__aeabi_i2d>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	ec43 2b18 	vmov	d8, r2, r3
 80093b8:	a367      	add	r3, pc, #412	; (adr r3, 8009558 <__ieee754_rem_pio2+0x300>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f7f7 f8c7 	bl	8000550 <__aeabi_dmul>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f6 ff09 	bl	80001e0 <__aeabi_dsub>
 80093ce:	a364      	add	r3, pc, #400	; (adr r3, 8009560 <__ieee754_rem_pio2+0x308>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	ec51 0b18 	vmov	r0, r1, d8
 80093dc:	f7f7 f8b8 	bl	8000550 <__aeabi_dmul>
 80093e0:	f1bb 0f1f 	cmp.w	fp, #31
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	dc0d      	bgt.n	8009406 <__ieee754_rem_pio2+0x1ae>
 80093ea:	4b6e      	ldr	r3, [pc, #440]	; (80095a4 <__ieee754_rem_pio2+0x34c>)
 80093ec:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	4543      	cmp	r3, r8
 80093f6:	d006      	beq.n	8009406 <__ieee754_rem_pio2+0x1ae>
 80093f8:	4622      	mov	r2, r4
 80093fa:	462b      	mov	r3, r5
 80093fc:	4630      	mov	r0, r6
 80093fe:	4639      	mov	r1, r7
 8009400:	f7f6 feee 	bl	80001e0 <__aeabi_dsub>
 8009404:	e00e      	b.n	8009424 <__ieee754_rem_pio2+0x1cc>
 8009406:	462b      	mov	r3, r5
 8009408:	4622      	mov	r2, r4
 800940a:	4630      	mov	r0, r6
 800940c:	4639      	mov	r1, r7
 800940e:	f7f6 fee7 	bl	80001e0 <__aeabi_dsub>
 8009412:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009416:	9303      	str	r3, [sp, #12]
 8009418:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800941c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009420:	2b10      	cmp	r3, #16
 8009422:	dc02      	bgt.n	800942a <__ieee754_rem_pio2+0x1d2>
 8009424:	e9ca 0100 	strd	r0, r1, [sl]
 8009428:	e039      	b.n	800949e <__ieee754_rem_pio2+0x246>
 800942a:	a34f      	add	r3, pc, #316	; (adr r3, 8009568 <__ieee754_rem_pio2+0x310>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	ec51 0b18 	vmov	r0, r1, d8
 8009434:	f7f7 f88c 	bl	8000550 <__aeabi_dmul>
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	f7f6 fecc 	bl	80001e0 <__aeabi_dsub>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f6 fec4 	bl	80001e0 <__aeabi_dsub>
 8009458:	4622      	mov	r2, r4
 800945a:	462b      	mov	r3, r5
 800945c:	f7f6 fec0 	bl	80001e0 <__aeabi_dsub>
 8009460:	a343      	add	r3, pc, #268	; (adr r3, 8009570 <__ieee754_rem_pio2+0x318>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	4604      	mov	r4, r0
 8009468:	460d      	mov	r5, r1
 800946a:	ec51 0b18 	vmov	r0, r1, d8
 800946e:	f7f7 f86f 	bl	8000550 <__aeabi_dmul>
 8009472:	4622      	mov	r2, r4
 8009474:	462b      	mov	r3, r5
 8009476:	f7f6 feb3 	bl	80001e0 <__aeabi_dsub>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4604      	mov	r4, r0
 8009480:	460d      	mov	r5, r1
 8009482:	4640      	mov	r0, r8
 8009484:	4649      	mov	r1, r9
 8009486:	f7f6 feab 	bl	80001e0 <__aeabi_dsub>
 800948a:	9a03      	ldr	r2, [sp, #12]
 800948c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b31      	cmp	r3, #49	; 0x31
 8009494:	dc24      	bgt.n	80094e0 <__ieee754_rem_pio2+0x288>
 8009496:	e9ca 0100 	strd	r0, r1, [sl]
 800949a:	4646      	mov	r6, r8
 800949c:	464f      	mov	r7, r9
 800949e:	e9da 8900 	ldrd	r8, r9, [sl]
 80094a2:	4630      	mov	r0, r6
 80094a4:	4642      	mov	r2, r8
 80094a6:	464b      	mov	r3, r9
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f6 fe99 	bl	80001e0 <__aeabi_dsub>
 80094ae:	462b      	mov	r3, r5
 80094b0:	4622      	mov	r2, r4
 80094b2:	f7f6 fe95 	bl	80001e0 <__aeabi_dsub>
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094be:	f6bf af0b 	bge.w	80092d8 <__ieee754_rem_pio2+0x80>
 80094c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094c6:	f8ca 3004 	str.w	r3, [sl, #4]
 80094ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ce:	f8ca 8000 	str.w	r8, [sl]
 80094d2:	f8ca 0008 	str.w	r0, [sl, #8]
 80094d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80094da:	f1cb 0b00 	rsb	fp, fp, #0
 80094de:	e6fb      	b.n	80092d8 <__ieee754_rem_pio2+0x80>
 80094e0:	a327      	add	r3, pc, #156	; (adr r3, 8009580 <__ieee754_rem_pio2+0x328>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	ec51 0b18 	vmov	r0, r1, d8
 80094ea:	f7f7 f831 	bl	8000550 <__aeabi_dmul>
 80094ee:	4604      	mov	r4, r0
 80094f0:	460d      	mov	r5, r1
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f6 fe71 	bl	80001e0 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4606      	mov	r6, r0
 8009504:	460f      	mov	r7, r1
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 fe69 	bl	80001e0 <__aeabi_dsub>
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	f7f6 fe65 	bl	80001e0 <__aeabi_dsub>
 8009516:	a31c      	add	r3, pc, #112	; (adr r3, 8009588 <__ieee754_rem_pio2+0x330>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	4604      	mov	r4, r0
 800951e:	460d      	mov	r5, r1
 8009520:	ec51 0b18 	vmov	r0, r1, d8
 8009524:	f7f7 f814 	bl	8000550 <__aeabi_dmul>
 8009528:	4622      	mov	r2, r4
 800952a:	462b      	mov	r3, r5
 800952c:	f7f6 fe58 	bl	80001e0 <__aeabi_dsub>
 8009530:	4604      	mov	r4, r0
 8009532:	460d      	mov	r5, r1
 8009534:	e760      	b.n	80093f8 <__ieee754_rem_pio2+0x1a0>
 8009536:	4b1c      	ldr	r3, [pc, #112]	; (80095a8 <__ieee754_rem_pio2+0x350>)
 8009538:	4598      	cmp	r8, r3
 800953a:	dd37      	ble.n	80095ac <__ieee754_rem_pio2+0x354>
 800953c:	ee10 2a10 	vmov	r2, s0
 8009540:	462b      	mov	r3, r5
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f6 fe4b 	bl	80001e0 <__aeabi_dsub>
 800954a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800954e:	e9ca 0100 	strd	r0, r1, [sl]
 8009552:	e695      	b.n	8009280 <__ieee754_rem_pio2+0x28>
 8009554:	f3af 8000 	nop.w
 8009558:	54400000 	.word	0x54400000
 800955c:	3ff921fb 	.word	0x3ff921fb
 8009560:	1a626331 	.word	0x1a626331
 8009564:	3dd0b461 	.word	0x3dd0b461
 8009568:	1a600000 	.word	0x1a600000
 800956c:	3dd0b461 	.word	0x3dd0b461
 8009570:	2e037073 	.word	0x2e037073
 8009574:	3ba3198a 	.word	0x3ba3198a
 8009578:	6dc9c883 	.word	0x6dc9c883
 800957c:	3fe45f30 	.word	0x3fe45f30
 8009580:	2e000000 	.word	0x2e000000
 8009584:	3ba3198a 	.word	0x3ba3198a
 8009588:	252049c1 	.word	0x252049c1
 800958c:	397b839a 	.word	0x397b839a
 8009590:	3fe921fb 	.word	0x3fe921fb
 8009594:	4002d97b 	.word	0x4002d97b
 8009598:	3ff921fb 	.word	0x3ff921fb
 800959c:	413921fb 	.word	0x413921fb
 80095a0:	3fe00000 	.word	0x3fe00000
 80095a4:	0800a2c8 	.word	0x0800a2c8
 80095a8:	7fefffff 	.word	0x7fefffff
 80095ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 80095b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80095b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80095b8:	4620      	mov	r0, r4
 80095ba:	460d      	mov	r5, r1
 80095bc:	f7f7 fa62 	bl	8000a84 <__aeabi_d2iz>
 80095c0:	f7f6 ff5c 	bl	800047c <__aeabi_i2d>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095d0:	f7f6 fe06 	bl	80001e0 <__aeabi_dsub>
 80095d4:	4b21      	ldr	r3, [pc, #132]	; (800965c <__ieee754_rem_pio2+0x404>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	f7f6 ffba 	bl	8000550 <__aeabi_dmul>
 80095dc:	460d      	mov	r5, r1
 80095de:	4604      	mov	r4, r0
 80095e0:	f7f7 fa50 	bl	8000a84 <__aeabi_d2iz>
 80095e4:	f7f6 ff4a 	bl	800047c <__aeabi_i2d>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095f4:	f7f6 fdf4 	bl	80001e0 <__aeabi_dsub>
 80095f8:	4b18      	ldr	r3, [pc, #96]	; (800965c <__ieee754_rem_pio2+0x404>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	f7f6 ffa8 	bl	8000550 <__aeabi_dmul>
 8009600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009604:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009608:	2703      	movs	r7, #3
 800960a:	2400      	movs	r4, #0
 800960c:	2500      	movs	r5, #0
 800960e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009612:	4622      	mov	r2, r4
 8009614:	462b      	mov	r3, r5
 8009616:	46b9      	mov	r9, r7
 8009618:	3f01      	subs	r7, #1
 800961a:	f7f7 fa01 	bl	8000a20 <__aeabi_dcmpeq>
 800961e:	2800      	cmp	r0, #0
 8009620:	d1f5      	bne.n	800960e <__ieee754_rem_pio2+0x3b6>
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <__ieee754_rem_pio2+0x408>)
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	2302      	movs	r3, #2
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	4632      	mov	r2, r6
 800962c:	464b      	mov	r3, r9
 800962e:	4651      	mov	r1, sl
 8009630:	a804      	add	r0, sp, #16
 8009632:	f000 f9c5 	bl	80099c0 <__kernel_rem_pio2>
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	4683      	mov	fp, r0
 800963c:	f6bf ae4c 	bge.w	80092d8 <__ieee754_rem_pio2+0x80>
 8009640:	e9da 2100 	ldrd	r2, r1, [sl]
 8009644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009648:	e9ca 2300 	strd	r2, r3, [sl]
 800964c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009654:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009658:	e73f      	b.n	80094da <__ieee754_rem_pio2+0x282>
 800965a:	bf00      	nop
 800965c:	41700000 	.word	0x41700000
 8009660:	0800a348 	.word	0x0800a348
 8009664:	00000000 	.word	0x00000000

08009668 <atan>:
 8009668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	ec55 4b10 	vmov	r4, r5, d0
 8009670:	4bc3      	ldr	r3, [pc, #780]	; (8009980 <atan+0x318>)
 8009672:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009676:	429e      	cmp	r6, r3
 8009678:	46ab      	mov	fp, r5
 800967a:	dd18      	ble.n	80096ae <atan+0x46>
 800967c:	4bc1      	ldr	r3, [pc, #772]	; (8009984 <atan+0x31c>)
 800967e:	429e      	cmp	r6, r3
 8009680:	dc01      	bgt.n	8009686 <atan+0x1e>
 8009682:	d109      	bne.n	8009698 <atan+0x30>
 8009684:	b144      	cbz	r4, 8009698 <atan+0x30>
 8009686:	4622      	mov	r2, r4
 8009688:	462b      	mov	r3, r5
 800968a:	4620      	mov	r0, r4
 800968c:	4629      	mov	r1, r5
 800968e:	f7f6 fda9 	bl	80001e4 <__adddf3>
 8009692:	4604      	mov	r4, r0
 8009694:	460d      	mov	r5, r1
 8009696:	e006      	b.n	80096a6 <atan+0x3e>
 8009698:	f1bb 0f00 	cmp.w	fp, #0
 800969c:	f300 8131 	bgt.w	8009902 <atan+0x29a>
 80096a0:	a59b      	add	r5, pc, #620	; (adr r5, 8009910 <atan+0x2a8>)
 80096a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096a6:	ec45 4b10 	vmov	d0, r4, r5
 80096aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	4bb6      	ldr	r3, [pc, #728]	; (8009988 <atan+0x320>)
 80096b0:	429e      	cmp	r6, r3
 80096b2:	dc14      	bgt.n	80096de <atan+0x76>
 80096b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80096b8:	429e      	cmp	r6, r3
 80096ba:	dc0d      	bgt.n	80096d8 <atan+0x70>
 80096bc:	a396      	add	r3, pc, #600	; (adr r3, 8009918 <atan+0x2b0>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	ee10 0a10 	vmov	r0, s0
 80096c6:	4629      	mov	r1, r5
 80096c8:	f7f6 fd8c 	bl	80001e4 <__adddf3>
 80096cc:	4baf      	ldr	r3, [pc, #700]	; (800998c <atan+0x324>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	f7f7 f9ce 	bl	8000a70 <__aeabi_dcmpgt>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1e6      	bne.n	80096a6 <atan+0x3e>
 80096d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80096dc:	e02b      	b.n	8009736 <atan+0xce>
 80096de:	f000 f963 	bl	80099a8 <fabs>
 80096e2:	4bab      	ldr	r3, [pc, #684]	; (8009990 <atan+0x328>)
 80096e4:	429e      	cmp	r6, r3
 80096e6:	ec55 4b10 	vmov	r4, r5, d0
 80096ea:	f300 80bf 	bgt.w	800986c <atan+0x204>
 80096ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80096f2:	429e      	cmp	r6, r3
 80096f4:	f300 80a0 	bgt.w	8009838 <atan+0x1d0>
 80096f8:	ee10 2a10 	vmov	r2, s0
 80096fc:	ee10 0a10 	vmov	r0, s0
 8009700:	462b      	mov	r3, r5
 8009702:	4629      	mov	r1, r5
 8009704:	f7f6 fd6e 	bl	80001e4 <__adddf3>
 8009708:	4ba0      	ldr	r3, [pc, #640]	; (800998c <atan+0x324>)
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 fd68 	bl	80001e0 <__aeabi_dsub>
 8009710:	2200      	movs	r2, #0
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800971a:	4620      	mov	r0, r4
 800971c:	4629      	mov	r1, r5
 800971e:	f7f6 fd61 	bl	80001e4 <__adddf3>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4630      	mov	r0, r6
 8009728:	4639      	mov	r1, r7
 800972a:	f7f7 f83b 	bl	80007a4 <__aeabi_ddiv>
 800972e:	f04f 0a00 	mov.w	sl, #0
 8009732:	4604      	mov	r4, r0
 8009734:	460d      	mov	r5, r1
 8009736:	4622      	mov	r2, r4
 8009738:	462b      	mov	r3, r5
 800973a:	4620      	mov	r0, r4
 800973c:	4629      	mov	r1, r5
 800973e:	f7f6 ff07 	bl	8000550 <__aeabi_dmul>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4680      	mov	r8, r0
 8009748:	4689      	mov	r9, r1
 800974a:	f7f6 ff01 	bl	8000550 <__aeabi_dmul>
 800974e:	a374      	add	r3, pc, #464	; (adr r3, 8009920 <atan+0x2b8>)
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	4606      	mov	r6, r0
 8009756:	460f      	mov	r7, r1
 8009758:	f7f6 fefa 	bl	8000550 <__aeabi_dmul>
 800975c:	a372      	add	r3, pc, #456	; (adr r3, 8009928 <atan+0x2c0>)
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f7f6 fd3f 	bl	80001e4 <__adddf3>
 8009766:	4632      	mov	r2, r6
 8009768:	463b      	mov	r3, r7
 800976a:	f7f6 fef1 	bl	8000550 <__aeabi_dmul>
 800976e:	a370      	add	r3, pc, #448	; (adr r3, 8009930 <atan+0x2c8>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 fd36 	bl	80001e4 <__adddf3>
 8009778:	4632      	mov	r2, r6
 800977a:	463b      	mov	r3, r7
 800977c:	f7f6 fee8 	bl	8000550 <__aeabi_dmul>
 8009780:	a36d      	add	r3, pc, #436	; (adr r3, 8009938 <atan+0x2d0>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 fd2d 	bl	80001e4 <__adddf3>
 800978a:	4632      	mov	r2, r6
 800978c:	463b      	mov	r3, r7
 800978e:	f7f6 fedf 	bl	8000550 <__aeabi_dmul>
 8009792:	a36b      	add	r3, pc, #428	; (adr r3, 8009940 <atan+0x2d8>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 fd24 	bl	80001e4 <__adddf3>
 800979c:	4632      	mov	r2, r6
 800979e:	463b      	mov	r3, r7
 80097a0:	f7f6 fed6 	bl	8000550 <__aeabi_dmul>
 80097a4:	a368      	add	r3, pc, #416	; (adr r3, 8009948 <atan+0x2e0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fd1b 	bl	80001e4 <__adddf3>
 80097ae:	4642      	mov	r2, r8
 80097b0:	464b      	mov	r3, r9
 80097b2:	f7f6 fecd 	bl	8000550 <__aeabi_dmul>
 80097b6:	a366      	add	r3, pc, #408	; (adr r3, 8009950 <atan+0x2e8>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	4680      	mov	r8, r0
 80097be:	4689      	mov	r9, r1
 80097c0:	4630      	mov	r0, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	f7f6 fec4 	bl	8000550 <__aeabi_dmul>
 80097c8:	a363      	add	r3, pc, #396	; (adr r3, 8009958 <atan+0x2f0>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f6 fd07 	bl	80001e0 <__aeabi_dsub>
 80097d2:	4632      	mov	r2, r6
 80097d4:	463b      	mov	r3, r7
 80097d6:	f7f6 febb 	bl	8000550 <__aeabi_dmul>
 80097da:	a361      	add	r3, pc, #388	; (adr r3, 8009960 <atan+0x2f8>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fcfe 	bl	80001e0 <__aeabi_dsub>
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	f7f6 feb2 	bl	8000550 <__aeabi_dmul>
 80097ec:	a35e      	add	r3, pc, #376	; (adr r3, 8009968 <atan+0x300>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fcf5 	bl	80001e0 <__aeabi_dsub>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 fea9 	bl	8000550 <__aeabi_dmul>
 80097fe:	a35c      	add	r3, pc, #368	; (adr r3, 8009970 <atan+0x308>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fcec 	bl	80001e0 <__aeabi_dsub>
 8009808:	4632      	mov	r2, r6
 800980a:	463b      	mov	r3, r7
 800980c:	f7f6 fea0 	bl	8000550 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4640      	mov	r0, r8
 8009816:	4649      	mov	r1, r9
 8009818:	f7f6 fce4 	bl	80001e4 <__adddf3>
 800981c:	4622      	mov	r2, r4
 800981e:	462b      	mov	r3, r5
 8009820:	f7f6 fe96 	bl	8000550 <__aeabi_dmul>
 8009824:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	d14b      	bne.n	80098c6 <atan+0x25e>
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fcd5 	bl	80001e0 <__aeabi_dsub>
 8009836:	e72c      	b.n	8009692 <atan+0x2a>
 8009838:	ee10 0a10 	vmov	r0, s0
 800983c:	4b53      	ldr	r3, [pc, #332]	; (800998c <atan+0x324>)
 800983e:	2200      	movs	r2, #0
 8009840:	4629      	mov	r1, r5
 8009842:	f7f6 fccd 	bl	80001e0 <__aeabi_dsub>
 8009846:	4b51      	ldr	r3, [pc, #324]	; (800998c <atan+0x324>)
 8009848:	4606      	mov	r6, r0
 800984a:	460f      	mov	r7, r1
 800984c:	2200      	movs	r2, #0
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f6 fcc7 	bl	80001e4 <__adddf3>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f6 ffa1 	bl	80007a4 <__aeabi_ddiv>
 8009862:	f04f 0a01 	mov.w	sl, #1
 8009866:	4604      	mov	r4, r0
 8009868:	460d      	mov	r5, r1
 800986a:	e764      	b.n	8009736 <atan+0xce>
 800986c:	4b49      	ldr	r3, [pc, #292]	; (8009994 <atan+0x32c>)
 800986e:	429e      	cmp	r6, r3
 8009870:	da1d      	bge.n	80098ae <atan+0x246>
 8009872:	ee10 0a10 	vmov	r0, s0
 8009876:	4b48      	ldr	r3, [pc, #288]	; (8009998 <atan+0x330>)
 8009878:	2200      	movs	r2, #0
 800987a:	4629      	mov	r1, r5
 800987c:	f7f6 fcb0 	bl	80001e0 <__aeabi_dsub>
 8009880:	4b45      	ldr	r3, [pc, #276]	; (8009998 <atan+0x330>)
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	2200      	movs	r2, #0
 8009888:	4620      	mov	r0, r4
 800988a:	4629      	mov	r1, r5
 800988c:	f7f6 fe60 	bl	8000550 <__aeabi_dmul>
 8009890:	4b3e      	ldr	r3, [pc, #248]	; (800998c <atan+0x324>)
 8009892:	2200      	movs	r2, #0
 8009894:	f7f6 fca6 	bl	80001e4 <__adddf3>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f6 ff80 	bl	80007a4 <__aeabi_ddiv>
 80098a4:	f04f 0a02 	mov.w	sl, #2
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	e743      	b.n	8009736 <atan+0xce>
 80098ae:	462b      	mov	r3, r5
 80098b0:	ee10 2a10 	vmov	r2, s0
 80098b4:	4939      	ldr	r1, [pc, #228]	; (800999c <atan+0x334>)
 80098b6:	2000      	movs	r0, #0
 80098b8:	f7f6 ff74 	bl	80007a4 <__aeabi_ddiv>
 80098bc:	f04f 0a03 	mov.w	sl, #3
 80098c0:	4604      	mov	r4, r0
 80098c2:	460d      	mov	r5, r1
 80098c4:	e737      	b.n	8009736 <atan+0xce>
 80098c6:	4b36      	ldr	r3, [pc, #216]	; (80099a0 <atan+0x338>)
 80098c8:	4e36      	ldr	r6, [pc, #216]	; (80099a4 <atan+0x33c>)
 80098ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	f7f6 fc85 	bl	80001e0 <__aeabi_dsub>
 80098d6:	4622      	mov	r2, r4
 80098d8:	462b      	mov	r3, r5
 80098da:	f7f6 fc81 	bl	80001e0 <__aeabi_dsub>
 80098de:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80098ea:	f7f6 fc79 	bl	80001e0 <__aeabi_dsub>
 80098ee:	f1bb 0f00 	cmp.w	fp, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	460d      	mov	r5, r1
 80098f6:	f6bf aed6 	bge.w	80096a6 <atan+0x3e>
 80098fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098fe:	461d      	mov	r5, r3
 8009900:	e6d1      	b.n	80096a6 <atan+0x3e>
 8009902:	a51d      	add	r5, pc, #116	; (adr r5, 8009978 <atan+0x310>)
 8009904:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009908:	e6cd      	b.n	80096a6 <atan+0x3e>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	54442d18 	.word	0x54442d18
 8009914:	bff921fb 	.word	0xbff921fb
 8009918:	8800759c 	.word	0x8800759c
 800991c:	7e37e43c 	.word	0x7e37e43c
 8009920:	e322da11 	.word	0xe322da11
 8009924:	3f90ad3a 	.word	0x3f90ad3a
 8009928:	24760deb 	.word	0x24760deb
 800992c:	3fa97b4b 	.word	0x3fa97b4b
 8009930:	a0d03d51 	.word	0xa0d03d51
 8009934:	3fb10d66 	.word	0x3fb10d66
 8009938:	c54c206e 	.word	0xc54c206e
 800993c:	3fb745cd 	.word	0x3fb745cd
 8009940:	920083ff 	.word	0x920083ff
 8009944:	3fc24924 	.word	0x3fc24924
 8009948:	5555550d 	.word	0x5555550d
 800994c:	3fd55555 	.word	0x3fd55555
 8009950:	2c6a6c2f 	.word	0x2c6a6c2f
 8009954:	bfa2b444 	.word	0xbfa2b444
 8009958:	52defd9a 	.word	0x52defd9a
 800995c:	3fadde2d 	.word	0x3fadde2d
 8009960:	af749a6d 	.word	0xaf749a6d
 8009964:	3fb3b0f2 	.word	0x3fb3b0f2
 8009968:	fe231671 	.word	0xfe231671
 800996c:	3fbc71c6 	.word	0x3fbc71c6
 8009970:	9998ebc4 	.word	0x9998ebc4
 8009974:	3fc99999 	.word	0x3fc99999
 8009978:	54442d18 	.word	0x54442d18
 800997c:	3ff921fb 	.word	0x3ff921fb
 8009980:	440fffff 	.word	0x440fffff
 8009984:	7ff00000 	.word	0x7ff00000
 8009988:	3fdbffff 	.word	0x3fdbffff
 800998c:	3ff00000 	.word	0x3ff00000
 8009990:	3ff2ffff 	.word	0x3ff2ffff
 8009994:	40038000 	.word	0x40038000
 8009998:	3ff80000 	.word	0x3ff80000
 800999c:	bff00000 	.word	0xbff00000
 80099a0:	0800a470 	.word	0x0800a470
 80099a4:	0800a450 	.word	0x0800a450

080099a8 <fabs>:
 80099a8:	ec51 0b10 	vmov	r0, r1, d0
 80099ac:	ee10 2a10 	vmov	r2, s0
 80099b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099b4:	ec43 2b10 	vmov	d0, r2, r3
 80099b8:	4770      	bx	lr
 80099ba:	0000      	movs	r0, r0
 80099bc:	0000      	movs	r0, r0
	...

080099c0 <__kernel_rem_pio2>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	ed2d 8b02 	vpush	{d8}
 80099c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80099cc:	f112 0f14 	cmn.w	r2, #20
 80099d0:	9306      	str	r3, [sp, #24]
 80099d2:	9104      	str	r1, [sp, #16]
 80099d4:	4bc2      	ldr	r3, [pc, #776]	; (8009ce0 <__kernel_rem_pio2+0x320>)
 80099d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80099d8:	9009      	str	r0, [sp, #36]	; 0x24
 80099da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	9b06      	ldr	r3, [sp, #24]
 80099e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80099e6:	bfa8      	it	ge
 80099e8:	1ed4      	subge	r4, r2, #3
 80099ea:	9305      	str	r3, [sp, #20]
 80099ec:	bfb2      	itee	lt
 80099ee:	2400      	movlt	r4, #0
 80099f0:	2318      	movge	r3, #24
 80099f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80099f6:	f06f 0317 	mvn.w	r3, #23
 80099fa:	fb04 3303 	mla	r3, r4, r3, r3
 80099fe:	eb03 0a02 	add.w	sl, r3, r2
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	9a05      	ldr	r2, [sp, #20]
 8009a06:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009cd0 <__kernel_rem_pio2+0x310>
 8009a0a:	eb03 0802 	add.w	r8, r3, r2
 8009a0e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009a10:	1aa7      	subs	r7, r4, r2
 8009a12:	ae20      	add	r6, sp, #128	; 0x80
 8009a14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009a18:	2500      	movs	r5, #0
 8009a1a:	4545      	cmp	r5, r8
 8009a1c:	dd13      	ble.n	8009a46 <__kernel_rem_pio2+0x86>
 8009a1e:	9b06      	ldr	r3, [sp, #24]
 8009a20:	aa20      	add	r2, sp, #128	; 0x80
 8009a22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009a26:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	4598      	cmp	r8, r3
 8009a32:	dc31      	bgt.n	8009a98 <__kernel_rem_pio2+0xd8>
 8009a34:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009cd0 <__kernel_rem_pio2+0x310>
 8009a38:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009a3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a40:	462f      	mov	r7, r5
 8009a42:	2600      	movs	r6, #0
 8009a44:	e01b      	b.n	8009a7e <__kernel_rem_pio2+0xbe>
 8009a46:	42ef      	cmn	r7, r5
 8009a48:	d407      	bmi.n	8009a5a <__kernel_rem_pio2+0x9a>
 8009a4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009a4e:	f7f6 fd15 	bl	800047c <__aeabi_i2d>
 8009a52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a56:	3501      	adds	r5, #1
 8009a58:	e7df      	b.n	8009a1a <__kernel_rem_pio2+0x5a>
 8009a5a:	ec51 0b18 	vmov	r0, r1, d8
 8009a5e:	e7f8      	b.n	8009a52 <__kernel_rem_pio2+0x92>
 8009a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a68:	f7f6 fd72 	bl	8000550 <__aeabi_dmul>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a74:	f7f6 fbb6 	bl	80001e4 <__adddf3>
 8009a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7c:	3601      	adds	r6, #1
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	429e      	cmp	r6, r3
 8009a82:	f1a7 0708 	sub.w	r7, r7, #8
 8009a86:	ddeb      	ble.n	8009a60 <__kernel_rem_pio2+0xa0>
 8009a88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a8c:	f108 0801 	add.w	r8, r8, #1
 8009a90:	ecab 7b02 	vstmia	fp!, {d7}
 8009a94:	3508      	adds	r5, #8
 8009a96:	e7ca      	b.n	8009a2e <__kernel_rem_pio2+0x6e>
 8009a98:	9b00      	ldr	r3, [sp, #0]
 8009a9a:	aa0c      	add	r2, sp, #48	; 0x30
 8009a9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009aa4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009aa8:	9c00      	ldr	r4, [sp, #0]
 8009aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009aac:	00e3      	lsls	r3, r4, #3
 8009aae:	9308      	str	r3, [sp, #32]
 8009ab0:	ab98      	add	r3, sp, #608	; 0x260
 8009ab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ab6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009aba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009abe:	ab70      	add	r3, sp, #448	; 0x1c0
 8009ac0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009ac4:	46c3      	mov	fp, r8
 8009ac6:	46a1      	mov	r9, r4
 8009ac8:	f1b9 0f00 	cmp.w	r9, #0
 8009acc:	f1a5 0508 	sub.w	r5, r5, #8
 8009ad0:	dc77      	bgt.n	8009bc2 <__kernel_rem_pio2+0x202>
 8009ad2:	ec47 6b10 	vmov	d0, r6, r7
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	f000 fac2 	bl	800a060 <scalbn>
 8009adc:	ec57 6b10 	vmov	r6, r7, d0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009ae6:	ee10 0a10 	vmov	r0, s0
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 fd30 	bl	8000550 <__aeabi_dmul>
 8009af0:	ec41 0b10 	vmov	d0, r0, r1
 8009af4:	f000 fb34 	bl	800a160 <floor>
 8009af8:	4b7a      	ldr	r3, [pc, #488]	; (8009ce4 <__kernel_rem_pio2+0x324>)
 8009afa:	ec51 0b10 	vmov	r0, r1, d0
 8009afe:	2200      	movs	r2, #0
 8009b00:	f7f6 fd26 	bl	8000550 <__aeabi_dmul>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 fb68 	bl	80001e0 <__aeabi_dsub>
 8009b10:	460f      	mov	r7, r1
 8009b12:	4606      	mov	r6, r0
 8009b14:	f7f6 ffb6 	bl	8000a84 <__aeabi_d2iz>
 8009b18:	9002      	str	r0, [sp, #8]
 8009b1a:	f7f6 fcaf 	bl	800047c <__aeabi_i2d>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fb5b 	bl	80001e0 <__aeabi_dsub>
 8009b2a:	f1ba 0f00 	cmp.w	sl, #0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	dd6d      	ble.n	8009c10 <__kernel_rem_pio2+0x250>
 8009b34:	1e61      	subs	r1, r4, #1
 8009b36:	ab0c      	add	r3, sp, #48	; 0x30
 8009b38:	9d02      	ldr	r5, [sp, #8]
 8009b3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b3e:	f1ca 0018 	rsb	r0, sl, #24
 8009b42:	fa43 f200 	asr.w	r2, r3, r0
 8009b46:	4415      	add	r5, r2
 8009b48:	4082      	lsls	r2, r0
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	aa0c      	add	r2, sp, #48	; 0x30
 8009b4e:	9502      	str	r5, [sp, #8]
 8009b50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009b54:	f1ca 0217 	rsb	r2, sl, #23
 8009b58:	fa43 fb02 	asr.w	fp, r3, r2
 8009b5c:	f1bb 0f00 	cmp.w	fp, #0
 8009b60:	dd65      	ble.n	8009c2e <__kernel_rem_pio2+0x26e>
 8009b62:	9b02      	ldr	r3, [sp, #8]
 8009b64:	2200      	movs	r2, #0
 8009b66:	3301      	adds	r3, #1
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	4615      	mov	r5, r2
 8009b6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009b70:	4294      	cmp	r4, r2
 8009b72:	f300 809f 	bgt.w	8009cb4 <__kernel_rem_pio2+0x2f4>
 8009b76:	f1ba 0f00 	cmp.w	sl, #0
 8009b7a:	dd07      	ble.n	8009b8c <__kernel_rem_pio2+0x1cc>
 8009b7c:	f1ba 0f01 	cmp.w	sl, #1
 8009b80:	f000 80c1 	beq.w	8009d06 <__kernel_rem_pio2+0x346>
 8009b84:	f1ba 0f02 	cmp.w	sl, #2
 8009b88:	f000 80c7 	beq.w	8009d1a <__kernel_rem_pio2+0x35a>
 8009b8c:	f1bb 0f02 	cmp.w	fp, #2
 8009b90:	d14d      	bne.n	8009c2e <__kernel_rem_pio2+0x26e>
 8009b92:	4632      	mov	r2, r6
 8009b94:	463b      	mov	r3, r7
 8009b96:	4954      	ldr	r1, [pc, #336]	; (8009ce8 <__kernel_rem_pio2+0x328>)
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f7f6 fb21 	bl	80001e0 <__aeabi_dsub>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460f      	mov	r7, r1
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	d043      	beq.n	8009c2e <__kernel_rem_pio2+0x26e>
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009cd8 <__kernel_rem_pio2+0x318>
 8009bac:	f000 fa58 	bl	800a060 <scalbn>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	ec53 2b10 	vmov	r2, r3, d0
 8009bb8:	f7f6 fb12 	bl	80001e0 <__aeabi_dsub>
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	e035      	b.n	8009c2e <__kernel_rem_pio2+0x26e>
 8009bc2:	4b4a      	ldr	r3, [pc, #296]	; (8009cec <__kernel_rem_pio2+0x32c>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 fcc1 	bl	8000550 <__aeabi_dmul>
 8009bce:	f7f6 ff59 	bl	8000a84 <__aeabi_d2iz>
 8009bd2:	f7f6 fc53 	bl	800047c <__aeabi_i2d>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	ec43 2b18 	vmov	d8, r2, r3
 8009bde:	4b44      	ldr	r3, [pc, #272]	; (8009cf0 <__kernel_rem_pio2+0x330>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	f7f6 fcb5 	bl	8000550 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 faf7 	bl	80001e0 <__aeabi_dsub>
 8009bf2:	f7f6 ff47 	bl	8000a84 <__aeabi_d2iz>
 8009bf6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bfa:	f84b 0b04 	str.w	r0, [fp], #4
 8009bfe:	ec51 0b18 	vmov	r0, r1, d8
 8009c02:	f7f6 faef 	bl	80001e4 <__adddf3>
 8009c06:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	e75b      	b.n	8009ac8 <__kernel_rem_pio2+0x108>
 8009c10:	d106      	bne.n	8009c20 <__kernel_rem_pio2+0x260>
 8009c12:	1e63      	subs	r3, r4, #1
 8009c14:	aa0c      	add	r2, sp, #48	; 0x30
 8009c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c1a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009c1e:	e79d      	b.n	8009b5c <__kernel_rem_pio2+0x19c>
 8009c20:	4b34      	ldr	r3, [pc, #208]	; (8009cf4 <__kernel_rem_pio2+0x334>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	f7f6 ff1a 	bl	8000a5c <__aeabi_dcmpge>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d140      	bne.n	8009cae <__kernel_rem_pio2+0x2ee>
 8009c2c:	4683      	mov	fp, r0
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fef3 	bl	8000a20 <__aeabi_dcmpeq>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	f000 80c1 	beq.w	8009dc2 <__kernel_rem_pio2+0x402>
 8009c40:	1e65      	subs	r5, r4, #1
 8009c42:	462b      	mov	r3, r5
 8009c44:	2200      	movs	r2, #0
 8009c46:	9900      	ldr	r1, [sp, #0]
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	da6d      	bge.n	8009d28 <__kernel_rem_pio2+0x368>
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	f000 808a 	beq.w	8009d66 <__kernel_rem_pio2+0x3a6>
 8009c52:	ab0c      	add	r3, sp, #48	; 0x30
 8009c54:	f1aa 0a18 	sub.w	sl, sl, #24
 8009c58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80ae 	beq.w	8009dbe <__kernel_rem_pio2+0x3fe>
 8009c62:	4650      	mov	r0, sl
 8009c64:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009cd8 <__kernel_rem_pio2+0x318>
 8009c68:	f000 f9fa 	bl	800a060 <scalbn>
 8009c6c:	1c6b      	adds	r3, r5, #1
 8009c6e:	00da      	lsls	r2, r3, #3
 8009c70:	9205      	str	r2, [sp, #20]
 8009c72:	ec57 6b10 	vmov	r6, r7, d0
 8009c76:	aa70      	add	r2, sp, #448	; 0x1c0
 8009c78:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009cec <__kernel_rem_pio2+0x32c>
 8009c7c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009c80:	462c      	mov	r4, r5
 8009c82:	f04f 0800 	mov.w	r8, #0
 8009c86:	2c00      	cmp	r4, #0
 8009c88:	f280 80d4 	bge.w	8009e34 <__kernel_rem_pio2+0x474>
 8009c8c:	462c      	mov	r4, r5
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	f2c0 8102 	blt.w	8009e98 <__kernel_rem_pio2+0x4d8>
 8009c94:	4b18      	ldr	r3, [pc, #96]	; (8009cf8 <__kernel_rem_pio2+0x338>)
 8009c96:	461e      	mov	r6, r3
 8009c98:	ab70      	add	r3, sp, #448	; 0x1c0
 8009c9a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009c9e:	1b2b      	subs	r3, r5, r4
 8009ca0:	f04f 0900 	mov.w	r9, #0
 8009ca4:	f04f 0a00 	mov.w	sl, #0
 8009ca8:	2700      	movs	r7, #0
 8009caa:	9306      	str	r3, [sp, #24]
 8009cac:	e0e6      	b.n	8009e7c <__kernel_rem_pio2+0x4bc>
 8009cae:	f04f 0b02 	mov.w	fp, #2
 8009cb2:	e756      	b.n	8009b62 <__kernel_rem_pio2+0x1a2>
 8009cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb8:	bb05      	cbnz	r5, 8009cfc <__kernel_rem_pio2+0x33c>
 8009cba:	b123      	cbz	r3, 8009cc6 <__kernel_rem_pio2+0x306>
 8009cbc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009cc0:	f8c8 3000 	str.w	r3, [r8]
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	3201      	adds	r2, #1
 8009cc8:	f108 0804 	add.w	r8, r8, #4
 8009ccc:	461d      	mov	r5, r3
 8009cce:	e74f      	b.n	8009b70 <__kernel_rem_pio2+0x1b0>
	...
 8009cdc:	3ff00000 	.word	0x3ff00000
 8009ce0:	0800a4d0 	.word	0x0800a4d0
 8009ce4:	40200000 	.word	0x40200000
 8009ce8:	3ff00000 	.word	0x3ff00000
 8009cec:	3e700000 	.word	0x3e700000
 8009cf0:	41700000 	.word	0x41700000
 8009cf4:	3fe00000 	.word	0x3fe00000
 8009cf8:	0800a490 	.word	0x0800a490
 8009cfc:	1acb      	subs	r3, r1, r3
 8009cfe:	f8c8 3000 	str.w	r3, [r8]
 8009d02:	462b      	mov	r3, r5
 8009d04:	e7df      	b.n	8009cc6 <__kernel_rem_pio2+0x306>
 8009d06:	1e62      	subs	r2, r4, #1
 8009d08:	ab0c      	add	r3, sp, #48	; 0x30
 8009d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d12:	a90c      	add	r1, sp, #48	; 0x30
 8009d14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d18:	e738      	b.n	8009b8c <__kernel_rem_pio2+0x1cc>
 8009d1a:	1e62      	subs	r2, r4, #1
 8009d1c:	ab0c      	add	r3, sp, #48	; 0x30
 8009d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d22:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d26:	e7f4      	b.n	8009d12 <__kernel_rem_pio2+0x352>
 8009d28:	a90c      	add	r1, sp, #48	; 0x30
 8009d2a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	430a      	orrs	r2, r1
 8009d32:	e788      	b.n	8009c46 <__kernel_rem_pio2+0x286>
 8009d34:	3301      	adds	r3, #1
 8009d36:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009d3a:	2900      	cmp	r1, #0
 8009d3c:	d0fa      	beq.n	8009d34 <__kernel_rem_pio2+0x374>
 8009d3e:	9a08      	ldr	r2, [sp, #32]
 8009d40:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8009d44:	446a      	add	r2, sp
 8009d46:	3a98      	subs	r2, #152	; 0x98
 8009d48:	9208      	str	r2, [sp, #32]
 8009d4a:	9a06      	ldr	r2, [sp, #24]
 8009d4c:	a920      	add	r1, sp, #128	; 0x80
 8009d4e:	18a2      	adds	r2, r4, r2
 8009d50:	18e3      	adds	r3, r4, r3
 8009d52:	f104 0801 	add.w	r8, r4, #1
 8009d56:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009d5a:	9302      	str	r3, [sp, #8]
 8009d5c:	9b02      	ldr	r3, [sp, #8]
 8009d5e:	4543      	cmp	r3, r8
 8009d60:	da04      	bge.n	8009d6c <__kernel_rem_pio2+0x3ac>
 8009d62:	461c      	mov	r4, r3
 8009d64:	e6a2      	b.n	8009aac <__kernel_rem_pio2+0xec>
 8009d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e7e4      	b.n	8009d36 <__kernel_rem_pio2+0x376>
 8009d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d72:	f7f6 fb83 	bl	800047c <__aeabi_i2d>
 8009d76:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7c:	46ab      	mov	fp, r5
 8009d7e:	461c      	mov	r4, r3
 8009d80:	f04f 0900 	mov.w	r9, #0
 8009d84:	2600      	movs	r6, #0
 8009d86:	2700      	movs	r7, #0
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	4599      	cmp	r9, r3
 8009d8c:	dd06      	ble.n	8009d9c <__kernel_rem_pio2+0x3dc>
 8009d8e:	9b08      	ldr	r3, [sp, #32]
 8009d90:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009d94:	f108 0801 	add.w	r8, r8, #1
 8009d98:	9308      	str	r3, [sp, #32]
 8009d9a:	e7df      	b.n	8009d5c <__kernel_rem_pio2+0x39c>
 8009d9c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009da0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009da4:	f7f6 fbd4 	bl	8000550 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4630      	mov	r0, r6
 8009dae:	4639      	mov	r1, r7
 8009db0:	f7f6 fa18 	bl	80001e4 <__adddf3>
 8009db4:	f109 0901 	add.w	r9, r9, #1
 8009db8:	4606      	mov	r6, r0
 8009dba:	460f      	mov	r7, r1
 8009dbc:	e7e4      	b.n	8009d88 <__kernel_rem_pio2+0x3c8>
 8009dbe:	3d01      	subs	r5, #1
 8009dc0:	e747      	b.n	8009c52 <__kernel_rem_pio2+0x292>
 8009dc2:	ec47 6b10 	vmov	d0, r6, r7
 8009dc6:	f1ca 0000 	rsb	r0, sl, #0
 8009dca:	f000 f949 	bl	800a060 <scalbn>
 8009dce:	ec57 6b10 	vmov	r6, r7, d0
 8009dd2:	4ba0      	ldr	r3, [pc, #640]	; (800a054 <__kernel_rem_pio2+0x694>)
 8009dd4:	ee10 0a10 	vmov	r0, s0
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 fe3e 	bl	8000a5c <__aeabi_dcmpge>
 8009de0:	b1f8      	cbz	r0, 8009e22 <__kernel_rem_pio2+0x462>
 8009de2:	4b9d      	ldr	r3, [pc, #628]	; (800a058 <__kernel_rem_pio2+0x698>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	4630      	mov	r0, r6
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 fbb1 	bl	8000550 <__aeabi_dmul>
 8009dee:	f7f6 fe49 	bl	8000a84 <__aeabi_d2iz>
 8009df2:	4680      	mov	r8, r0
 8009df4:	f7f6 fb42 	bl	800047c <__aeabi_i2d>
 8009df8:	4b96      	ldr	r3, [pc, #600]	; (800a054 <__kernel_rem_pio2+0x694>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f7f6 fba8 	bl	8000550 <__aeabi_dmul>
 8009e00:	460b      	mov	r3, r1
 8009e02:	4602      	mov	r2, r0
 8009e04:	4639      	mov	r1, r7
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7f6 f9ea 	bl	80001e0 <__aeabi_dsub>
 8009e0c:	f7f6 fe3a 	bl	8000a84 <__aeabi_d2iz>
 8009e10:	1c65      	adds	r5, r4, #1
 8009e12:	ab0c      	add	r3, sp, #48	; 0x30
 8009e14:	f10a 0a18 	add.w	sl, sl, #24
 8009e18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009e1c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009e20:	e71f      	b.n	8009c62 <__kernel_rem_pio2+0x2a2>
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fe2d 	bl	8000a84 <__aeabi_d2iz>
 8009e2a:	ab0c      	add	r3, sp, #48	; 0x30
 8009e2c:	4625      	mov	r5, r4
 8009e2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009e32:	e716      	b.n	8009c62 <__kernel_rem_pio2+0x2a2>
 8009e34:	ab0c      	add	r3, sp, #48	; 0x30
 8009e36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009e3a:	f7f6 fb1f 	bl	800047c <__aeabi_i2d>
 8009e3e:	4632      	mov	r2, r6
 8009e40:	463b      	mov	r3, r7
 8009e42:	f7f6 fb85 	bl	8000550 <__aeabi_dmul>
 8009e46:	4642      	mov	r2, r8
 8009e48:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fb7d 	bl	8000550 <__aeabi_dmul>
 8009e56:	3c01      	subs	r4, #1
 8009e58:	4606      	mov	r6, r0
 8009e5a:	460f      	mov	r7, r1
 8009e5c:	e713      	b.n	8009c86 <__kernel_rem_pio2+0x2c6>
 8009e5e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009e62:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009e66:	f7f6 fb73 	bl	8000550 <__aeabi_dmul>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4648      	mov	r0, r9
 8009e70:	4651      	mov	r1, sl
 8009e72:	f7f6 f9b7 	bl	80001e4 <__adddf3>
 8009e76:	3701      	adds	r7, #1
 8009e78:	4681      	mov	r9, r0
 8009e7a:	468a      	mov	sl, r1
 8009e7c:	9b00      	ldr	r3, [sp, #0]
 8009e7e:	429f      	cmp	r7, r3
 8009e80:	dc02      	bgt.n	8009e88 <__kernel_rem_pio2+0x4c8>
 8009e82:	9b06      	ldr	r3, [sp, #24]
 8009e84:	429f      	cmp	r7, r3
 8009e86:	ddea      	ble.n	8009e5e <__kernel_rem_pio2+0x49e>
 8009e88:	9a06      	ldr	r2, [sp, #24]
 8009e8a:	ab48      	add	r3, sp, #288	; 0x120
 8009e8c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009e90:	e9c6 9a00 	strd	r9, sl, [r6]
 8009e94:	3c01      	subs	r4, #1
 8009e96:	e6fa      	b.n	8009c8e <__kernel_rem_pio2+0x2ce>
 8009e98:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	dc0b      	bgt.n	8009eb6 <__kernel_rem_pio2+0x4f6>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dc39      	bgt.n	8009f16 <__kernel_rem_pio2+0x556>
 8009ea2:	d05d      	beq.n	8009f60 <__kernel_rem_pio2+0x5a0>
 8009ea4:	9b02      	ldr	r3, [sp, #8]
 8009ea6:	f003 0007 	and.w	r0, r3, #7
 8009eaa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009eae:	ecbd 8b02 	vpop	{d8}
 8009eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d1f3      	bne.n	8009ea4 <__kernel_rem_pio2+0x4e4>
 8009ebc:	9b05      	ldr	r3, [sp, #20]
 8009ebe:	9500      	str	r5, [sp, #0]
 8009ec0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009ec4:	eb0d 0403 	add.w	r4, sp, r3
 8009ec8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009ecc:	46a2      	mov	sl, r4
 8009ece:	9b00      	ldr	r3, [sp, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f1aa 0a08 	sub.w	sl, sl, #8
 8009ed6:	dc69      	bgt.n	8009fac <__kernel_rem_pio2+0x5ec>
 8009ed8:	46aa      	mov	sl, r5
 8009eda:	f1ba 0f01 	cmp.w	sl, #1
 8009ede:	f1a4 0408 	sub.w	r4, r4, #8
 8009ee2:	f300 8083 	bgt.w	8009fec <__kernel_rem_pio2+0x62c>
 8009ee6:	9c05      	ldr	r4, [sp, #20]
 8009ee8:	ab48      	add	r3, sp, #288	; 0x120
 8009eea:	441c      	add	r4, r3
 8009eec:	2000      	movs	r0, #0
 8009eee:	2100      	movs	r1, #0
 8009ef0:	2d01      	cmp	r5, #1
 8009ef2:	f300 809a 	bgt.w	800a02a <__kernel_rem_pio2+0x66a>
 8009ef6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009efa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009efe:	f1bb 0f00 	cmp.w	fp, #0
 8009f02:	f040 8098 	bne.w	800a036 <__kernel_rem_pio2+0x676>
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	e9c3 7800 	strd	r7, r8, [r3]
 8009f0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009f10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009f14:	e7c6      	b.n	8009ea4 <__kernel_rem_pio2+0x4e4>
 8009f16:	9e05      	ldr	r6, [sp, #20]
 8009f18:	ab48      	add	r3, sp, #288	; 0x120
 8009f1a:	441e      	add	r6, r3
 8009f1c:	462c      	mov	r4, r5
 8009f1e:	2000      	movs	r0, #0
 8009f20:	2100      	movs	r1, #0
 8009f22:	2c00      	cmp	r4, #0
 8009f24:	da33      	bge.n	8009f8e <__kernel_rem_pio2+0x5ce>
 8009f26:	f1bb 0f00 	cmp.w	fp, #0
 8009f2a:	d036      	beq.n	8009f9a <__kernel_rem_pio2+0x5da>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f32:	9c04      	ldr	r4, [sp, #16]
 8009f34:	e9c4 2300 	strd	r2, r3, [r4]
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009f40:	f7f6 f94e 	bl	80001e0 <__aeabi_dsub>
 8009f44:	ae4a      	add	r6, sp, #296	; 0x128
 8009f46:	2401      	movs	r4, #1
 8009f48:	42a5      	cmp	r5, r4
 8009f4a:	da29      	bge.n	8009fa0 <__kernel_rem_pio2+0x5e0>
 8009f4c:	f1bb 0f00 	cmp.w	fp, #0
 8009f50:	d002      	beq.n	8009f58 <__kernel_rem_pio2+0x598>
 8009f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f56:	4619      	mov	r1, r3
 8009f58:	9b04      	ldr	r3, [sp, #16]
 8009f5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f5e:	e7a1      	b.n	8009ea4 <__kernel_rem_pio2+0x4e4>
 8009f60:	9c05      	ldr	r4, [sp, #20]
 8009f62:	ab48      	add	r3, sp, #288	; 0x120
 8009f64:	441c      	add	r4, r3
 8009f66:	2000      	movs	r0, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	da09      	bge.n	8009f82 <__kernel_rem_pio2+0x5c2>
 8009f6e:	f1bb 0f00 	cmp.w	fp, #0
 8009f72:	d002      	beq.n	8009f7a <__kernel_rem_pio2+0x5ba>
 8009f74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f78:	4619      	mov	r1, r3
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	e9c3 0100 	strd	r0, r1, [r3]
 8009f80:	e790      	b.n	8009ea4 <__kernel_rem_pio2+0x4e4>
 8009f82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f86:	f7f6 f92d 	bl	80001e4 <__adddf3>
 8009f8a:	3d01      	subs	r5, #1
 8009f8c:	e7ed      	b.n	8009f6a <__kernel_rem_pio2+0x5aa>
 8009f8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009f92:	f7f6 f927 	bl	80001e4 <__adddf3>
 8009f96:	3c01      	subs	r4, #1
 8009f98:	e7c3      	b.n	8009f22 <__kernel_rem_pio2+0x562>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	e7c8      	b.n	8009f32 <__kernel_rem_pio2+0x572>
 8009fa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009fa4:	f7f6 f91e 	bl	80001e4 <__adddf3>
 8009fa8:	3401      	adds	r4, #1
 8009faa:	e7cd      	b.n	8009f48 <__kernel_rem_pio2+0x588>
 8009fac:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fb0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009fb4:	9b00      	ldr	r3, [sp, #0]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	4632      	mov	r2, r6
 8009fbc:	463b      	mov	r3, r7
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	f7f6 f90f 	bl	80001e4 <__adddf3>
 8009fc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	f7f6 f905 	bl	80001e0 <__aeabi_dsub>
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	463b      	mov	r3, r7
 8009fda:	f7f6 f903 	bl	80001e4 <__adddf3>
 8009fde:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009fe2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fe6:	ed8a 7b00 	vstr	d7, [sl]
 8009fea:	e770      	b.n	8009ece <__kernel_rem_pio2+0x50e>
 8009fec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009ff0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	463b      	mov	r3, r7
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 f8f2 	bl	80001e4 <__adddf3>
 800a000:	e9cd 0100 	strd	r0, r1, [sp]
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4640      	mov	r0, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 f8e8 	bl	80001e0 <__aeabi_dsub>
 800a010:	4632      	mov	r2, r6
 800a012:	463b      	mov	r3, r7
 800a014:	f7f6 f8e6 	bl	80001e4 <__adddf3>
 800a018:	ed9d 7b00 	vldr	d7, [sp]
 800a01c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a020:	ed84 7b00 	vstr	d7, [r4]
 800a024:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a028:	e757      	b.n	8009eda <__kernel_rem_pio2+0x51a>
 800a02a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a02e:	f7f6 f8d9 	bl	80001e4 <__adddf3>
 800a032:	3d01      	subs	r5, #1
 800a034:	e75c      	b.n	8009ef0 <__kernel_rem_pio2+0x530>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	601f      	str	r7, [r3, #0]
 800a03c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a040:	605c      	str	r4, [r3, #4]
 800a042:	609d      	str	r5, [r3, #8]
 800a044:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a048:	60d3      	str	r3, [r2, #12]
 800a04a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a04e:	6110      	str	r0, [r2, #16]
 800a050:	6153      	str	r3, [r2, #20]
 800a052:	e727      	b.n	8009ea4 <__kernel_rem_pio2+0x4e4>
 800a054:	41700000 	.word	0x41700000
 800a058:	3e700000 	.word	0x3e700000
 800a05c:	00000000 	.word	0x00000000

0800a060 <scalbn>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	ec55 4b10 	vmov	r4, r5, d0
 800a066:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a06a:	4606      	mov	r6, r0
 800a06c:	462b      	mov	r3, r5
 800a06e:	b999      	cbnz	r1, 800a098 <scalbn+0x38>
 800a070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a074:	4323      	orrs	r3, r4
 800a076:	d03f      	beq.n	800a0f8 <scalbn+0x98>
 800a078:	4b35      	ldr	r3, [pc, #212]	; (800a150 <scalbn+0xf0>)
 800a07a:	4629      	mov	r1, r5
 800a07c:	ee10 0a10 	vmov	r0, s0
 800a080:	2200      	movs	r2, #0
 800a082:	f7f6 fa65 	bl	8000550 <__aeabi_dmul>
 800a086:	4b33      	ldr	r3, [pc, #204]	; (800a154 <scalbn+0xf4>)
 800a088:	429e      	cmp	r6, r3
 800a08a:	4604      	mov	r4, r0
 800a08c:	460d      	mov	r5, r1
 800a08e:	da10      	bge.n	800a0b2 <scalbn+0x52>
 800a090:	a327      	add	r3, pc, #156	; (adr r3, 800a130 <scalbn+0xd0>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	e01f      	b.n	800a0d8 <scalbn+0x78>
 800a098:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a09c:	4291      	cmp	r1, r2
 800a09e:	d10c      	bne.n	800a0ba <scalbn+0x5a>
 800a0a0:	ee10 2a10 	vmov	r2, s0
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 f89c 	bl	80001e4 <__adddf3>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	e022      	b.n	800a0f8 <scalbn+0x98>
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a0b8:	3936      	subs	r1, #54	; 0x36
 800a0ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a0be:	4296      	cmp	r6, r2
 800a0c0:	dd0d      	ble.n	800a0de <scalbn+0x7e>
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	a11c      	add	r1, pc, #112	; (adr r1, 800a138 <scalbn+0xd8>)
 800a0c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ca:	da02      	bge.n	800a0d2 <scalbn+0x72>
 800a0cc:	a11c      	add	r1, pc, #112	; (adr r1, 800a140 <scalbn+0xe0>)
 800a0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d2:	a319      	add	r3, pc, #100	; (adr r3, 800a138 <scalbn+0xd8>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7f6 fa3a 	bl	8000550 <__aeabi_dmul>
 800a0dc:	e7e6      	b.n	800a0ac <scalbn+0x4c>
 800a0de:	1872      	adds	r2, r6, r1
 800a0e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0e4:	428a      	cmp	r2, r1
 800a0e6:	dcec      	bgt.n	800a0c2 <scalbn+0x62>
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	dd08      	ble.n	800a0fe <scalbn+0x9e>
 800a0ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0f8:	ec45 4b10 	vmov	d0, r4, r5
 800a0fc:	bd70      	pop	{r4, r5, r6, pc}
 800a0fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a102:	da08      	bge.n	800a116 <scalbn+0xb6>
 800a104:	2d00      	cmp	r5, #0
 800a106:	a10a      	add	r1, pc, #40	; (adr r1, 800a130 <scalbn+0xd0>)
 800a108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10c:	dac0      	bge.n	800a090 <scalbn+0x30>
 800a10e:	a10e      	add	r1, pc, #56	; (adr r1, 800a148 <scalbn+0xe8>)
 800a110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a114:	e7bc      	b.n	800a090 <scalbn+0x30>
 800a116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a11a:	3236      	adds	r2, #54	; 0x36
 800a11c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a120:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a124:	4620      	mov	r0, r4
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <scalbn+0xf8>)
 800a128:	2200      	movs	r2, #0
 800a12a:	e7d5      	b.n	800a0d8 <scalbn+0x78>
 800a12c:	f3af 8000 	nop.w
 800a130:	c2f8f359 	.word	0xc2f8f359
 800a134:	01a56e1f 	.word	0x01a56e1f
 800a138:	8800759c 	.word	0x8800759c
 800a13c:	7e37e43c 	.word	0x7e37e43c
 800a140:	8800759c 	.word	0x8800759c
 800a144:	fe37e43c 	.word	0xfe37e43c
 800a148:	c2f8f359 	.word	0xc2f8f359
 800a14c:	81a56e1f 	.word	0x81a56e1f
 800a150:	43500000 	.word	0x43500000
 800a154:	ffff3cb0 	.word	0xffff3cb0
 800a158:	3c900000 	.word	0x3c900000
 800a15c:	00000000 	.word	0x00000000

0800a160 <floor>:
 800a160:	ec51 0b10 	vmov	r0, r1, d0
 800a164:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a170:	2e13      	cmp	r6, #19
 800a172:	ee10 5a10 	vmov	r5, s0
 800a176:	ee10 8a10 	vmov	r8, s0
 800a17a:	460c      	mov	r4, r1
 800a17c:	dc31      	bgt.n	800a1e2 <floor+0x82>
 800a17e:	2e00      	cmp	r6, #0
 800a180:	da14      	bge.n	800a1ac <floor+0x4c>
 800a182:	a333      	add	r3, pc, #204	; (adr r3, 800a250 <floor+0xf0>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 f82c 	bl	80001e4 <__adddf3>
 800a18c:	2200      	movs	r2, #0
 800a18e:	2300      	movs	r3, #0
 800a190:	f7f6 fc6e 	bl	8000a70 <__aeabi_dcmpgt>
 800a194:	b138      	cbz	r0, 800a1a6 <floor+0x46>
 800a196:	2c00      	cmp	r4, #0
 800a198:	da53      	bge.n	800a242 <floor+0xe2>
 800a19a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a19e:	4325      	orrs	r5, r4
 800a1a0:	d052      	beq.n	800a248 <floor+0xe8>
 800a1a2:	4c2d      	ldr	r4, [pc, #180]	; (800a258 <floor+0xf8>)
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	e024      	b.n	800a1f6 <floor+0x96>
 800a1ac:	4f2b      	ldr	r7, [pc, #172]	; (800a25c <floor+0xfc>)
 800a1ae:	4137      	asrs	r7, r6
 800a1b0:	ea01 0307 	and.w	r3, r1, r7
 800a1b4:	4303      	orrs	r3, r0
 800a1b6:	d01e      	beq.n	800a1f6 <floor+0x96>
 800a1b8:	a325      	add	r3, pc, #148	; (adr r3, 800a250 <floor+0xf0>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 f811 	bl	80001e4 <__adddf3>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f7f6 fc53 	bl	8000a70 <__aeabi_dcmpgt>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d0eb      	beq.n	800a1a6 <floor+0x46>
 800a1ce:	2c00      	cmp	r4, #0
 800a1d0:	bfbe      	ittt	lt
 800a1d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a1d6:	4133      	asrlt	r3, r6
 800a1d8:	18e4      	addlt	r4, r4, r3
 800a1da:	ea24 0407 	bic.w	r4, r4, r7
 800a1de:	2500      	movs	r5, #0
 800a1e0:	e7e1      	b.n	800a1a6 <floor+0x46>
 800a1e2:	2e33      	cmp	r6, #51	; 0x33
 800a1e4:	dd0b      	ble.n	800a1fe <floor+0x9e>
 800a1e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a1ea:	d104      	bne.n	800a1f6 <floor+0x96>
 800a1ec:	ee10 2a10 	vmov	r2, s0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	f7f5 fff7 	bl	80001e4 <__adddf3>
 800a1f6:	ec41 0b10 	vmov	d0, r0, r1
 800a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800a202:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a206:	40df      	lsrs	r7, r3
 800a208:	4238      	tst	r0, r7
 800a20a:	d0f4      	beq.n	800a1f6 <floor+0x96>
 800a20c:	a310      	add	r3, pc, #64	; (adr r3, 800a250 <floor+0xf0>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f5 ffe7 	bl	80001e4 <__adddf3>
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	f7f6 fc29 	bl	8000a70 <__aeabi_dcmpgt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0c1      	beq.n	800a1a6 <floor+0x46>
 800a222:	2c00      	cmp	r4, #0
 800a224:	da0a      	bge.n	800a23c <floor+0xdc>
 800a226:	2e14      	cmp	r6, #20
 800a228:	d101      	bne.n	800a22e <floor+0xce>
 800a22a:	3401      	adds	r4, #1
 800a22c:	e006      	b.n	800a23c <floor+0xdc>
 800a22e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a232:	2301      	movs	r3, #1
 800a234:	40b3      	lsls	r3, r6
 800a236:	441d      	add	r5, r3
 800a238:	45a8      	cmp	r8, r5
 800a23a:	d8f6      	bhi.n	800a22a <floor+0xca>
 800a23c:	ea25 0507 	bic.w	r5, r5, r7
 800a240:	e7b1      	b.n	800a1a6 <floor+0x46>
 800a242:	2500      	movs	r5, #0
 800a244:	462c      	mov	r4, r5
 800a246:	e7ae      	b.n	800a1a6 <floor+0x46>
 800a248:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a24c:	e7ab      	b.n	800a1a6 <floor+0x46>
 800a24e:	bf00      	nop
 800a250:	8800759c 	.word	0x8800759c
 800a254:	7e37e43c 	.word	0x7e37e43c
 800a258:	bff00000 	.word	0xbff00000
 800a25c:	000fffff 	.word	0x000fffff

0800a260 <_init>:
 800a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a262:	bf00      	nop
 800a264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a266:	bc08      	pop	{r3}
 800a268:	469e      	mov	lr, r3
 800a26a:	4770      	bx	lr

0800a26c <_fini>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	bf00      	nop
 800a270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a272:	bc08      	pop	{r3}
 800a274:	469e      	mov	lr, r3
 800a276:	4770      	bx	lr
