
AMR_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009390  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009528  08009528  00019528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009720  08009720  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009728  08009728  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  20000010  0800973c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800973c  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102ec  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b8  00000000  00000000  0003036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00032628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b23  00000000  00000000  00033448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000283b  00000000  00000000  00033f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bcb  00000000  00000000  000367a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f242  00000000  00000000  00047371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004110  00000000  00000000  000d65b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000da6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009510 	.word	0x08009510

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08009510 	.word	0x08009510

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 b970 	b.w	8000e6c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14a      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0xe2>
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	b143      	cbz	r3, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc4:	f1c3 0220 	rsb	r2, r3, #32
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	fa20 f202 	lsr.w	r2, r0, r2
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd6:	fa1f f58c 	uxth.w	r5, ip
 8000bda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be8:	fb01 f005 	mul.w	r0, r1, r5
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x62>
 8000bf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bf8:	f080 811c 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000bfc:	4290      	cmp	r0, r2
 8000bfe:	f240 8119 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c02:	3902      	subs	r1, #2
 8000c04:	4462      	add	r2, ip
 8000c06:	1a12      	subs	r2, r2, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c16:	fb00 f505 	mul.w	r5, r0, r5
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x90>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x294>
 8000c2a:	42a5      	cmp	r5, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x294>
 8000c30:	4464      	add	r4, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11e      	cbz	r6, 8000c46 <__udivmoddi4+0xa2>
 8000c3e:	40dc      	lsrs	r4, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9c6 4300 	strd	r4, r3, [r6]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0xbc>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80ed 	beq.w	8000e2e <__udivmoddi4+0x28a>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d149      	bne.n	8000cfc <__udivmoddi4+0x158>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d302      	bcc.n	8000c72 <__udivmoddi4+0xce>
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	f200 80f8 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000c72:	1a84      	subs	r4, r0, r2
 8000c74:	eb65 0203 	sbc.w	r2, r5, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d0e2      	beq.n	8000c46 <__udivmoddi4+0xa2>
 8000c80:	e9c6 4700 	strd	r4, r7, [r6]
 8000c84:	e7df      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000c86:	b902      	cbnz	r2, 8000c8a <__udivmoddi4+0xe6>
 8000c88:	deff      	udf	#255	; 0xff
 8000c8a:	fab2 f382 	clz	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca8:	0c22      	lsrs	r2, r4, #16
 8000caa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cae:	fb0e f005 	mul.w	r0, lr, r5
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cba:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2b8>
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	1a12      	subs	r2, r2, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x14e>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x14c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2c2>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfa:	e79f      	b.n	8000c3c <__udivmoddi4+0x98>
 8000cfc:	f1c1 0720 	rsb	r7, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d12:	40fd      	lsrs	r5, r7
 8000d14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d18:	4323      	orrs	r3, r4
 8000d1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	fb09 5518 	mls	r5, r9, r8, r5
 8000d26:	0c1c      	lsrs	r4, r3, #16
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2b4>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2b4>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4464      	add	r4, ip
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	b29d      	uxth	r5, r3
 8000d58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2ac>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2ac>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	4464      	add	r4, ip
 8000d7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d82:	fba3 9502 	umull	r9, r5, r3, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46ae      	mov	lr, r5
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x29c>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x298>
 8000d94:	b156      	cbz	r6, 8000dac <__udivmoddi4+0x208>
 8000d96:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000da2:	40ca      	lsrs	r2, r1
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	f1c3 0120 	rsb	r1, r3, #32
 8000db8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc4:	409d      	lsls	r5, r3
 8000dc6:	432a      	orrs	r2, r5
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dde:	fb00 f50e 	mul.w	r5, r0, lr
 8000de2:	428d      	cmp	r5, r1
 8000de4:	fa04 f403 	lsl.w	r4, r4, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x258>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000df4:	428d      	cmp	r5, r1
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e04:	fb07 1115 	mls	r1, r7, r5, r1
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e10:	4291      	cmp	r1, r2
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x282>
 8000e14:	eb1c 0202 	adds.w	r2, ip, r2
 8000e18:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000e22:	3d02      	subs	r5, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a52      	subs	r2, r2, r1
 8000e28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0xfc>
 8000e2e:	4631      	mov	r1, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000e34:	4639      	mov	r1, r7
 8000e36:	e6e6      	b.n	8000c06 <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x90>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x282>
 8000e50:	462b      	mov	r3, r5
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x258>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e70a      	b.n	8000c7c <__udivmoddi4+0xd8>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x14e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <agv_run_motor>:

// Berdasarkan jarak roda ke titik pusat dalam meter
#define R_AMR	0.50
//#define R_AMR	0.46

void agv_run_motor(motor_t motor, int16_t speed){
 8000e70:	b084      	sub	sp, #16
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	f107 0c08 	add.w	ip, r7, #8
 8000e7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_SET);
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000e82:	2201      	movs	r2, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 fc65 	bl	8005754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_SET);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fc5f 	bl	8005754 <HAL_GPIO_WritePin>
	if(speed > 0){
 8000e96:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	dd62      	ble.n	8000f64 <agv_run_motor+0xf4>
		if(motor.channel_R == 1){
 8000e9e:	7e3b      	ldrb	r3, [r7, #24]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d109      	bne.n	8000eb8 <agv_run_motor+0x48>
			motor.tim_number_R->CCR1 = speed;
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 f969 	bl	8006188 <HAL_TIM_PWM_Start>
 8000eb6:	e025      	b.n	8000f04 <agv_run_motor+0x94>
		}
		else if(motor.channel_R == 2){
 8000eb8:	7e3b      	ldrb	r3, [r7, #24]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d109      	bne.n	8000ed2 <agv_run_motor+0x62>
			motor.tim_number_R->CCR2 = speed;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f005 f95c 	bl	8006188 <HAL_TIM_PWM_Start>
 8000ed0:	e018      	b.n	8000f04 <agv_run_motor+0x94>
		}
		else if(motor.channel_R == 3){
 8000ed2:	7e3b      	ldrb	r3, [r7, #24]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d109      	bne.n	8000eec <agv_run_motor+0x7c>
			motor.tim_number_R->CCR3 = speed;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 f94f 	bl	8006188 <HAL_TIM_PWM_Start>
 8000eea:	e00b      	b.n	8000f04 <agv_run_motor+0x94>
		}
		else if(motor.channel_R == 4){
 8000eec:	7e3b      	ldrb	r3, [r7, #24]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d108      	bne.n	8000f04 <agv_run_motor+0x94>
			motor.tim_number_R->CCR4 = speed;
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	210c      	movs	r1, #12
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 f942 	bl	8006188 <HAL_TIM_PWM_Start>
		}
		if(motor.channel_L == 1){
 8000f04:	7e7b      	ldrb	r3, [r7, #25]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <agv_run_motor+0xac>
			motor.tim_number_L->CCR1 = 0;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f005 f937 	bl	8006188 <HAL_TIM_PWM_Start>
		else if(motor.channel_L == 4){
			motor.tim_number_L->CCR4 = -speed;
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
		}
	}
}
 8000f1a:	e08d      	b.n	8001038 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 8000f1c:	7e7b      	ldrb	r3, [r7, #25]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d108      	bne.n	8000f34 <agv_run_motor+0xc4>
			motor.tim_number_L->CCR2 = 0;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 f92b 	bl	8006188 <HAL_TIM_PWM_Start>
}
 8000f32:	e081      	b.n	8001038 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8000f34:	7e7b      	ldrb	r3, [r7, #25]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d108      	bne.n	8000f4c <agv_run_motor+0xdc>
			motor.tim_number_L->CCR3 = 0;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2108      	movs	r1, #8
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 f91f 	bl	8006188 <HAL_TIM_PWM_Start>
}
 8000f4a:	e075      	b.n	8001038 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 8000f4c:	7e7b      	ldrb	r3, [r7, #25]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d172      	bne.n	8001038 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = 0;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2200      	movs	r2, #0
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	210c      	movs	r1, #12
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 f913 	bl	8006188 <HAL_TIM_PWM_Start>
}
 8000f62:	e069      	b.n	8001038 <agv_run_motor+0x1c8>
	else if(speed < 0){
 8000f64:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da65      	bge.n	8001038 <agv_run_motor+0x1c8>
		if(motor.channel_R == 1){
 8000f6c:	7e3b      	ldrb	r3, [r7, #24]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <agv_run_motor+0x114>
			motor.tim_number_R->CCR1 = 0;
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_1);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 f903 	bl	8006188 <HAL_TIM_PWM_Start>
 8000f82:	e022      	b.n	8000fca <agv_run_motor+0x15a>
		else if(motor.channel_R == 2){
 8000f84:	7e3b      	ldrb	r3, [r7, #24]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d108      	bne.n	8000f9c <agv_run_motor+0x12c>
			motor.tim_number_R->CCR2 = 0;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_2);
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2104      	movs	r1, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 f8f7 	bl	8006188 <HAL_TIM_PWM_Start>
 8000f9a:	e016      	b.n	8000fca <agv_run_motor+0x15a>
		else if(motor.channel_R == 3){
 8000f9c:	7e3b      	ldrb	r3, [r7, #24]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d108      	bne.n	8000fb4 <agv_run_motor+0x144>
			motor.tim_number_R->CCR3 = 0;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_3);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2108      	movs	r1, #8
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 f8eb 	bl	8006188 <HAL_TIM_PWM_Start>
 8000fb2:	e00a      	b.n	8000fca <agv_run_motor+0x15a>
		else if(motor.channel_R == 4){
 8000fb4:	7e3b      	ldrb	r3, [r7, #24]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d107      	bne.n	8000fca <agv_run_motor+0x15a>
			motor.tim_number_R->CCR4 = 0;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_R, TIM_CHANNEL_4);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	210c      	movs	r1, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 f8df 	bl	8006188 <HAL_TIM_PWM_Start>
		if(motor.channel_L == 1){
 8000fca:	7e7b      	ldrb	r3, [r7, #25]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10a      	bne.n	8000fe6 <agv_run_motor+0x176>
			motor.tim_number_L->CCR1 = -speed;
 8000fd0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000fd4:	425a      	negs	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_1);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 f8d2 	bl	8006188 <HAL_TIM_PWM_Start>
}
 8000fe4:	e028      	b.n	8001038 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 2){
 8000fe6:	7e7b      	ldrb	r3, [r7, #25]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d10a      	bne.n	8001002 <agv_run_motor+0x192>
			motor.tim_number_L->CCR2 = -speed;
 8000fec:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000ff0:	425a      	negs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_2);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 f8c4 	bl	8006188 <HAL_TIM_PWM_Start>
}
 8001000:	e01a      	b.n	8001038 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 3){
 8001002:	7e7b      	ldrb	r3, [r7, #25]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d10a      	bne.n	800101e <agv_run_motor+0x1ae>
			motor.tim_number_L->CCR3 = -speed;
 8001008:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800100c:	425a      	negs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_3);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2108      	movs	r1, #8
 8001016:	4618      	mov	r0, r3
 8001018:	f005 f8b6 	bl	8006188 <HAL_TIM_PWM_Start>
}
 800101c:	e00c      	b.n	8001038 <agv_run_motor+0x1c8>
		else if(motor.channel_L == 4){
 800101e:	7e7b      	ldrb	r3, [r7, #25]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d109      	bne.n	8001038 <agv_run_motor+0x1c8>
			motor.tim_number_L->CCR4 = -speed;
 8001024:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001028:	425a      	negs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	210c      	movs	r1, #12
 8001032:	4618      	mov	r0, r3
 8001034:	f005 f8a8 	bl	8006188 <HAL_TIM_PWM_Start>
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <agv_stop>:

void agv_stop(motor_t motor){
 8001044:	b084      	sub	sp, #16
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
 800104a:	f107 0c08 	add.w	ip, r7, #8
 800104e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_RESET);
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001056:	2200      	movs	r2, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fb7b 	bl	8005754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_RESET);
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001062:	2200      	movs	r2, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fb75 	bl	8005754 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001072:	b004      	add	sp, #16
 8001074:	4770      	bx	lr

08001076 <agv_stop_all>:

void agv_stop_all(motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8001076:	b084      	sub	sp, #16
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af0c      	add	r7, sp, #48	; 0x30
 800107e:	f107 0410 	add.w	r4, r7, #16
 8001082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_stop(motorA);
 8001086:	466d      	mov	r5, sp
 8001088:	f107 0420 	add.w	r4, r7, #32
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001094:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001098:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a2:	f7ff ffcf 	bl	8001044 <agv_stop>
	agv_stop(motorB);
 80010a6:	466d      	mov	r5, sp
 80010a8:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c2:	f7ff ffbf 	bl	8001044 <agv_stop>
	agv_stop(motorC);
 80010c6:	466d      	mov	r5, sp
 80010c8:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80010cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e2:	f7ff ffaf 	bl	8001044 <agv_stop>
	agv_stop(motorD);
 80010e6:	466d      	mov	r5, sp
 80010e8:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80010ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001102:	f7ff ff9f 	bl	8001044 <agv_stop>
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800110e:	b004      	add	sp, #16
 8001110:	4770      	bx	lr

08001112 <agv_reset_all>:

void agv_reset_all(motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8001112:	b084      	sub	sp, #16
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af0c      	add	r7, sp, #48	; 0x30
 800111a:	f107 0410 	add.w	r4, r7, #16
 800111e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_run_motor(motorA,0);
 8001122:	2300      	movs	r3, #0
 8001124:	930b      	str	r3, [sp, #44]	; 0x2c
 8001126:	466d      	mov	r5, sp
 8001128:	f107 0420 	add.w	r4, r7, #32
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001138:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	f7ff fe95 	bl	8000e70 <agv_run_motor>
	agv_run_motor(motorB,0);
 8001146:	2300      	movs	r3, #0
 8001148:	930b      	str	r3, [sp, #44]	; 0x2c
 800114a:	466d      	mov	r5, sp
 800114c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800115c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001160:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001166:	f7ff fe83 	bl	8000e70 <agv_run_motor>
	agv_run_motor(motorC,0);
 800116a:	2300      	movs	r3, #0
 800116c:	930b      	str	r3, [sp, #44]	; 0x2c
 800116e:	466d      	mov	r5, sp
 8001170:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001180:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001184:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118a:	f7ff fe71 	bl	8000e70 <agv_run_motor>
	agv_run_motor(motorD,0);
 800118e:	2300      	movs	r3, #0
 8001190:	930b      	str	r3, [sp, #44]	; 0x2c
 8001192:	466d      	mov	r5, sp
 8001194:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ae:	f7ff fe5f 	bl	8000e70 <agv_run_motor>
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80011ba:	b004      	add	sp, #16
 80011bc:	4770      	bx	lr

080011be <agv_encoder_start>:

void agv_encoder_start(encoder_t encoder, TIM_HandleTypeDef* tim,TIM_TypeDef* tim_number){
 80011be:	b084      	sub	sp, #16
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	f107 0c08 	add.w	ip, r7, #8
 80011c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	encoder.tim = tim;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	60bb      	str	r3, [r7, #8]
	encoder.tim_number = tim_number;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start_IT(tim, TIM_CHANNEL_ALL);
 80011d4:	213c      	movs	r1, #60	; 0x3c
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	f005 f92c 	bl	8006434 <HAL_TIM_Encoder_Start_IT>
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011e4:	b004      	add	sp, #16
 80011e6:	4770      	bx	lr

080011e8 <agv_kinematic_Sx>:
void agv_forward_kinematic(encoder_t encA, encoder_t encB, encoder_t encC, encoder_t encD, double yaw, kinematic_t kinematic){
	kinematic.Sx = ((-sin(DEG_TO_RAD(45+yaw))*encA.position) + (-sin(DEG_TO_RAD(135+yaw))*encB.position) + (-sin(DEG_TO_RAD(225+yaw))*encC.position) + (-sin(DEG_TO_RAD(315+yaw))*encD.position))*0.5;
	kinematic.Sy = ((cos(DEG_TO_RAD(45+yaw))*encA.position) + (cos(DEG_TO_RAD(135+yaw))*encB.position) + (cos(DEG_TO_RAD(225+yaw))*encC.position) + (cos(DEG_TO_RAD(315+yaw))*encD.position))*0.5;
	kinematic.St = (((2*encA.position)/R_AMR)+((2*encB.position)/R_AMR)+((2*encC.position)/R_AMR)+((2*encD.position)/R_AMR))*0.5;
}
double agv_kinematic_Sx(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b08a      	sub	sp, #40	; 0x28
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	61f8      	str	r0, [r7, #28]
 80011f2:	61b9      	str	r1, [r7, #24]
 80011f4:	617a      	str	r2, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	ed87 0b02 	vstr	d0, [r7, #8]
	double sx = ((-sin(DEG_TO_RAD(45+yaw))*pos_A) + (-sin(DEG_TO_RAD(135+yaw))*pos_B) + (-sin(DEG_TO_RAD(225+yaw))*pos_C) + (-sin(DEG_TO_RAD(315+yaw))*pos_D))*0.5;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b85      	ldr	r3, [pc, #532]	; (8001418 <agv_kinematic_Sx+0x230>)
 8001202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001206:	f7fe ffed 	bl	80001e4 <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	a379      	add	r3, pc, #484	; (adr r3, 80013f8 <agv_kinematic_Sx+0x210>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f99a 	bl	8000550 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b7c      	ldr	r3, [pc, #496]	; (800141c <agv_kinematic_Sx+0x234>)
 800122a:	f7ff fabb 	bl	80007a4 <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	ec43 2b17 	vmov	d7, r2, r3
 8001236:	eeb0 0a47 	vmov.f32	s0, s14
 800123a:	eef0 0a67 	vmov.f32	s1, s15
 800123e:	f007 f927 	bl	8008490 <sin>
 8001242:	ec53 2b10 	vmov	r2, r3, d0
 8001246:	4614      	mov	r4, r2
 8001248:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800124c:	69f8      	ldr	r0, [r7, #28]
 800124e:	f7ff f915 	bl	800047c <__aeabi_i2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff f979 	bl	8000550 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4614      	mov	r4, r2
 8001264:	461d      	mov	r5, r3
 8001266:	a366      	add	r3, pc, #408	; (adr r3, 8001400 <agv_kinematic_Sx+0x218>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001270:	f7fe ffb8 	bl	80001e4 <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a35e      	add	r3, pc, #376	; (adr r3, 80013f8 <agv_kinematic_Sx+0x210>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f965 	bl	8000550 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <agv_kinematic_Sx+0x234>)
 8001294:	f7ff fa86 	bl	80007a4 <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	ec43 2b17 	vmov	d7, r2, r3
 80012a0:	eeb0 0a47 	vmov.f32	s0, s14
 80012a4:	eef0 0a67 	vmov.f32	s1, s15
 80012a8:	f007 f8f2 	bl	8008490 <sin>
 80012ac:	ec53 2b10 	vmov	r2, r3, d0
 80012b0:	603a      	str	r2, [r7, #0]
 80012b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	69b8      	ldr	r0, [r7, #24]
 80012ba:	f7ff f8df 	bl	800047c <__aeabi_i2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012c6:	f7ff f943 	bl	8000550 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7fe ff87 	bl	80001e4 <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4614      	mov	r4, r2
 80012dc:	461d      	mov	r5, r3
 80012de:	a34a      	add	r3, pc, #296	; (adr r3, 8001408 <agv_kinematic_Sx+0x220>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012e8:	f7fe ff7c 	bl	80001e4 <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	a340      	add	r3, pc, #256	; (adr r3, 80013f8 <agv_kinematic_Sx+0x210>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f929 	bl	8000550 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <agv_kinematic_Sx+0x234>)
 800130c:	f7ff fa4a 	bl	80007a4 <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	ec43 2b17 	vmov	d7, r2, r3
 8001318:	eeb0 0a47 	vmov.f32	s0, s14
 800131c:	eef0 0a67 	vmov.f32	s1, s15
 8001320:	f007 f8b6 	bl	8008490 <sin>
 8001324:	ec53 2b10 	vmov	r2, r3, d0
 8001328:	4692      	mov	sl, r2
 800132a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff f8a4 	bl	800047c <__aeabi_i2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4650      	mov	r0, sl
 800133a:	4659      	mov	r1, fp
 800133c:	f7ff f908 	bl	8000550 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7fe ff4c 	bl	80001e4 <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4614      	mov	r4, r2
 8001352:	461d      	mov	r5, r3
 8001354:	a32e      	add	r3, pc, #184	; (adr r3, 8001410 <agv_kinematic_Sx+0x228>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135e:	f7fe ff41 	bl	80001e4 <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a323      	add	r3, pc, #140	; (adr r3, 80013f8 <agv_kinematic_Sx+0x210>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f8ee 	bl	8000550 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <agv_kinematic_Sx+0x234>)
 8001382:	f7ff fa0f 	bl	80007a4 <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	ec43 2b17 	vmov	d7, r2, r3
 800138e:	eeb0 0a47 	vmov.f32	s0, s14
 8001392:	eef0 0a67 	vmov.f32	s1, s15
 8001396:	f007 f87b 	bl	8008490 <sin>
 800139a:	ec53 2b10 	vmov	r2, r3, d0
 800139e:	4690      	mov	r8, r2
 80013a0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80013a4:	6938      	ldr	r0, [r7, #16]
 80013a6:	f7ff f869 	bl	800047c <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4640      	mov	r0, r8
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7ff f8cd 	bl	8000550 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7fe ff11 	bl	80001e4 <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <agv_kinematic_Sx+0x238>)
 80013d0:	f7ff f8be 	bl	8000550 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return sx;
 80013dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013e4:	eeb0 0a47 	vmov.f32	s0, s14
 80013e8:	eef0 0a67 	vmov.f32	s1, s15
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	54442d18 	.word	0x54442d18
 80013fc:	400921fb 	.word	0x400921fb
 8001400:	00000000 	.word	0x00000000
 8001404:	4060e000 	.word	0x4060e000
 8001408:	00000000 	.word	0x00000000
 800140c:	406c2000 	.word	0x406c2000
 8001410:	00000000 	.word	0x00000000
 8001414:	4073b000 	.word	0x4073b000
 8001418:	40468000 	.word	0x40468000
 800141c:	40668000 	.word	0x40668000
 8001420:	3fe00000 	.word	0x3fe00000
 8001424:	00000000 	.word	0x00000000

08001428 <agv_kinematic_Sy>:
double agv_kinematic_Sy(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 8001428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800142c:	b088      	sub	sp, #32
 800142e:	af00      	add	r7, sp, #0
 8001430:	6178      	str	r0, [r7, #20]
 8001432:	6139      	str	r1, [r7, #16]
 8001434:	60fa      	str	r2, [r7, #12]
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	ed87 0b00 	vstr	d0, [r7]
	double sy = ((cos(DEG_TO_RAD(45+yaw))*pos_A) + (cos(DEG_TO_RAD(135+yaw))*pos_B) + (cos(DEG_TO_RAD(225+yaw))*pos_C) + (cos(DEG_TO_RAD(315+yaw))*pos_D))*0.5;
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <agv_kinematic_Sy+0x218>)
 8001442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001446:	f7fe fecd 	bl	80001e4 <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	a373      	add	r3, pc, #460	; (adr r3, 8001620 <agv_kinematic_Sy+0x1f8>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f87a 	bl	8000550 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b76      	ldr	r3, [pc, #472]	; (8001644 <agv_kinematic_Sy+0x21c>)
 800146a:	f7ff f99b 	bl	80007a4 <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	ec43 2b17 	vmov	d7, r2, r3
 8001476:	eeb0 0a47 	vmov.f32	s0, s14
 800147a:	eef0 0a67 	vmov.f32	s1, s15
 800147e:	f006 ffb3 	bl	80083e8 <cos>
 8001482:	ec55 4b10 	vmov	r4, r5, d0
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7fe fff8 	bl	800047c <__aeabi_i2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7ff f85c 	bl	8000550 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	a361      	add	r3, pc, #388	; (adr r3, 8001628 <agv_kinematic_Sy+0x200>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014aa:	f7fe fe9b 	bl	80001e4 <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	a35a      	add	r3, pc, #360	; (adr r3, 8001620 <agv_kinematic_Sy+0x1f8>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f848 	bl	8000550 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <agv_kinematic_Sy+0x21c>)
 80014ce:	f7ff f969 	bl	80007a4 <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b17 	vmov	d7, r2, r3
 80014da:	eeb0 0a47 	vmov.f32	s0, s14
 80014de:	eef0 0a67 	vmov.f32	s1, s15
 80014e2:	f006 ff81 	bl	80083e8 <cos>
 80014e6:	ec59 8b10 	vmov	r8, r9, d0
 80014ea:	6938      	ldr	r0, [r7, #16]
 80014ec:	f7fe ffc6 	bl	800047c <__aeabi_i2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4640      	mov	r0, r8
 80014f6:	4649      	mov	r1, r9
 80014f8:	f7ff f82a 	bl	8000550 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fe6e 	bl	80001e4 <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	a347      	add	r3, pc, #284	; (adr r3, 8001630 <agv_kinematic_Sy+0x208>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800151a:	f7fe fe63 	bl	80001e4 <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	a33e      	add	r3, pc, #248	; (adr r3, 8001620 <agv_kinematic_Sy+0x1f8>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f810 	bl	8000550 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b41      	ldr	r3, [pc, #260]	; (8001644 <agv_kinematic_Sy+0x21c>)
 800153e:	f7ff f931 	bl	80007a4 <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	ec43 2b17 	vmov	d7, r2, r3
 800154a:	eeb0 0a47 	vmov.f32	s0, s14
 800154e:	eef0 0a67 	vmov.f32	s1, s15
 8001552:	f006 ff49 	bl	80083e8 <cos>
 8001556:	ec59 8b10 	vmov	r8, r9, d0
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7fe ff8e 	bl	800047c <__aeabi_i2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4640      	mov	r0, r8
 8001566:	4649      	mov	r1, r9
 8001568:	f7fe fff2 	bl	8000550 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe fe36 	bl	80001e4 <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	a32d      	add	r3, pc, #180	; (adr r3, 8001638 <agv_kinematic_Sy+0x210>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800158a:	f7fe fe2b 	bl	80001e4 <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	a322      	add	r3, pc, #136	; (adr r3, 8001620 <agv_kinematic_Sy+0x1f8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe ffd8 	bl	8000550 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <agv_kinematic_Sy+0x21c>)
 80015ae:	f7ff f8f9 	bl	80007a4 <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ec43 2b17 	vmov	d7, r2, r3
 80015ba:	eeb0 0a47 	vmov.f32	s0, s14
 80015be:	eef0 0a67 	vmov.f32	s1, s15
 80015c2:	f006 ff11 	bl	80083e8 <cos>
 80015c6:	ec59 8b10 	vmov	r8, r9, d0
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f7fe ff56 	bl	800047c <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4640      	mov	r0, r8
 80015d6:	4649      	mov	r1, r9
 80015d8:	f7fe ffba 	bl	8000550 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe fdfe 	bl	80001e4 <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <agv_kinematic_Sy+0x220>)
 80015f6:	f7fe ffab 	bl	8000550 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return sy;
 8001602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001606:	ec43 2b17 	vmov	d7, r2, r3
}
 800160a:	eeb0 0a47 	vmov.f32	s0, s14
 800160e:	eef0 0a67 	vmov.f32	s1, s15
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	54442d18 	.word	0x54442d18
 8001624:	400921fb 	.word	0x400921fb
 8001628:	00000000 	.word	0x00000000
 800162c:	4060e000 	.word	0x4060e000
 8001630:	00000000 	.word	0x00000000
 8001634:	406c2000 	.word	0x406c2000
 8001638:	00000000 	.word	0x00000000
 800163c:	4073b000 	.word	0x4073b000
 8001640:	40468000 	.word	0x40468000
 8001644:	40668000 	.word	0x40668000
 8001648:	3fe00000 	.word	0x3fe00000

0800164c <agv_kinematic_St>:
double agv_kinematic_St(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6178      	str	r0, [r7, #20]
 8001654:	6139      	str	r1, [r7, #16]
 8001656:	60fa      	str	r2, [r7, #12]
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	ed87 0b00 	vstr	d0, [r7]
	double st = (((pos_A)/R_AMR)+((pos_B)/R_AMR)+((pos_C)/R_AMR)+((pos_D)/R_AMR))*0.5;
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7fe ff0c 	bl	800047c <__aeabi_i2d>
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <agv_kinematic_St+0xc0>)
 800166a:	f7ff f89b 	bl	80007a4 <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	6938      	ldr	r0, [r7, #16]
 8001678:	f7fe ff00 	bl	800047c <__aeabi_i2d>
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <agv_kinematic_St+0xc0>)
 8001682:	f7ff f88f 	bl	80007a4 <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe fda9 	bl	80001e4 <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4614      	mov	r4, r2
 8001698:	461d      	mov	r5, r3
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7fe feee 	bl	800047c <__aeabi_i2d>
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <agv_kinematic_St+0xc0>)
 80016a6:	f7ff f87d 	bl	80007a4 <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fd97 	bl	80001e4 <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4614      	mov	r4, r2
 80016bc:	461d      	mov	r5, r3
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe fedc 	bl	800047c <__aeabi_i2d>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <agv_kinematic_St+0xc0>)
 80016ca:	f7ff f86b 	bl	80007a4 <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7fe fd85 	bl	80001e4 <__adddf3>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <agv_kinematic_St+0xc0>)
 80016e8:	f7fe ff32 	bl	8000550 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return st;
 80016f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001700:	eef0 0a67 	vmov.f32	s1, s15
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	3fe00000 	.word	0x3fe00000

08001710 <agv_inverse_kinematic>:

///////////////////////////////////////////// INVERSE KINEMATICS ///////////////////////////////////////////////////

void agv_inverse_kinematic(double sx, double sy, double st, double yaw, motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8001710:	b084      	sub	sp, #16
 8001712:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001716:	b0ca      	sub	sp, #296	; 0x128
 8001718:	af38      	add	r7, sp, #224	; 0xe0
 800171a:	ed87 0b08 	vstr	d0, [r7, #32]
 800171e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001722:	ed87 2b04 	vstr	d2, [r7, #16]
 8001726:	ed87 3b02 	vstr	d3, [r7, #8]
 800172a:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 800172e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	double V1 = (-sin(DEG_TO_RAD(45+yaw))*sx) + (cos(DEG_TO_RAD(45+yaw))*sy) + (R_AMR*st);
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4bd8      	ldr	r3, [pc, #864]	; (8001a98 <agv_inverse_kinematic+0x388>)
 8001738:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800173c:	f7fe fd52 	bl	80001e4 <__adddf3>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	a3cb      	add	r3, pc, #812	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe feff 	bl	8000550 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4bcf      	ldr	r3, [pc, #828]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 8001760:	f7ff f820 	bl	80007a4 <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	ec43 2b17 	vmov	d7, r2, r3
 800176c:	eeb0 0a47 	vmov.f32	s0, s14
 8001770:	eef0 0a67 	vmov.f32	s1, s15
 8001774:	f006 fe8c 	bl	8008490 <sin>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4614      	mov	r4, r2
 800177e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fee1 	bl	8000550 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	461d      	mov	r5, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4bbf      	ldr	r3, [pc, #764]	; (8001a98 <agv_inverse_kinematic+0x388>)
 800179c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017a0:	f7fe fd20 	bl	80001e4 <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	a3b2      	add	r3, pc, #712	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fecd 	bl	8000550 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4bb6      	ldr	r3, [pc, #728]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 80017c4:	f7fe ffee 	bl	80007a4 <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	ec43 2b17 	vmov	d7, r2, r3
 80017d0:	eeb0 0a47 	vmov.f32	s0, s14
 80017d4:	eef0 0a67 	vmov.f32	s1, s15
 80017d8:	f006 fe06 	bl	80083e8 <cos>
 80017dc:	ec51 0b10 	vmov	r0, r1, d0
 80017e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017e4:	f7fe feb4 	bl	8000550 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fcf8 	bl	80001e4 <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <agv_inverse_kinematic+0x390>)
 8001802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001806:	f7fe fea3 	bl	8000550 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fce7 	bl	80001e4 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double V2 = (-sin(DEG_TO_RAD(135+yaw))*sx) + (cos(DEG_TO_RAD(135+yaw))*sy) + (R_AMR*st);
 800181e:	a398      	add	r3, pc, #608	; (adr r3, 8001a80 <agv_inverse_kinematic+0x370>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001828:	f7fe fcdc 	bl	80001e4 <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a390      	add	r3, pc, #576	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fe89 	bl	8000550 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 800184c:	f7fe ffaa 	bl	80007a4 <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	ec43 2b17 	vmov	d7, r2, r3
 8001858:	eeb0 0a47 	vmov.f32	s0, s14
 800185c:	eef0 0a67 	vmov.f32	s1, s15
 8001860:	f006 fe16 	bl	8008490 <sin>
 8001864:	ec53 2b10 	vmov	r2, r3, d0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001878:	f7fe fe6a 	bl	8000550 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	461d      	mov	r5, r3
 8001884:	a37e      	add	r3, pc, #504	; (adr r3, 8001a80 <agv_inverse_kinematic+0x370>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800188e:	f7fe fca9 	bl	80001e4 <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	a377      	add	r3, pc, #476	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fe56 	bl	8000550 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 80018b2:	f7fe ff77 	bl	80007a4 <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	ec43 2b17 	vmov	d7, r2, r3
 80018be:	eeb0 0a47 	vmov.f32	s0, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	f006 fd8f 	bl	80083e8 <cos>
 80018ca:	ec51 0b10 	vmov	r0, r1, d0
 80018ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d2:	f7fe fe3d 	bl	8000550 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fc81 	bl	80001e4 <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <agv_inverse_kinematic+0x390>)
 80018f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018f4:	f7fe fe2c 	bl	8000550 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fc70 	bl	80001e4 <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double V3 = (-sin(DEG_TO_RAD(225+yaw))*sx) + (cos(DEG_TO_RAD(225+yaw))*sy) + (R_AMR*st);
 800190c:	a35e      	add	r3, pc, #376	; (adr r3, 8001a88 <agv_inverse_kinematic+0x378>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001916:	f7fe fc65 	bl	80001e4 <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	a355      	add	r3, pc, #340	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe12 	bl	8000550 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 800193a:	f7fe ff33 	bl	80007a4 <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	ec43 2b17 	vmov	d7, r2, r3
 8001946:	eeb0 0a47 	vmov.f32	s0, s14
 800194a:	eef0 0a67 	vmov.f32	s1, s15
 800194e:	f006 fd9f 	bl	8008490 <sin>
 8001952:	ec53 2b10 	vmov	r2, r3, d0
 8001956:	4692      	mov	sl, r2
 8001958:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800195c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001960:	4650      	mov	r0, sl
 8001962:	4659      	mov	r1, fp
 8001964:	f7fe fdf4 	bl	8000550 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4614      	mov	r4, r2
 800196e:	461d      	mov	r5, r3
 8001970:	a345      	add	r3, pc, #276	; (adr r3, 8001a88 <agv_inverse_kinematic+0x378>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800197a:	f7fe fc33 	bl	80001e4 <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	a33c      	add	r3, pc, #240	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fde0 	bl	8000550 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 800199e:	f7fe ff01 	bl	80007a4 <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b17 	vmov	d7, r2, r3
 80019aa:	eeb0 0a47 	vmov.f32	s0, s14
 80019ae:	eef0 0a67 	vmov.f32	s1, s15
 80019b2:	f006 fd19 	bl	80083e8 <cos>
 80019b6:	ec51 0b10 	vmov	r0, r1, d0
 80019ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fc0b 	bl	80001e4 <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4614      	mov	r4, r2
 80019d4:	461d      	mov	r5, r3
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <agv_inverse_kinematic+0x390>)
 80019dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019e0:	f7fe fdb6 	bl	8000550 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fbfa 	bl	80001e4 <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double V4 = (-sin(DEG_TO_RAD(315+yaw))*sx) + (cos(DEG_TO_RAD(315+yaw))*sy) + (R_AMR*st);
 80019f8:	a325      	add	r3, pc, #148	; (adr r3, 8001a90 <agv_inverse_kinematic+0x380>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a02:	f7fe fbef 	bl	80001e4 <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	a31a      	add	r3, pc, #104	; (adr r3, 8001a78 <agv_inverse_kinematic+0x368>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fd9c 	bl	8000550 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <agv_inverse_kinematic+0x38c>)
 8001a26:	f7fe febd 	bl	80007a4 <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	ec43 2b17 	vmov	d7, r2, r3
 8001a32:	eeb0 0a47 	vmov.f32	s0, s14
 8001a36:	eef0 0a67 	vmov.f32	s1, s15
 8001a3a:	f006 fd29 	bl	8008490 <sin>
 8001a3e:	ec53 2b10 	vmov	r2, r3, d0
 8001a42:	4690      	mov	r8, r2
 8001a44:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001a48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	4649      	mov	r1, r9
 8001a50:	f7fe fd7e 	bl	8000550 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	a30c      	add	r3, pc, #48	; (adr r3, 8001a90 <agv_inverse_kinematic+0x380>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a66:	f7fe fbbd 	bl	80001e4 <__adddf3>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	e017      	b.n	8001aa4 <agv_inverse_kinematic+0x394>
 8001a74:	f3af 8000 	nop.w
 8001a78:	54442d18 	.word	0x54442d18
 8001a7c:	400921fb 	.word	0x400921fb
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4060e000 	.word	0x4060e000
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	406c2000 	.word	0x406c2000
 8001a90:	00000000 	.word	0x00000000
 8001a94:	4073b000 	.word	0x4073b000
 8001a98:	40468000 	.word	0x40468000
 8001a9c:	40668000 	.word	0x40668000
 8001aa0:	3fe00000 	.word	0x3fe00000
 8001aa4:	a362      	add	r3, pc, #392	; (adr r3, 8001c30 <agv_inverse_kinematic+0x520>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fd51 	bl	8000550 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <agv_inverse_kinematic+0x518>)
 8001abc:	f7fe fe72 	bl	80007a4 <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	ec43 2b17 	vmov	d7, r2, r3
 8001ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8001acc:	eef0 0a67 	vmov.f32	s1, s15
 8001ad0:	f006 fc8a 	bl	80083e8 <cos>
 8001ad4:	ec51 0b10 	vmov	r0, r1, d0
 8001ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001adc:	f7fe fd38 	bl	8000550 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	f7fe fb7c 	bl	80001e4 <__adddf3>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <agv_inverse_kinematic+0x51c>)
 8001afa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afe:	f7fe fd27 	bl	8000550 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fb6b 	bl	80001e4 <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	agv_reset_all(motorA, motorB, motorC, motorD);
 8001b16:	ad29      	add	r5, sp, #164	; 0xa4
 8001b18:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b30:	ad1a      	add	r5, sp, #104	; 0x68
 8001b32:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b4a:	ad0b      	add	r5, sp, #44	; 0x2c
 8001b4c:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8001b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b64:	466d      	mov	r5, sp
 8001b66:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b80:	f7ff fac7 	bl	8001112 <agv_reset_all>
	agv_speed_to_pwm(motorA,V1);
 8001b84:	466d      	mov	r5, sp
 8001b86:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001ba4:	f000 f848 	bl	8001c38 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorB,V2);
 8001ba8:	466d      	mov	r5, sp
 8001baa:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001bbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001bc8:	f000 f836 	bl	8001c38 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorC,V3);
 8001bcc:	466d      	mov	r5, sp
 8001bce:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bda:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bde:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001be2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001bec:	f000 f824 	bl	8001c38 <agv_speed_to_pwm>
	agv_speed_to_pwm(motorD,V4);
 8001bf0:	466d      	mov	r5, sp
 8001bf2:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8001bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c06:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001c10:	f000 f812 	bl	8001c38 <agv_speed_to_pwm>
}
 8001c14:	bf00      	nop
 8001c16:	3748      	adds	r7, #72	; 0x48
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c1e:	b004      	add	sp, #16
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	f3af 8000 	nop.w
 8001c28:	40668000 	.word	0x40668000
 8001c2c:	3fe00000 	.word	0x3fe00000
 8001c30:	54442d18 	.word	0x54442d18
 8001c34:	400921fb 	.word	0x400921fb

08001c38 <agv_speed_to_pwm>:
	double k_wheel = 3.14*100; // 100 -> diameter
	return encoder.position*(7/k_wheel); // 7->PPR
}

// in mm
void agv_speed_to_pwm(motor_t motor, double speed){
 8001c38:	b084      	sub	sp, #16
 8001c3a:	b5b0      	push	{r4, r5, r7, lr}
 8001c3c:	b08e      	sub	sp, #56	; 0x38
 8001c3e:	af0c      	add	r7, sp, #48	; 0x30
 8001c40:	f107 0418 	add.w	r4, r7, #24
 8001c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c48:	ed87 0b00 	vstr	d0, [r7]
	// Maximum 2,617 m/s -> PWM 1000
	if(speed < 2617){
 8001c4c:	a322      	add	r3, pc, #136	; (adr r3, 8001cd8 <agv_speed_to_pwm+0xa0>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c56:	f7fe feed 	bl	8000a34 <__aeabi_dcmplt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <agv_speed_to_pwm+0x6a>
		agv_run_motor(motor, (speed*(5*M_PI/60)));
 8001c60:	a31f      	add	r3, pc, #124	; (adr r3, 8001ce0 <agv_speed_to_pwm+0xa8>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c6a:	f7fe fc71 	bl	8000550 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff05 	bl	8000a84 <__aeabi_d2iz>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c80:	466d      	mov	r5, sp
 8001c82:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c9c:	f7ff f8e8 	bl	8000e70 <agv_run_motor>
	}
	else{
		agv_run_motor(motor, (2617*(5*M_PI/60)));
	}
}
 8001ca0:	e012      	b.n	8001cc8 <agv_speed_to_pwm+0x90>
		agv_run_motor(motor, (2617*(5*M_PI/60)));
 8001ca2:	f240 23ad 	movw	r3, #685	; 0x2ad
 8001ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ca8:	466d      	mov	r5, sp
 8001caa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc4:	f7ff f8d4 	bl	8000e70 <agv_run_motor>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001cd2:	b004      	add	sp, #16
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	40a47200 	.word	0x40a47200
 8001ce0:	382d7365 	.word	0x382d7365
 8001ce4:	3fd0c152 	.word	0x3fd0c152

08001ce8 <PIDController_Init>:
 */


#include "PID_Driver.h"

void PIDController_Init(PIDController *pid) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8001d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d32:	edc7 0a01 	vstr	s1, [r7, #4]

	// Error signal
    float error = setpoint - measurement;
 8001d36:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d42:	edc7 7a05 	vstr	s15, [r7, #20]

	// Proportional
    float proportional = pid->Kp * error;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d54:	edc7 7a04 	vstr	s15, [r7, #16]

	// Integral
    pid->integrator = pid->integrator + 0.5 * pid->Ki * pid->T_sample * (error + pid->prevError);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fb9f 	bl	80004a0 <__aeabi_f2d>
 8001d62:	4680      	mov	r8, r0
 8001d64:	4689      	mov	r9, r1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fb98 	bl	80004a0 <__aeabi_f2d>
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <PIDController_Update+0x26c>)
 8001d76:	f7fe fbeb 	bl	8000550 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4692      	mov	sl, r2
 8001d80:	469b      	mov	fp, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fb8a 	bl	80004a0 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4650      	mov	r0, sl
 8001d92:	4659      	mov	r1, fp
 8001d94:	f7fe fbdc 	bl	8000550 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4692      	mov	sl, r2
 8001d9e:	469b      	mov	fp, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	ee17 0a90 	vmov	r0, s15
 8001db2:	f7fe fb75 	bl	80004a0 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4650      	mov	r0, sl
 8001dbc:	4659      	mov	r1, fp
 8001dbe:	f7fe fbc7 	bl	8000550 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	4649      	mov	r1, r9
 8001dca:	f7fe fa0b 	bl	80001e4 <__adddf3>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fe7d 	bl	8000ad4 <__aeabi_d2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24

	// Anti-wind-up via integrator clamping
    if (pid->integrator > pid->limMaxInt) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd04      	ble.n	8001e00 <PIDController_Update+0xdc>

        pid->integrator = pid->limMaxInt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
 8001dfe:	e00e      	b.n	8001e1e <PIDController_Update+0xfa>

    } else if (pid->integrator < pid->limMinInt) {
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d503      	bpl.n	8001e1e <PIDController_Update+0xfa>

        pid->integrator = pid->limMinInt;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

    }

	// Derivative (band-limited differentiator)
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb3c 	bl	80004a0 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	f7fe f9da 	bl	80001e4 <__adddf3>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4690      	mov	r8, r2
 8001e36:	4699      	mov	r9, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e46:	ee17 0a90 	vmov	r0, s15
 8001e4a:	f7fe fb29 	bl	80004a0 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4640      	mov	r0, r8
 8001e54:	4649      	mov	r1, r9
 8001e56:	f7fe fb7b 	bl	8000550 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4690      	mov	r8, r2
 8001e60:	4699      	mov	r9, r3
                        + (2.0 * pid->tau - pid->T_sample) * pid->differentiator)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb1a 	bl	80004a0 <__aeabi_f2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	f7fe f9b8 	bl	80001e4 <__adddf3>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4692      	mov	sl, r2
 8001e7a:	469b      	mov	fp, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb0d 	bl	80004a0 <__aeabi_f2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	f7fe f9a7 	bl	80001e0 <__aeabi_dsub>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4692      	mov	sl, r2
 8001e98:	469b      	mov	fp, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fafe 	bl	80004a0 <__aeabi_f2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4650      	mov	r0, sl
 8001eaa:	4659      	mov	r1, fp
 8001eac:	f7fe fb50 	bl	8000550 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4640      	mov	r0, r8
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	f7fe f994 	bl	80001e4 <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
                        / (2.0 * pid->tau + pid->T_sample);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fae8 	bl	80004a0 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	f7fe f986 	bl	80001e4 <__adddf3>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4690      	mov	r8, r2
 8001ede:	4699      	mov	r9, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fadb 	bl	80004a0 <__aeabi_f2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4640      	mov	r0, r8
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	f7fe f977 	bl	80001e4 <__adddf3>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4620      	mov	r0, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	f7fe fc51 	bl	80007a4 <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7fe fde3 	bl	8000ad4 <__aeabi_d2f>
 8001f0e:	4602      	mov	r2, r0
    pid->differentiator = -(2.0 * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c


	// Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd04      	ble.n	8001f52 <PIDController_Update+0x22e>

        pid->out = pid->limMax;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f50:	e00e      	b.n	8001f70 <PIDController_Update+0x24c>

    } else if (pid->out < pid->limMin) {
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	d503      	bpl.n	8001f70 <PIDController_Update+0x24c>

        pid->out = pid->limMin;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34

    }

	// Store error and measurement for later use
    pid->prevError       = error;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30

	// Return controller output
    return pid->out;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	ee07 3a90 	vmov	s15, r3
}
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f90:	3fe00000 	.word	0x3fe00000

08001f94 <komunikasi_ctrl_init>:
// ALL
static uint8_t rxbuf_get_anywhere[19];

//******************************************** COMMUNICATION TO CONTROL **********************************************//

void komunikasi_ctrl_init(UART_HandleTypeDef* uart_handler){
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	huart_ctrl = uart_handler;
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <komunikasi_ctrl_init+0x1c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000002c 	.word	0x2000002c

08001fb4 <rx_ctrl_start_get>:

	if(HAL_UART_Transmit(huart_ctrl, kinematic, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

void rx_ctrl_start_get(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_get_ctrl, 19);
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <rx_ctrl_start_get+0x18>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2213      	movs	r2, #19
 8001fbe:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <rx_ctrl_start_get+0x1c>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f005 f931 	bl	8007228 <HAL_UART_Receive_DMA>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000002c 	.word	0x2000002c
 8001fd0:	20000030 	.word	0x20000030

08001fd4 <rx_ctrl_get>:

void rx_ctrl_get(com_ctrl_get_t* get){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 19; i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e370      	b.n	80026c4 <rx_ctrl_get+0x6f0>
		if((rxbuf_get_ctrl[0] == 0xA5) && (rxbuf_get_ctrl[1] == 0x5A)){
 8001fe2:	4b99      	ldr	r3, [pc, #612]	; (8002248 <rx_ctrl_get+0x274>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2ba5      	cmp	r3, #165	; 0xa5
 8001fe8:	f040 8361 	bne.w	80026ae <rx_ctrl_get+0x6da>
 8001fec:	4b96      	ldr	r3, [pc, #600]	; (8002248 <rx_ctrl_get+0x274>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	2b5a      	cmp	r3, #90	; 0x5a
 8001ff2:	f040 835c 	bne.w	80026ae <rx_ctrl_get+0x6da>

			// Check for ping
			if(rxbuf_get_ctrl[2] == 0x01){
 8001ff6:	4b94      	ldr	r3, [pc, #592]	; (8002248 <rx_ctrl_get+0x274>)
 8001ff8:	789b      	ldrb	r3, [r3, #2]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d104      	bne.n	8002008 <rx_ctrl_get+0x34>
				get->cmd = 0x01;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
			if(rxbuf_get_ctrl[2] == 0x01){
 8002006:	e359      	b.n	80026bc <rx_ctrl_get+0x6e8>
			}

			// Check for "Move" Instruction Given from Sensor
			else if(rxbuf_get_ctrl[2] == 0x15){
 8002008:	4b8f      	ldr	r3, [pc, #572]	; (8002248 <rx_ctrl_get+0x274>)
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	2b15      	cmp	r3, #21
 800200e:	f040 80fb 	bne.w	8002208 <rx_ctrl_get+0x234>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002018:	488c      	ldr	r0, [pc, #560]	; (800224c <rx_ctrl_get+0x278>)
 800201a:	f003 fb9b 	bl	8005754 <HAL_GPIO_WritePin>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3303      	adds	r3, #3
 8002022:	4a89      	ldr	r2, [pc, #548]	; (8002248 <rx_ctrl_get+0x274>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	da10      	bge.n	800204e <rx_ctrl_get+0x7a>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3303      	adds	r3, #3
 8002030:	4a85      	ldr	r2, [pc, #532]	; (8002248 <rx_ctrl_get+0x274>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	b21a      	sxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3304      	adds	r3, #4
 800203c:	4982      	ldr	r1, [pc, #520]	; (8002248 <rx_ctrl_get+0x274>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	b21b      	sxth	r3, r3
 8002042:	4313      	orrs	r3, r2
 8002044:	b21a      	sxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 800204c:	e00f      	b.n	800206e <rx_ctrl_get+0x9a>
				else get->x_pos = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3303      	adds	r3, #3
 8002052:	4a7d      	ldr	r2, [pc, #500]	; (8002248 <rx_ctrl_get+0x274>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	b21a      	sxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3304      	adds	r3, #4
 800205e:	497a      	ldr	r1, [pc, #488]	; (8002248 <rx_ctrl_get+0x274>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3305      	adds	r3, #5
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <rx_ctrl_get+0x274>)
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	b25b      	sxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	da10      	bge.n	800209e <rx_ctrl_get+0xca>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3305      	adds	r3, #5
 8002080:	4a71      	ldr	r2, [pc, #452]	; (8002248 <rx_ctrl_get+0x274>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b21a      	sxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3306      	adds	r3, #6
 800208c:	496e      	ldr	r1, [pc, #440]	; (8002248 <rx_ctrl_get+0x274>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	b21b      	sxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b21a      	sxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800209c:	e00f      	b.n	80020be <rx_ctrl_get+0xea>
				else get->y_pos = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3305      	adds	r3, #5
 80020a2:	4a69      	ldr	r2, [pc, #420]	; (8002248 <rx_ctrl_get+0x274>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3306      	adds	r3, #6
 80020ae:	4966      	ldr	r1, [pc, #408]	; (8002248 <rx_ctrl_get+0x274>)
 80020b0:	5ccb      	ldrb	r3, [r1, r3]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->t_pos = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3307      	adds	r3, #7
 80020c2:	4a61      	ldr	r2, [pc, #388]	; (8002248 <rx_ctrl_get+0x274>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da10      	bge.n	80020ee <rx_ctrl_get+0x11a>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3307      	adds	r3, #7
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <rx_ctrl_get+0x274>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3308      	adds	r3, #8
 80020dc:	495a      	ldr	r1, [pc, #360]	; (8002248 <rx_ctrl_get+0x274>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80020ec:	e00f      	b.n	800210e <rx_ctrl_get+0x13a>
				else get->t_pos = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3307      	adds	r3, #7
 80020f2:	4a55      	ldr	r2, [pc, #340]	; (8002248 <rx_ctrl_get+0x274>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3308      	adds	r3, #8
 80020fe:	4952      	ldr	r1, [pc, #328]	; (8002248 <rx_ctrl_get+0x274>)
 8002100:	5ccb      	ldrb	r3, [r1, r3]
 8002102:	b21b      	sxth	r3, r3
 8002104:	4313      	orrs	r3, r2
 8002106:	b21a      	sxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->x_vel = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3309      	adds	r3, #9
 8002112:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <rx_ctrl_get+0x274>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	b25b      	sxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	da10      	bge.n	800213e <rx_ctrl_get+0x16a>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3309      	adds	r3, #9
 8002120:	4a49      	ldr	r2, [pc, #292]	; (8002248 <rx_ctrl_get+0x274>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	b21a      	sxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	330a      	adds	r3, #10
 800212c:	4946      	ldr	r1, [pc, #280]	; (8002248 <rx_ctrl_get+0x274>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800213c:	e00f      	b.n	800215e <rx_ctrl_get+0x18a>
				else get->x_vel = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3309      	adds	r3, #9
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <rx_ctrl_get+0x274>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b21a      	sxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	330a      	adds	r3, #10
 800214e:	493e      	ldr	r1, [pc, #248]	; (8002248 <rx_ctrl_get+0x274>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21a      	sxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

				if((rxbuf_get_ctrl[i+11] & 0x80)) get->y_vel = ((rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12])-(65536);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	330b      	adds	r3, #11
 8002162:	4a39      	ldr	r2, [pc, #228]	; (8002248 <rx_ctrl_get+0x274>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	da10      	bge.n	800218e <rx_ctrl_get+0x1ba>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	330b      	adds	r3, #11
 8002170:	4a35      	ldr	r2, [pc, #212]	; (8002248 <rx_ctrl_get+0x274>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	b21a      	sxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	330c      	adds	r3, #12
 800217c:	4932      	ldr	r1, [pc, #200]	; (8002248 <rx_ctrl_get+0x274>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	b21b      	sxth	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 800218c:	e00f      	b.n	80021ae <rx_ctrl_get+0x1da>
				else get->y_vel = (rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12];
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	330b      	adds	r3, #11
 8002192:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <rx_ctrl_get+0x274>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	330c      	adds	r3, #12
 800219e:	492a      	ldr	r1, [pc, #168]	; (8002248 <rx_ctrl_get+0x274>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

				if((rxbuf_get_ctrl[i+13] & 0x80)) get->t_vel = ((rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14])-(65536);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	330d      	adds	r3, #13
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <rx_ctrl_get+0x274>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da10      	bge.n	80021de <rx_ctrl_get+0x20a>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	330d      	adds	r3, #13
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <rx_ctrl_get+0x274>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	330e      	adds	r3, #14
 80021cc:	491e      	ldr	r1, [pc, #120]	; (8002248 <rx_ctrl_get+0x274>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80021dc:	e00f      	b.n	80021fe <rx_ctrl_get+0x22a>
				else get->t_vel = (rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14];
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	330d      	adds	r3, #13
 80021e2:	4a19      	ldr	r2, [pc, #100]	; (8002248 <rx_ctrl_get+0x274>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	330e      	adds	r3, #14
 80021ee:	4916      	ldr	r1, [pc, #88]	; (8002248 <rx_ctrl_get+0x274>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4

				get->cmd = STANDBY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
			if(rxbuf_get_ctrl[2] == 0x01){
 8002206:	e259      	b.n	80026bc <rx_ctrl_get+0x6e8>

			}

			// Check for "Move" Instruction Given from Sensor
			else if(rxbuf_get_ctrl[i+2] == 0x12){
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3302      	adds	r3, #2
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <rx_ctrl_get+0x274>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	2b12      	cmp	r3, #18
 8002212:	f040 808a 	bne.w	800232a <rx_ctrl_get+0x356>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3303      	adds	r3, #3
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <rx_ctrl_get+0x274>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	b25b      	sxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	da15      	bge.n	8002250 <rx_ctrl_get+0x27c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3303      	adds	r3, #3
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <rx_ctrl_get+0x274>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3304      	adds	r3, #4
 8002234:	4904      	ldr	r1, [pc, #16]	; (8002248 <rx_ctrl_get+0x274>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b21a      	sxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8002244:	e014      	b.n	8002270 <rx_ctrl_get+0x29c>
 8002246:	bf00      	nop
 8002248:	20000030 	.word	0x20000030
 800224c:	40020800 	.word	0x40020800
				else get->x_pos = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3303      	adds	r3, #3
 8002254:	4a94      	ldr	r2, [pc, #592]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b21a      	sxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3304      	adds	r3, #4
 8002260:	4991      	ldr	r1, [pc, #580]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	b21b      	sxth	r3, r3
 8002266:	4313      	orrs	r3, r2
 8002268:	b21a      	sxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3305      	adds	r3, #5
 8002274:	4a8c      	ldr	r2, [pc, #560]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	da10      	bge.n	80022a0 <rx_ctrl_get+0x2cc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3305      	adds	r3, #5
 8002282:	4a89      	ldr	r2, [pc, #548]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	b21a      	sxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3306      	adds	r3, #6
 800228e:	4986      	ldr	r1, [pc, #536]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800229e:	e00f      	b.n	80022c0 <rx_ctrl_get+0x2ec>
				else get->y_pos = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3305      	adds	r3, #5
 80022a4:	4a80      	ldr	r2, [pc, #512]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3306      	adds	r3, #6
 80022b0:	497d      	ldr	r1, [pc, #500]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->orientation = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3307      	adds	r3, #7
 80022c4:	4a78      	ldr	r2, [pc, #480]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da10      	bge.n	80022f0 <rx_ctrl_get+0x31c>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3307      	adds	r3, #7
 80022d2:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b21a      	sxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3308      	adds	r3, #8
 80022de:	4972      	ldr	r1, [pc, #456]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b21a      	sxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 80022ee:	e00f      	b.n	8002310 <rx_ctrl_get+0x33c>
				else get->orientation = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3307      	adds	r3, #7
 80022f4:	4a6c      	ldr	r2, [pc, #432]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3308      	adds	r3, #8
 8002300:	4969      	ldr	r1, [pc, #420]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b21a      	sxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

				get->step = rxbuf_get_ctrl[i+10];
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	330a      	adds	r3, #10
 8002314:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	b21a      	sxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8

				get->cmd = STANDBY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
			if(rxbuf_get_ctrl[2] == 0x01){
 8002328:	e1c8      	b.n	80026bc <rx_ctrl_get+0x6e8>

			}

			// Check for BNO08X Sensor
			else if(rxbuf_get_ctrl[i+2] == 0x02){
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3302      	adds	r3, #2
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002330:	5cd3      	ldrb	r3, [r2, r3]
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 80f7 	bne.w	8002526 <rx_ctrl_get+0x552>

				if((rxbuf_get_ctrl[i+3] & 0x80)) get->yaw = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3303      	adds	r3, #3
 800233c:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	b25b      	sxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	da10      	bge.n	8002368 <rx_ctrl_get+0x394>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3303      	adds	r3, #3
 800234a:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800234c:	5cd3      	ldrb	r3, [r2, r3]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b21a      	sxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3304      	adds	r3, #4
 8002356:	4954      	ldr	r1, [pc, #336]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21a      	sxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 8002366:	e00f      	b.n	8002388 <rx_ctrl_get+0x3b4>
				else get->yaw = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3303      	adds	r3, #3
 800236c:	4a4e      	ldr	r2, [pc, #312]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21a      	sxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3304      	adds	r3, #4
 8002378:	494b      	ldr	r1, [pc, #300]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21a      	sxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->pitch = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3305      	adds	r3, #5
 800238c:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	b25b      	sxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	da10      	bge.n	80023b8 <rx_ctrl_get+0x3e4>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3305      	adds	r3, #5
 800239a:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3306      	adds	r3, #6
 80023a6:	4940      	ldr	r1, [pc, #256]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 80023b6:	e00f      	b.n	80023d8 <rx_ctrl_get+0x404>
				else get->pitch = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3305      	adds	r3, #5
 80023bc:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3306      	adds	r3, #6
 80023c8:	4937      	ldr	r1, [pc, #220]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->roll = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3307      	adds	r3, #7
 80023dc:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da10      	bge.n	8002408 <rx_ctrl_get+0x434>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3307      	adds	r3, #7
 80023ea:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3308      	adds	r3, #8
 80023f6:	492c      	ldr	r1, [pc, #176]	; (80024a8 <rx_ctrl_get+0x4d4>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b21a      	sxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8002406:	e00f      	b.n	8002428 <rx_ctrl_get+0x454>
				else get->roll = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3307      	adds	r3, #7
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3308      	adds	r3, #8
 8002418:	4923      	ldr	r1, [pc, #140]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b21a      	sxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->x_acceleration = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3309      	adds	r3, #9
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	b25b      	sxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	da10      	bge.n	8002458 <rx_ctrl_get+0x484>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3309      	adds	r3, #9
 800243a:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	b21a      	sxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	330a      	adds	r3, #10
 8002446:	4918      	ldr	r1, [pc, #96]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21a      	sxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 8002456:	e00f      	b.n	8002478 <rx_ctrl_get+0x4a4>
				else get->x_acceleration = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3309      	adds	r3, #9
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	b21a      	sxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	330a      	adds	r3, #10
 8002468:	490f      	ldr	r1, [pc, #60]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21a      	sxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda

				if((rxbuf_get_ctrl[i+11] & 0x80)) get->y_acceleration = ((rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12])-(65536);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	330b      	adds	r3, #11
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	da12      	bge.n	80024ac <rx_ctrl_get+0x4d8>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	330b      	adds	r3, #11
 800248a:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <rx_ctrl_get+0x4d4>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <rx_ctrl_get+0x4d4>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b21a      	sxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
 80024a6:	e011      	b.n	80024cc <rx_ctrl_get+0x4f8>
 80024a8:	20000030 	.word	0x20000030
				else get->y_acceleration = (rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12];
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	330b      	adds	r3, #11
 80024b0:	4a8c      	ldr	r2, [pc, #560]	; (80026e4 <rx_ctrl_get+0x710>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	330c      	adds	r3, #12
 80024bc:	4989      	ldr	r1, [pc, #548]	; (80026e4 <rx_ctrl_get+0x710>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc

				if((rxbuf_get_ctrl[i+13] & 0x80)) get->z_acceleration = ((rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14])-(65536);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	330d      	adds	r3, #13
 80024d0:	4a84      	ldr	r2, [pc, #528]	; (80026e4 <rx_ctrl_get+0x710>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da10      	bge.n	80024fc <rx_ctrl_get+0x528>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	330d      	adds	r3, #13
 80024de:	4a81      	ldr	r2, [pc, #516]	; (80026e4 <rx_ctrl_get+0x710>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	330e      	adds	r3, #14
 80024ea:	497e      	ldr	r1, [pc, #504]	; (80026e4 <rx_ctrl_get+0x710>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80024fa:	e00f      	b.n	800251c <rx_ctrl_get+0x548>
				else get->z_acceleration = (rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14];
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	330d      	adds	r3, #13
 8002500:	4a78      	ldr	r2, [pc, #480]	; (80026e4 <rx_ctrl_get+0x710>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	b21a      	sxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	330e      	adds	r3, #14
 800250c:	4975      	ldr	r1, [pc, #468]	; (80026e4 <rx_ctrl_get+0x710>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	b21b      	sxth	r3, r3
 8002512:	4313      	orrs	r3, r2
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

				get->cmd = STANDBY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
			if(rxbuf_get_ctrl[2] == 0x01){
 8002524:	e0ca      	b.n	80026bc <rx_ctrl_get+0x6e8>
			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_ctrl[i+2] == 0x13){
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3302      	adds	r3, #2
 800252a:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <rx_ctrl_get+0x710>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	2b13      	cmp	r3, #19
 8002530:	f040 80c4 	bne.w	80026bc <rx_ctrl_get+0x6e8>
				get->astar_id = (rxbuf_get_ctrl[i+3]);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3303      	adds	r3, #3
 8002538:	4a6a      	ldr	r2, [pc, #424]	; (80026e4 <rx_ctrl_get+0x710>)
 800253a:	5cd2      	ldrb	r2, [r2, r3]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				get->astar_length = (rxbuf_get_ctrl[i+4]);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3304      	adds	r3, #4
 8002546:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <rx_ctrl_get+0x710>)
 8002548:	5cd2      	ldrb	r2, [r2, r3]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-4] = (rxbuf_get_ctrl[i+5]);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1d5a      	adds	r2, r3, #5
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3303      	adds	r3, #3
 8002558:	4962      	ldr	r1, [pc, #392]	; (80026e4 <rx_ctrl_get+0x710>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	4619      	mov	r1, r3
 800255e:	460b      	mov	r3, r1
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3b04      	subs	r3, #4
 8002566:	495f      	ldr	r1, [pc, #380]	; (80026e4 <rx_ctrl_get+0x710>)
 8002568:	5c89      	ldrb	r1, [r1, r2]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-4] = (rxbuf_get_ctrl[i+6]);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1d9a      	adds	r2, r3, #6
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3303      	adds	r3, #3
 8002576:	495b      	ldr	r1, [pc, #364]	; (80026e4 <rx_ctrl_get+0x710>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	4619      	mov	r1, r3
 800257c:	460b      	mov	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3b04      	subs	r3, #4
 8002584:	4957      	ldr	r1, [pc, #348]	; (80026e4 <rx_ctrl_get+0x710>)
 8002586:	5c89      	ldrb	r1, [r1, r2]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	460a      	mov	r2, r1
 800258e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-3] = (rxbuf_get_ctrl[i+7]);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1dda      	adds	r2, r3, #7
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3303      	adds	r3, #3
 800259a:	4952      	ldr	r1, [pc, #328]	; (80026e4 <rx_ctrl_get+0x710>)
 800259c:	5ccb      	ldrb	r3, [r1, r3]
 800259e:	4619      	mov	r1, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3b03      	subs	r3, #3
 80025a8:	494e      	ldr	r1, [pc, #312]	; (80026e4 <rx_ctrl_get+0x710>)
 80025aa:	5c89      	ldrb	r1, [r1, r2]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-3] = (rxbuf_get_ctrl[i+8]);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f103 0208 	add.w	r2, r3, #8
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3303      	adds	r3, #3
 80025ba:	494a      	ldr	r1, [pc, #296]	; (80026e4 <rx_ctrl_get+0x710>)
 80025bc:	5ccb      	ldrb	r3, [r1, r3]
 80025be:	4619      	mov	r1, r3
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3b03      	subs	r3, #3
 80025c8:	4946      	ldr	r1, [pc, #280]	; (80026e4 <rx_ctrl_get+0x710>)
 80025ca:	5c89      	ldrb	r1, [r1, r2]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	460a      	mov	r2, r1
 80025d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-2] = (rxbuf_get_ctrl[i+9]);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f103 0209 	add.w	r2, r3, #9
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3303      	adds	r3, #3
 80025e0:	4940      	ldr	r1, [pc, #256]	; (80026e4 <rx_ctrl_get+0x710>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	4619      	mov	r1, r3
 80025e6:	460b      	mov	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3b02      	subs	r3, #2
 80025ee:	493d      	ldr	r1, [pc, #244]	; (80026e4 <rx_ctrl_get+0x710>)
 80025f0:	5c89      	ldrb	r1, [r1, r2]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-2] = (rxbuf_get_ctrl[i+10]);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f103 020a 	add.w	r2, r3, #10
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3303      	adds	r3, #3
 8002600:	4938      	ldr	r1, [pc, #224]	; (80026e4 <rx_ctrl_get+0x710>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	4619      	mov	r1, r3
 8002606:	460b      	mov	r3, r1
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3b02      	subs	r3, #2
 800260e:	4935      	ldr	r1, [pc, #212]	; (80026e4 <rx_ctrl_get+0x710>)
 8002610:	5c89      	ldrb	r1, [r1, r2]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	460a      	mov	r2, r1
 8002618:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-1] = (rxbuf_get_ctrl[i+11]);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f103 020b 	add.w	r2, r3, #11
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3303      	adds	r3, #3
 8002626:	492f      	ldr	r1, [pc, #188]	; (80026e4 <rx_ctrl_get+0x710>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	4619      	mov	r1, r3
 800262c:	460b      	mov	r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3b01      	subs	r3, #1
 8002634:	492b      	ldr	r1, [pc, #172]	; (80026e4 <rx_ctrl_get+0x710>)
 8002636:	5c89      	ldrb	r1, [r1, r2]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-1] = (rxbuf_get_ctrl[i+12]);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f103 020c 	add.w	r2, r3, #12
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3303      	adds	r3, #3
 8002646:	4927      	ldr	r1, [pc, #156]	; (80026e4 <rx_ctrl_get+0x710>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	4619      	mov	r1, r3
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3b01      	subs	r3, #1
 8002654:	4923      	ldr	r1, [pc, #140]	; (80026e4 <rx_ctrl_get+0x710>)
 8002656:	5c89      	ldrb	r1, [r1, r2]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	460a      	mov	r2, r1
 800265e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-0] = (rxbuf_get_ctrl[i+13]);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f103 020d 	add.w	r2, r3, #13
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3303      	adds	r3, #3
 800266c:	491d      	ldr	r1, [pc, #116]	; (80026e4 <rx_ctrl_get+0x710>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	4619      	mov	r1, r3
 8002672:	460b      	mov	r3, r1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	491a      	ldr	r1, [pc, #104]	; (80026e4 <rx_ctrl_get+0x710>)
 800267a:	5c89      	ldrb	r1, [r1, r2]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-0] = (rxbuf_get_ctrl[i+14]);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f103 020e 	add.w	r2, r3, #14
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3303      	adds	r3, #3
 800268a:	4916      	ldr	r1, [pc, #88]	; (80026e4 <rx_ctrl_get+0x710>)
 800268c:	5ccb      	ldrb	r3, [r1, r3]
 800268e:	4619      	mov	r1, r3
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	4913      	ldr	r1, [pc, #76]	; (80026e4 <rx_ctrl_get+0x710>)
 8002698:	5c89      	ldrb	r1, [r1, r2]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->cmd = STANDBY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
			if(rxbuf_get_ctrl[2] == 0x01){
 80026ac:	e006      	b.n	80026bc <rx_ctrl_get+0x6e8>
			}

		}
		else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <rx_ctrl_get+0x714>)
 80026b6:	f003 f84d 	bl	8005754 <HAL_GPIO_WritePin>
 80026ba:	e000      	b.n	80026be <rx_ctrl_get+0x6ea>
			if(rxbuf_get_ctrl[2] == 0x01){
 80026bc:	bf00      	nop
	for(int i = 0; i < 19; i++){
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	f77f ac8b 	ble.w	8001fe2 <rx_ctrl_get+0xe>
		}
	}
	HAL_UART_Receive_DMA(huart_ctrl, rxbuf_get_ctrl, 19);
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <rx_ctrl_get+0x718>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2213      	movs	r2, #19
 80026d2:	4904      	ldr	r1, [pc, #16]	; (80026e4 <rx_ctrl_get+0x710>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 fda7 	bl	8007228 <HAL_UART_Receive_DMA>
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000030 	.word	0x20000030
 80026e8:	40020800 	.word	0x40020800
 80026ec:	2000002c 	.word	0x2000002c

080026f0 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4ab8      	ldr	r2, [pc, #736]	; (80029e0 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d113      	bne.n	800272a <HAL_TIM_IC_CaptureCallback+0x3a>
		encoder_A.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	4ab6      	ldr	r2, [pc, #728]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800270a:	6093      	str	r3, [r2, #8]
		encoder_A.counts 		= (int16_t)encoder_A.counter;
 800270c:	4bb5      	ldr	r3, [pc, #724]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	b21a      	sxth	r2, r3
 8002712:	4bb4      	ldr	r3, [pc, #720]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002714:	819a      	strh	r2, [r3, #12]
		encoder_A.position	= encoder_A.counts/4;
 8002716:	4bb3      	ldr	r3, [pc, #716]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002718:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da00      	bge.n	8002722 <HAL_TIM_IC_CaptureCallback+0x32>
 8002720:	3303      	adds	r3, #3
 8002722:	109b      	asrs	r3, r3, #2
 8002724:	b21a      	sxth	r2, r3
 8002726:	4baf      	ldr	r3, [pc, #700]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002728:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM2){
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d113      	bne.n	800275c <HAL_TIM_IC_CaptureCallback+0x6c>
		encoder_B.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	4aab      	ldr	r2, [pc, #684]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800273c:	6093      	str	r3, [r2, #8]
		encoder_B.counts 		= (int16_t)encoder_B.counter;
 800273e:	4baa      	ldr	r3, [pc, #680]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	b21a      	sxth	r2, r3
 8002744:	4ba8      	ldr	r3, [pc, #672]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8002746:	819a      	strh	r2, [r3, #12]
		encoder_B.position	= encoder_B.counts/4;
 8002748:	4ba7      	ldr	r3, [pc, #668]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800274a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	da00      	bge.n	8002754 <HAL_TIM_IC_CaptureCallback+0x64>
 8002752:	3303      	adds	r3, #3
 8002754:	109b      	asrs	r3, r3, #2
 8002756:	b21a      	sxth	r2, r3
 8002758:	4ba3      	ldr	r3, [pc, #652]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800275a:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM4){
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4aa2      	ldr	r2, [pc, #648]	; (80029ec <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d113      	bne.n	800278e <HAL_TIM_IC_CaptureCallback+0x9e>
		encoder_C.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	4aa0      	ldr	r2, [pc, #640]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800276e:	6093      	str	r3, [r2, #8]
		encoder_C.counts 		= (int16_t)encoder_C.counter;
 8002770:	4b9f      	ldr	r3, [pc, #636]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	b21a      	sxth	r2, r3
 8002776:	4b9e      	ldr	r3, [pc, #632]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002778:	819a      	strh	r2, [r3, #12]
		encoder_C.position	= encoder_C.counts/4;
 800277a:	4b9d      	ldr	r3, [pc, #628]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800277c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da00      	bge.n	8002786 <HAL_TIM_IC_CaptureCallback+0x96>
 8002784:	3303      	adds	r3, #3
 8002786:	109b      	asrs	r3, r3, #2
 8002788:	b21a      	sxth	r2, r3
 800278a:	4b99      	ldr	r3, [pc, #612]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800278c:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM5){
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a98      	ldr	r2, [pc, #608]	; (80029f4 <HAL_TIM_IC_CaptureCallback+0x304>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d113      	bne.n	80027c0 <HAL_TIM_IC_CaptureCallback+0xd0>
		encoder_D.counter  	= __HAL_TIM_GET_COUNTER(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	4a96      	ldr	r2, [pc, #600]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80027a0:	6093      	str	r3, [r2, #8]
		encoder_D.counts 		= (int16_t)encoder_D.counter;
 80027a2:	4b95      	ldr	r3, [pc, #596]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	4b93      	ldr	r3, [pc, #588]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80027aa:	819a      	strh	r2, [r3, #12]
		encoder_D.position	= encoder_D.counts/4;
 80027ac:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80027ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da00      	bge.n	80027b8 <HAL_TIM_IC_CaptureCallback+0xc8>
 80027b6:	3303      	adds	r3, #3
 80027b8:	109b      	asrs	r3, r3, #2
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	4b8e      	ldr	r3, [pc, #568]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80027be:	81da      	strh	r2, [r3, #14]
	}
	// jarak dalam satuan mm dan mm/s
	kinematic.S1 = -encoder_A.position*PULSE_TO_DIST;
 80027c0:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80027c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80027c6:	425b      	negs	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fe57 	bl	800047c <__aeabi_i2d>
 80027ce:	a380      	add	r3, pc, #512	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd febc 	bl	8000550 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4987      	ldr	r1, [pc, #540]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80027de:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	kinematic.S2 = -encoder_B.position*PULSE_TO_DIST;
 80027e2:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80027e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80027e8:	425b      	negs	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe46 	bl	800047c <__aeabi_i2d>
 80027f0:	a377      	add	r3, pc, #476	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd feab 	bl	8000550 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	497f      	ldr	r1, [pc, #508]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002800:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	kinematic.S3 = -encoder_C.position*PULSE_TO_DIST;
 8002804:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800280a:	425b      	negs	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe35 	bl	800047c <__aeabi_i2d>
 8002812:	a36f      	add	r3, pc, #444	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd fe9a 	bl	8000550 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4976      	ldr	r1, [pc, #472]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002822:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	kinematic.S4 = -encoder_D.position*PULSE_TO_DIST;
 8002826:	4b74      	ldr	r3, [pc, #464]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 8002828:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800282c:	425b      	negs	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe24 	bl	800047c <__aeabi_i2d>
 8002834:	a366      	add	r3, pc, #408	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd fe89 	bl	8000550 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	496e      	ldr	r1, [pc, #440]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002844:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	kinematic.V1 = -encoder_A.speed*PULSE_TO_DIST;
 8002848:	4b66      	ldr	r3, [pc, #408]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	425b      	negs	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe14 	bl	800047c <__aeabi_i2d>
 8002854:	a35e      	add	r3, pc, #376	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fe79 	bl	8000550 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4966      	ldr	r1, [pc, #408]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002864:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kinematic.V2 = -encoder_B.speed*PULSE_TO_DIST;
 8002868:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	425b      	negs	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe04 	bl	800047c <__aeabi_i2d>
 8002874:	a356      	add	r3, pc, #344	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	f7fd fe69 	bl	8000550 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	495e      	ldr	r1, [pc, #376]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002884:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	kinematic.V3 = -encoder_C.speed*PULSE_TO_DIST;
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	425b      	negs	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fdf4 	bl	800047c <__aeabi_i2d>
 8002894:	a34e      	add	r3, pc, #312	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fe59 	bl	8000550 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4956      	ldr	r1, [pc, #344]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80028a4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	kinematic.V4 = -encoder_D.speed*PULSE_TO_DIST;
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	425b      	negs	r3, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fde4 	bl	800047c <__aeabi_i2d>
 80028b4:	a346      	add	r3, pc, #280	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f7fd fe49 	bl	8000550 <__aeabi_dmul>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	494e      	ldr	r1, [pc, #312]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80028c4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	kinematic.Sx = agv_kinematic_Sx(-encoder_A.position*PULSE_TO_DIST,-encoder_B.position*PULSE_TO_DIST,-encoder_C.position*PULSE_TO_DIST,-encoder_D.position*PULSE_TO_DIST, 0);
 80028c8:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80028ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80028ce:	425b      	negs	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fdd3 	bl	800047c <__aeabi_i2d>
 80028d6:	a33e      	add	r3, pc, #248	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd fe38 	bl	8000550 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f8cc 	bl	8000a84 <__aeabi_d2iz>
 80028ec:	4604      	mov	r4, r0
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80028f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80028f4:	425b      	negs	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fdc0 	bl	800047c <__aeabi_i2d>
 80028fc:	a334      	add	r3, pc, #208	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fe25 	bl	8000550 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe f8b9 	bl	8000a84 <__aeabi_d2iz>
 8002912:	4605      	mov	r5, r0
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002916:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800291a:	425b      	negs	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fdad 	bl	800047c <__aeabi_i2d>
 8002922:	a32b      	add	r3, pc, #172	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fe12 	bl	8000550 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f7fe f8a6 	bl	8000a84 <__aeabi_d2iz>
 8002938:	4606      	mov	r6, r0
 800293a:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 800293c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002940:	425b      	negs	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fd9a 	bl	800047c <__aeabi_i2d>
 8002948:	a321      	add	r3, pc, #132	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fdff 	bl	8000550 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f893 	bl	8000a84 <__aeabi_d2iz>
 800295e:	4603      	mov	r3, r0
 8002960:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 80029d8 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8002964:	4632      	mov	r2, r6
 8002966:	4629      	mov	r1, r5
 8002968:	4620      	mov	r0, r4
 800296a:	f7fe fc3d 	bl	80011e8 <agv_kinematic_Sx>
 800296e:	eeb0 7a40 	vmov.f32	s14, s0
 8002972:	eef0 7a60 	vmov.f32	s15, s1
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002978:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	kinematic.Sy = agv_kinematic_Sy(-encoder_A.position*PULSE_TO_DIST,-encoder_B.position*PULSE_TO_DIST,-encoder_C.position*PULSE_TO_DIST,-encoder_D.position*PULSE_TO_DIST, 0);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800297e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002982:	425b      	negs	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fd79 	bl	800047c <__aeabi_i2d>
 800298a:	a311      	add	r3, pc, #68	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fdde 	bl	8000550 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f872 	bl	8000a84 <__aeabi_d2iz>
 80029a0:	4604      	mov	r4, r0
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80029a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80029a8:	425b      	negs	r3, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fd66 	bl	800047c <__aeabi_i2d>
 80029b0:	a307      	add	r3, pc, #28	; (adr r3, 80029d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fdcb 	bl	8000550 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f85f 	bl	8000a84 <__aeabi_d2iz>
 80029c6:	4605      	mov	r5, r0
 80029c8:	e01a      	b.n	8002a00 <HAL_TIM_IC_CaptureCallback+0x310>
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	6872b021 	.word	0x6872b021
 80029d4:	40466d91 	.word	0x40466d91
	...
 80029e0:	40010000 	.word	0x40010000
 80029e4:	200006a8 	.word	0x200006a8
 80029e8:	200006c0 	.word	0x200006c0
 80029ec:	40000800 	.word	0x40000800
 80029f0:	200006d8 	.word	0x200006d8
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	200006f0 	.word	0x200006f0
 80029fc:	20000348 	.word	0x20000348
 8002a00:	4bcd      	ldr	r3, [pc, #820]	; (8002d38 <HAL_TIM_IC_CaptureCallback+0x648>)
 8002a02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a06:	425b      	negs	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd37 	bl	800047c <__aeabi_i2d>
 8002a0e:	a3c6      	add	r3, pc, #792	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fd9c 	bl	8000550 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe f830 	bl	8000a84 <__aeabi_d2iz>
 8002a24:	4606      	mov	r6, r0
 8002a26:	4bc5      	ldr	r3, [pc, #788]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x64c>)
 8002a28:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd24 	bl	800047c <__aeabi_i2d>
 8002a34:	a3bc      	add	r3, pc, #752	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fd89 	bl	8000550 <__aeabi_dmul>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe f81d 	bl	8000a84 <__aeabi_d2iz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 8002d30 <HAL_TIM_IC_CaptureCallback+0x640>
 8002a50:	4632      	mov	r2, r6
 8002a52:	4629      	mov	r1, r5
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7fe fce7 	bl	8001428 <agv_kinematic_Sy>
 8002a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a5e:	eef0 7a60 	vmov.f32	s15, s1
 8002a62:	4bb7      	ldr	r3, [pc, #732]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x650>)
 8002a64:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	kinematic.St = agv_kinematic_St(-encoder_A.position*PULSE_TO_DIST,-encoder_B.position*PULSE_TO_DIST,-encoder_C.position*PULSE_TO_DIST,-encoder_D.position*PULSE_TO_DIST, 0);
 8002a68:	4bb6      	ldr	r3, [pc, #728]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x654>)
 8002a6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a6e:	425b      	negs	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd03 	bl	800047c <__aeabi_i2d>
 8002a76:	a3ac      	add	r3, pc, #688	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fd68 	bl	8000550 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fd fffc 	bl	8000a84 <__aeabi_d2iz>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	4bae      	ldr	r3, [pc, #696]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x658>)
 8002a90:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a94:	425b      	negs	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fcf0 	bl	800047c <__aeabi_i2d>
 8002a9c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fd55 	bl	8000550 <__aeabi_dmul>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fd ffe9 	bl	8000a84 <__aeabi_d2iz>
 8002ab2:	4605      	mov	r5, r0
 8002ab4:	4ba0      	ldr	r3, [pc, #640]	; (8002d38 <HAL_TIM_IC_CaptureCallback+0x648>)
 8002ab6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002aba:	425b      	negs	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fcdd 	bl	800047c <__aeabi_i2d>
 8002ac2:	a399      	add	r3, pc, #612	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fd42 	bl	8000550 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fd ffd6 	bl	8000a84 <__aeabi_d2iz>
 8002ad8:	4606      	mov	r6, r0
 8002ada:	4b98      	ldr	r3, [pc, #608]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x64c>)
 8002adc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fcca 	bl	800047c <__aeabi_i2d>
 8002ae8:	a38f      	add	r3, pc, #572	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd2f 	bl	8000550 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fd ffc3 	bl	8000a84 <__aeabi_d2iz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8002d30 <HAL_TIM_IC_CaptureCallback+0x640>
 8002b04:	4632      	mov	r2, r6
 8002b06:	4629      	mov	r1, r5
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7fe fd9f 	bl	800164c <agv_kinematic_St>
 8002b0e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b12:	eef0 7a60 	vmov.f32	s15, s1
 8002b16:	4b8a      	ldr	r3, [pc, #552]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x650>)
 8002b18:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	kinematic.Vx = agv_kinematic_Sx(-encoder_A.speed*PULSE_TO_DIST,-encoder_B.speed*PULSE_TO_DIST,-encoder_C.speed*PULSE_TO_DIST,-encoder_D.speed*PULSE_TO_DIST, 0);
 8002b1c:	4b89      	ldr	r3, [pc, #548]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x654>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	425b      	negs	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fcaa 	bl	800047c <__aeabi_i2d>
 8002b28:	a37f      	add	r3, pc, #508	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fd0f 	bl	8000550 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fd ffa3 	bl	8000a84 <__aeabi_d2iz>
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x658>)
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	425b      	negs	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc98 	bl	800047c <__aeabi_i2d>
 8002b4c:	a376      	add	r3, pc, #472	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fcfd 	bl	8000550 <__aeabi_dmul>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7fd ff91 	bl	8000a84 <__aeabi_d2iz>
 8002b62:	4605      	mov	r5, r0
 8002b64:	4b74      	ldr	r3, [pc, #464]	; (8002d38 <HAL_TIM_IC_CaptureCallback+0x648>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	425b      	negs	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fc86 	bl	800047c <__aeabi_i2d>
 8002b70:	a36d      	add	r3, pc, #436	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fceb 	bl	8000550 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ff7f 	bl	8000a84 <__aeabi_d2iz>
 8002b86:	4606      	mov	r6, r0
 8002b88:	4b6c      	ldr	r3, [pc, #432]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x64c>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fc74 	bl	800047c <__aeabi_i2d>
 8002b94:	a364      	add	r3, pc, #400	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fcd9 	bl	8000550 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fd ff6d 	bl	8000a84 <__aeabi_d2iz>
 8002baa:	4603      	mov	r3, r0
 8002bac:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8002d30 <HAL_TIM_IC_CaptureCallback+0x640>
 8002bb0:	4632      	mov	r2, r6
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7fe fb17 	bl	80011e8 <agv_kinematic_Sx>
 8002bba:	eeb0 7a40 	vmov.f32	s14, s0
 8002bbe:	eef0 7a60 	vmov.f32	s15, s1
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x650>)
 8002bc4:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	kinematic.Vy = agv_kinematic_Sy(-encoder_A.speed*PULSE_TO_DIST,-encoder_B.speed*PULSE_TO_DIST,-encoder_C.speed*PULSE_TO_DIST,-encoder_D.speed*PULSE_TO_DIST, 0);
 8002bc8:	4b5e      	ldr	r3, [pc, #376]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x654>)
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	425b      	negs	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fc54 	bl	800047c <__aeabi_i2d>
 8002bd4:	a354      	add	r3, pc, #336	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fcb9 	bl	8000550 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f7fd ff4d 	bl	8000a84 <__aeabi_d2iz>
 8002bea:	4604      	mov	r4, r0
 8002bec:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x658>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	425b      	negs	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc42 	bl	800047c <__aeabi_i2d>
 8002bf8:	a34b      	add	r3, pc, #300	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fca7 	bl	8000550 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ff3b 	bl	8000a84 <__aeabi_d2iz>
 8002c0e:	4605      	mov	r5, r0
 8002c10:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_TIM_IC_CaptureCallback+0x648>)
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	425b      	negs	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc30 	bl	800047c <__aeabi_i2d>
 8002c1c:	a342      	add	r3, pc, #264	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f7fd fc95 	bl	8000550 <__aeabi_dmul>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7fd ff29 	bl	8000a84 <__aeabi_d2iz>
 8002c32:	4606      	mov	r6, r0
 8002c34:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x64c>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fc1e 	bl	800047c <__aeabi_i2d>
 8002c40:	a339      	add	r3, pc, #228	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fc83 	bl	8000550 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd ff17 	bl	8000a84 <__aeabi_d2iz>
 8002c56:	4603      	mov	r3, r0
 8002c58:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8002d30 <HAL_TIM_IC_CaptureCallback+0x640>
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	4629      	mov	r1, r5
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7fe fbe1 	bl	8001428 <agv_kinematic_Sy>
 8002c66:	eeb0 7a40 	vmov.f32	s14, s0
 8002c6a:	eef0 7a60 	vmov.f32	s15, s1
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x650>)
 8002c70:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	kinematic.Vt = agv_kinematic_St(-encoder_A.speed*PULSE_TO_DIST,-encoder_B.speed*PULSE_TO_DIST,-encoder_C.speed*PULSE_TO_DIST,-encoder_D.speed*PULSE_TO_DIST, 0);
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_TIM_IC_CaptureCallback+0x654>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	425b      	negs	r3, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fbfe 	bl	800047c <__aeabi_i2d>
 8002c80:	a329      	add	r3, pc, #164	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fc63 	bl	8000550 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd fef7 	bl	8000a84 <__aeabi_d2iz>
 8002c96:	4604      	mov	r4, r0
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x658>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fbec 	bl	800047c <__aeabi_i2d>
 8002ca4:	a320      	add	r3, pc, #128	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fc51 	bl	8000550 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fd fee5 	bl	8000a84 <__aeabi_d2iz>
 8002cba:	4605      	mov	r5, r0
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_TIM_IC_CaptureCallback+0x648>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	425b      	negs	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fbda 	bl	800047c <__aeabi_i2d>
 8002cc8:	a317      	add	r3, pc, #92	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fc3f 	bl	8000550 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd fed3 	bl	8000a84 <__aeabi_d2iz>
 8002cde:	4606      	mov	r6, r0
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_TIM_IC_CaptureCallback+0x64c>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fbc8 	bl	800047c <__aeabi_i2d>
 8002cec:	a30e      	add	r3, pc, #56	; (adr r3, 8002d28 <HAL_TIM_IC_CaptureCallback+0x638>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fc2d 	bl	8000550 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd fec1 	bl	8000a84 <__aeabi_d2iz>
 8002d02:	4603      	mov	r3, r0
 8002d04:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002d30 <HAL_TIM_IC_CaptureCallback+0x640>
 8002d08:	4632      	mov	r2, r6
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7fe fc9d 	bl	800164c <agv_kinematic_St>
 8002d12:	eeb0 7a40 	vmov.f32	s14, s0
 8002d16:	eef0 7a60 	vmov.f32	s15, s1
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_TIM_IC_CaptureCallback+0x650>)
 8002d1c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	//	tx_ctrl_ping();
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d28:	6872b021 	.word	0x6872b021
 8002d2c:	40466d91 	.word	0x40466d91
	...
 8002d38:	200006d8 	.word	0x200006d8
 8002d3c:	200006f0 	.word	0x200006f0
 8002d40:	20000348 	.word	0x20000348
 8002d44:	200006a8 	.word	0x200006a8
 8002d48:	200006c0 	.word	0x200006c0

08002d4c <HAL_UART_RxCpltCallback>:

// checker message id
uint32_t msgid = 0;
uint32_t current_msgid = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	if(huart == &huart6){
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_UART_RxCpltCallback+0x28>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d107      	bne.n	8002d6c <HAL_UART_RxCpltCallback+0x20>
		rx_ctrl_get(&message_from_sensor);
 8002d5c:	4806      	ldr	r0, [pc, #24]	; (8002d78 <HAL_UART_RxCpltCallback+0x2c>)
 8002d5e:	f7ff f939 	bl	8001fd4 <rx_ctrl_get>
		msgid++;
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_UART_RxCpltCallback+0x30>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_UART_RxCpltCallback+0x30>)
 8002d6a:	6013      	str	r3, [r2, #0]
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000284 	.word	0x20000284
 8002d78:	200004c8 	.word	0x200004c8
 8002d7c:	200005b0 	.word	0x200005b0

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	b0b9      	sub	sp, #228	; 0xe4
 8002d84:	af38      	add	r7, sp, #224	; 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d86:	f001 fdb7 	bl	80048f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d8a:	f000 fa8f 	bl	80032ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d8e:	f000 fe35 	bl	80039fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002d92:	f000 fe13 	bl	80039bc <MX_DMA_Init>
  MX_TIM1_Init();
 8002d96:	f000 faf1 	bl	800337c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d9a:	f000 fb47 	bl	800342c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d9e:	f000 fb99 	bl	80034d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002da2:	f000 fc2f 	bl	8003604 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002da6:	f000 fc81 	bl	80036ac <MX_TIM5_Init>
  MX_TIM9_Init();
 8002daa:	f000 fcd3 	bl	8003754 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002dae:	f000 fd3f 	bl	8003830 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002db2:	f000 fd8b 	bl	80038cc <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8002db6:	f000 fdd7 	bl	8003968 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  //+++++++++++++++++++++++++++++++++ MOTOR INITIALIZATION +++++++++++++++++++++++++++++//
  // Configuration 'Motor A'
  motor_A.tim_R = &htim9;
 8002dba:	4b9b      	ldr	r3, [pc, #620]	; (8003028 <main+0x2a8>)
 8002dbc:	4a9b      	ldr	r2, [pc, #620]	; (800302c <main+0x2ac>)
 8002dbe:	601a      	str	r2, [r3, #0]
  motor_A.tim_L = &htim9;
 8002dc0:	4b99      	ldr	r3, [pc, #612]	; (8003028 <main+0x2a8>)
 8002dc2:	4a9a      	ldr	r2, [pc, #616]	; (800302c <main+0x2ac>)
 8002dc4:	605a      	str	r2, [r3, #4]
  motor_A.tim_number_R = TIM9;
 8002dc6:	4b98      	ldr	r3, [pc, #608]	; (8003028 <main+0x2a8>)
 8002dc8:	4a99      	ldr	r2, [pc, #612]	; (8003030 <main+0x2b0>)
 8002dca:	609a      	str	r2, [r3, #8]
  motor_A.tim_number_L = TIM9;
 8002dcc:	4b96      	ldr	r3, [pc, #600]	; (8003028 <main+0x2a8>)
 8002dce:	4a98      	ldr	r2, [pc, #608]	; (8003030 <main+0x2b0>)
 8002dd0:	60da      	str	r2, [r3, #12]
  motor_A.channel_R = 1;
 8002dd2:	4b95      	ldr	r3, [pc, #596]	; (8003028 <main+0x2a8>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	741a      	strb	r2, [r3, #16]
  motor_A.channel_L = 2;
 8002dd8:	4b93      	ldr	r3, [pc, #588]	; (8003028 <main+0x2a8>)
 8002dda:	2202      	movs	r2, #2
 8002ddc:	745a      	strb	r2, [r3, #17]
  motor_A.EN_PORT_R = ENR_C_GPIO_Port;
 8002dde:	4b92      	ldr	r3, [pc, #584]	; (8003028 <main+0x2a8>)
 8002de0:	4a94      	ldr	r2, [pc, #592]	; (8003034 <main+0x2b4>)
 8002de2:	619a      	str	r2, [r3, #24]
  motor_A.EN_PORT_L = ENL_C_GPIO_Port;
 8002de4:	4b90      	ldr	r3, [pc, #576]	; (8003028 <main+0x2a8>)
 8002de6:	4a93      	ldr	r2, [pc, #588]	; (8003034 <main+0x2b4>)
 8002de8:	61da      	str	r2, [r3, #28]
  motor_A.EN_PIN_R = ENR_C_Pin;
 8002dea:	4b8f      	ldr	r3, [pc, #572]	; (8003028 <main+0x2a8>)
 8002dec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002df0:	841a      	strh	r2, [r3, #32]
  motor_A.EN_PIN_L = ENL_C_Pin;
 8002df2:	4b8d      	ldr	r3, [pc, #564]	; (8003028 <main+0x2a8>)
 8002df4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002df8:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor B'
  motor_B.tim_R = &htim3;
 8002dfa:	4b8f      	ldr	r3, [pc, #572]	; (8003038 <main+0x2b8>)
 8002dfc:	4a8f      	ldr	r2, [pc, #572]	; (800303c <main+0x2bc>)
 8002dfe:	601a      	str	r2, [r3, #0]
  motor_B.tim_L = &htim3;
 8002e00:	4b8d      	ldr	r3, [pc, #564]	; (8003038 <main+0x2b8>)
 8002e02:	4a8e      	ldr	r2, [pc, #568]	; (800303c <main+0x2bc>)
 8002e04:	605a      	str	r2, [r3, #4]
  motor_B.tim_number_R = TIM3;
 8002e06:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <main+0x2b8>)
 8002e08:	4a8d      	ldr	r2, [pc, #564]	; (8003040 <main+0x2c0>)
 8002e0a:	609a      	str	r2, [r3, #8]
  motor_B.tim_number_L = TIM3;
 8002e0c:	4b8a      	ldr	r3, [pc, #552]	; (8003038 <main+0x2b8>)
 8002e0e:	4a8c      	ldr	r2, [pc, #560]	; (8003040 <main+0x2c0>)
 8002e10:	60da      	str	r2, [r3, #12]
  motor_B.channel_R = 1;
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <main+0x2b8>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	741a      	strb	r2, [r3, #16]
  motor_B.channel_L = 2;
 8002e18:	4b87      	ldr	r3, [pc, #540]	; (8003038 <main+0x2b8>)
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	745a      	strb	r2, [r3, #17]
  motor_B.EN_PORT_R = ENR_B_GPIO_Port;
 8002e1e:	4b86      	ldr	r3, [pc, #536]	; (8003038 <main+0x2b8>)
 8002e20:	4a84      	ldr	r2, [pc, #528]	; (8003034 <main+0x2b4>)
 8002e22:	619a      	str	r2, [r3, #24]
  motor_B.EN_PORT_L = ENL_B_GPIO_Port;
 8002e24:	4b84      	ldr	r3, [pc, #528]	; (8003038 <main+0x2b8>)
 8002e26:	4a83      	ldr	r2, [pc, #524]	; (8003034 <main+0x2b4>)
 8002e28:	61da      	str	r2, [r3, #28]
  motor_B.EN_PIN_R = ENR_B_Pin;
 8002e2a:	4b83      	ldr	r3, [pc, #524]	; (8003038 <main+0x2b8>)
 8002e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e30:	841a      	strh	r2, [r3, #32]
  motor_B.EN_PIN_L = ENL_B_Pin;
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <main+0x2b8>)
 8002e34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e38:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor C'
  motor_C.tim_R = &htim3;
 8002e3a:	4b82      	ldr	r3, [pc, #520]	; (8003044 <main+0x2c4>)
 8002e3c:	4a7f      	ldr	r2, [pc, #508]	; (800303c <main+0x2bc>)
 8002e3e:	601a      	str	r2, [r3, #0]
  motor_C.tim_L = &htim3;
 8002e40:	4b80      	ldr	r3, [pc, #512]	; (8003044 <main+0x2c4>)
 8002e42:	4a7e      	ldr	r2, [pc, #504]	; (800303c <main+0x2bc>)
 8002e44:	605a      	str	r2, [r3, #4]
  motor_C.tim_number_R = TIM3;
 8002e46:	4b7f      	ldr	r3, [pc, #508]	; (8003044 <main+0x2c4>)
 8002e48:	4a7d      	ldr	r2, [pc, #500]	; (8003040 <main+0x2c0>)
 8002e4a:	609a      	str	r2, [r3, #8]
  motor_C.tim_number_L = TIM3;
 8002e4c:	4b7d      	ldr	r3, [pc, #500]	; (8003044 <main+0x2c4>)
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	; (8003040 <main+0x2c0>)
 8002e50:	60da      	str	r2, [r3, #12]
  motor_C.channel_R = 3;
 8002e52:	4b7c      	ldr	r3, [pc, #496]	; (8003044 <main+0x2c4>)
 8002e54:	2203      	movs	r2, #3
 8002e56:	741a      	strb	r2, [r3, #16]
  motor_C.channel_L = 4;
 8002e58:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <main+0x2c4>)
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	745a      	strb	r2, [r3, #17]
  motor_C.EN_PORT_R = ENR_A_GPIO_Port;
 8002e5e:	4b79      	ldr	r3, [pc, #484]	; (8003044 <main+0x2c4>)
 8002e60:	4a74      	ldr	r2, [pc, #464]	; (8003034 <main+0x2b4>)
 8002e62:	619a      	str	r2, [r3, #24]
  motor_C.EN_PORT_L = ENL_A_GPIO_Port;
 8002e64:	4b77      	ldr	r3, [pc, #476]	; (8003044 <main+0x2c4>)
 8002e66:	4a73      	ldr	r2, [pc, #460]	; (8003034 <main+0x2b4>)
 8002e68:	61da      	str	r2, [r3, #28]
  motor_C.EN_PIN_R = ENR_A_Pin;
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <main+0x2c4>)
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	841a      	strh	r2, [r3, #32]
  motor_C.EN_PIN_L = ENL_A_Pin;
 8002e70:	4b74      	ldr	r3, [pc, #464]	; (8003044 <main+0x2c4>)
 8002e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e76:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor D'
  motor_D.tim_R = &htim10;
 8002e78:	4b73      	ldr	r3, [pc, #460]	; (8003048 <main+0x2c8>)
 8002e7a:	4a74      	ldr	r2, [pc, #464]	; (800304c <main+0x2cc>)
 8002e7c:	601a      	str	r2, [r3, #0]
  motor_D.tim_L = &htim11;
 8002e7e:	4b72      	ldr	r3, [pc, #456]	; (8003048 <main+0x2c8>)
 8002e80:	4a73      	ldr	r2, [pc, #460]	; (8003050 <main+0x2d0>)
 8002e82:	605a      	str	r2, [r3, #4]
  motor_D.tim_number_R = TIM10;
 8002e84:	4b70      	ldr	r3, [pc, #448]	; (8003048 <main+0x2c8>)
 8002e86:	4a73      	ldr	r2, [pc, #460]	; (8003054 <main+0x2d4>)
 8002e88:	609a      	str	r2, [r3, #8]
  motor_D.tim_number_L = TIM11;
 8002e8a:	4b6f      	ldr	r3, [pc, #444]	; (8003048 <main+0x2c8>)
 8002e8c:	4a72      	ldr	r2, [pc, #456]	; (8003058 <main+0x2d8>)
 8002e8e:	60da      	str	r2, [r3, #12]
  motor_D.channel_R = 1;
 8002e90:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <main+0x2c8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	741a      	strb	r2, [r3, #16]
  motor_D.channel_L = 1;
 8002e96:	4b6c      	ldr	r3, [pc, #432]	; (8003048 <main+0x2c8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	745a      	strb	r2, [r3, #17]
  motor_D.EN_PORT_R = ENR_D_GPIO_Port;
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <main+0x2c8>)
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	; (800305c <main+0x2dc>)
 8002ea0:	619a      	str	r2, [r3, #24]
  motor_D.EN_PORT_L = ENL_D_GPIO_Port;
 8002ea2:	4b69      	ldr	r3, [pc, #420]	; (8003048 <main+0x2c8>)
 8002ea4:	4a6d      	ldr	r2, [pc, #436]	; (800305c <main+0x2dc>)
 8002ea6:	61da      	str	r2, [r3, #28]
  motor_D.EN_PIN_R = ENR_D_Pin;
 8002ea8:	4b67      	ldr	r3, [pc, #412]	; (8003048 <main+0x2c8>)
 8002eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eae:	841a      	strh	r2, [r3, #32]
  motor_D.EN_PIN_L = ENL_D_Pin;
 8002eb0:	4b65      	ldr	r3, [pc, #404]	; (8003048 <main+0x2c8>)
 8002eb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002eb6:	845a      	strh	r2, [r3, #34]	; 0x22

  //+++++++++++++++++++++++++++++++++ ENCODER INITIALIZATION ++++++++++++++++++++++++++++++//
  agv_encoder_start(encoder_A, &htim1, TIM1);
 8002eb8:	4b69      	ldr	r3, [pc, #420]	; (8003060 <main+0x2e0>)
 8002eba:	4a6a      	ldr	r2, [pc, #424]	; (8003064 <main+0x2e4>)
 8002ebc:	9203      	str	r2, [sp, #12]
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <main+0x2e8>)
 8002ec0:	9202      	str	r2, [sp, #8]
 8002ec2:	466c      	mov	r4, sp
 8002ec4:	f103 0210 	add.w	r2, r3, #16
 8002ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ecc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed2:	f7fe f974 	bl	80011be <agv_encoder_start>
  agv_encoder_start(encoder_B, &htim2, TIM2);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <main+0x2ec>)
 8002ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002edc:	9203      	str	r2, [sp, #12]
 8002ede:	4a64      	ldr	r2, [pc, #400]	; (8003070 <main+0x2f0>)
 8002ee0:	9202      	str	r2, [sp, #8]
 8002ee2:	466c      	mov	r4, sp
 8002ee4:	f103 0210 	add.w	r2, r3, #16
 8002ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eec:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ef2:	f7fe f964 	bl	80011be <agv_encoder_start>
  agv_encoder_start(encoder_C, &htim4, TIM4);
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <main+0x2f4>)
 8002ef8:	4a5f      	ldr	r2, [pc, #380]	; (8003078 <main+0x2f8>)
 8002efa:	9203      	str	r2, [sp, #12]
 8002efc:	4a5f      	ldr	r2, [pc, #380]	; (800307c <main+0x2fc>)
 8002efe:	9202      	str	r2, [sp, #8]
 8002f00:	466c      	mov	r4, sp
 8002f02:	f103 0210 	add.w	r2, r3, #16
 8002f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f10:	f7fe f955 	bl	80011be <agv_encoder_start>
  agv_encoder_start(encoder_D, &htim5, TIM5);
 8002f14:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <main+0x300>)
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <main+0x304>)
 8002f18:	9203      	str	r2, [sp, #12]
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <main+0x308>)
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	466c      	mov	r4, sp
 8002f20:	f103 0210 	add.w	r2, r3, #16
 8002f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f28:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f2e:	f7fe f946 	bl	80011be <agv_encoder_start>

  //+++++++++++++++++++++++++++++++++ ENCODER TO MOTOR ++++++++++++++++++++++++++++++++++++//
  motor_A.ENC = encoder_A;
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <main+0x2a8>)
 8002f34:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <main+0x2e0>)
 8002f36:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002f3a:	4615      	mov	r5, r2
 8002f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f44:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_B.ENC = encoder_B;
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <main+0x2b8>)
 8002f4a:	4a48      	ldr	r2, [pc, #288]	; (800306c <main+0x2ec>)
 8002f4c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002f50:	4615      	mov	r5, r2
 8002f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f5a:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_C.ENC = encoder_C;
 8002f5e:	4b39      	ldr	r3, [pc, #228]	; (8003044 <main+0x2c4>)
 8002f60:	4a44      	ldr	r2, [pc, #272]	; (8003074 <main+0x2f4>)
 8002f62:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002f66:	4615      	mov	r5, r2
 8002f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f70:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_D.ENC = encoder_D;
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <main+0x2c8>)
 8002f76:	4a42      	ldr	r2, [pc, #264]	; (8003080 <main+0x300>)
 8002f78:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002f7c:	4615      	mov	r5, r2
 8002f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f86:	e884 0003 	stmia.w	r4, {r0, r1}

  //+++++++++++++++++++++++++++++++++ AKTUATOR INTIALIZATION ++++++++++++++++++++++++++++++//
  aktuator.PORT_IN1 = GPIOB;
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <main+0x30c>)
 8002f8c:	4a29      	ldr	r2, [pc, #164]	; (8003034 <main+0x2b4>)
 8002f8e:	601a      	str	r2, [r3, #0]
  aktuator.PIN_IN1 = GPIO_PIN_5;
 8002f90:	4b3e      	ldr	r3, [pc, #248]	; (800308c <main+0x30c>)
 8002f92:	2220      	movs	r2, #32
 8002f94:	821a      	strh	r2, [r3, #16]
  aktuator.PORT_IN2 = GPIOC;
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <main+0x30c>)
 8002f98:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <main+0x310>)
 8002f9a:	605a      	str	r2, [r3, #4]
  aktuator.PIN_IN2 = GPIO_PIN_13;
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	; (800308c <main+0x30c>)
 8002f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fa2:	825a      	strh	r2, [r3, #18]
  aktuator.PORT_IN3 = GPIOC;
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <main+0x30c>)
 8002fa6:	4a3a      	ldr	r2, [pc, #232]	; (8003090 <main+0x310>)
 8002fa8:	609a      	str	r2, [r3, #8]
  aktuator.PIN_IN3 = GPIO_PIN_14;
 8002faa:	4b38      	ldr	r3, [pc, #224]	; (800308c <main+0x30c>)
 8002fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fb0:	829a      	strh	r2, [r3, #20]
  aktuator.PORT_IN4 = GPIOC;
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <main+0x30c>)
 8002fb4:	4a36      	ldr	r2, [pc, #216]	; (8003090 <main+0x310>)
 8002fb6:	60da      	str	r2, [r3, #12]
  aktuator.PIN_IN4 = GPIO_PIN_15 ;
 8002fb8:	4b34      	ldr	r3, [pc, #208]	; (800308c <main+0x30c>)
 8002fba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fbe:	82da      	strh	r2, [r3, #22]

  //+++++++++++++++++++++++++++++++++ COM START +++++++++++++++++++++++++++++++++++++++++++//
  komunikasi_ctrl_init(&huart6);
 8002fc0:	4834      	ldr	r0, [pc, #208]	; (8003094 <main+0x314>)
 8002fc2:	f7fe ffe7 	bl	8001f94 <komunikasi_ctrl_init>
  rx_ctrl_start_get();
 8002fc6:	f7fe fff5 	bl	8001fb4 <rx_ctrl_start_get>

  //+++++++++++++++++++++++++++++++++ PID INITIALIZATION ++++++++++++++++++++++++++++++//
    // Y Axis
    pid_vy.Kp = 15;				pid_vy.Ki = 3;				pid_vy.Kd = -0.001;
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <main+0x318>)
 8002fcc:	4a33      	ldr	r2, [pc, #204]	; (800309c <main+0x31c>)
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <main+0x318>)
 8002fd2:	4a33      	ldr	r2, [pc, #204]	; (80030a0 <main+0x320>)
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <main+0x318>)
 8002fd8:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <main+0x324>)
 8002fda:	609a      	str	r2, [r3, #8]
    pid_vy.limMax = 500; 		pid_vy.limMin = -500; 		pid_vy.limMaxInt = 1; 	pid_vy.limMinInt = -1;
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <main+0x318>)
 8002fde:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <main+0x328>)
 8002fe0:	615a      	str	r2, [r3, #20]
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <main+0x318>)
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <main+0x32c>)
 8002fe6:	611a      	str	r2, [r3, #16]
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <main+0x318>)
 8002fea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002fee:	61da      	str	r2, [r3, #28]
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <main+0x318>)
 8002ff2:	4a2f      	ldr	r2, [pc, #188]	; (80030b0 <main+0x330>)
 8002ff4:	619a      	str	r2, [r3, #24]
    pid_vy.T_sample = 0.1;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <main+0x318>)
 8002ff8:	4a2e      	ldr	r2, [pc, #184]	; (80030b4 <main+0x334>)
 8002ffa:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vy);
 8002ffc:	4826      	ldr	r0, [pc, #152]	; (8003098 <main+0x318>)
 8002ffe:	f7fe fe73 	bl	8001ce8 <PIDController_Init>

    // X Axis
    pid_vx.Kp = 15;				pid_vx.Ki = 3;				pid_vx.Kd = -0.001;
 8003002:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <main+0x338>)
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <main+0x31c>)
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <main+0x338>)
 800300a:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <main+0x320>)
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <main+0x338>)
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <main+0x324>)
 8003012:	609a      	str	r2, [r3, #8]
    pid_vx.limMax = 500; 		pid_vx.limMin = -500; 		pid_vx.limMaxInt = 1; 	pid_vx.limMinInt = -1;
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <main+0x338>)
 8003016:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <main+0x328>)
 8003018:	615a      	str	r2, [r3, #20]
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <main+0x338>)
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <main+0x32c>)
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <main+0x338>)
 8003022:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003026:	e049      	b.n	80030bc <main+0x33c>
 8003028:	200005b8 	.word	0x200005b8
 800302c:	200001ac 	.word	0x200001ac
 8003030:	40014000 	.word	0x40014000
 8003034:	40020400 	.word	0x40020400
 8003038:	200005f4 	.word	0x200005f4
 800303c:	200000d4 	.word	0x200000d4
 8003040:	40000400 	.word	0x40000400
 8003044:	20000630 	.word	0x20000630
 8003048:	2000066c 	.word	0x2000066c
 800304c:	200001f4 	.word	0x200001f4
 8003050:	2000023c 	.word	0x2000023c
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800
 800305c:	40020000 	.word	0x40020000
 8003060:	200006a8 	.word	0x200006a8
 8003064:	40010000 	.word	0x40010000
 8003068:	20000044 	.word	0x20000044
 800306c:	200006c0 	.word	0x200006c0
 8003070:	2000008c 	.word	0x2000008c
 8003074:	200006d8 	.word	0x200006d8
 8003078:	40000800 	.word	0x40000800
 800307c:	2000011c 	.word	0x2000011c
 8003080:	200006f0 	.word	0x200006f0
 8003084:	40000c00 	.word	0x40000c00
 8003088:	20000164 	.word	0x20000164
 800308c:	2000032c 	.word	0x2000032c
 8003090:	40020800 	.word	0x40020800
 8003094:	20000284 	.word	0x20000284
 8003098:	200003e8 	.word	0x200003e8
 800309c:	41700000 	.word	0x41700000
 80030a0:	40400000 	.word	0x40400000
 80030a4:	ba83126f 	.word	0xba83126f
 80030a8:	43fa0000 	.word	0x43fa0000
 80030ac:	c3fa0000 	.word	0xc3fa0000
 80030b0:	bf800000 	.word	0xbf800000
 80030b4:	3dcccccd 	.word	0x3dcccccd
 80030b8:	20000420 	.word	0x20000420
 80030bc:	61da      	str	r2, [r3, #28]
 80030be:	4b6c      	ldr	r3, [pc, #432]	; (8003270 <main+0x4f0>)
 80030c0:	4a6c      	ldr	r2, [pc, #432]	; (8003274 <main+0x4f4>)
 80030c2:	619a      	str	r2, [r3, #24]
    pid_vx.T_sample = 0.1;
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <main+0x4f0>)
 80030c6:	4a6c      	ldr	r2, [pc, #432]	; (8003278 <main+0x4f8>)
 80030c8:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vx);
 80030ca:	4869      	ldr	r0, [pc, #420]	; (8003270 <main+0x4f0>)
 80030cc:	f7fe fe0c 	bl	8001ce8 <PIDController_Init>

    // T Axis
    pid_vt.Kp = 15;				pid_vt.Ki = 3;				pid_vt.Kd = -0.001;
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <main+0x4fc>)
 80030d2:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <main+0x500>)
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4b69      	ldr	r3, [pc, #420]	; (800327c <main+0x4fc>)
 80030d8:	4a6a      	ldr	r2, [pc, #424]	; (8003284 <main+0x504>)
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	4b67      	ldr	r3, [pc, #412]	; (800327c <main+0x4fc>)
 80030de:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <main+0x508>)
 80030e0:	609a      	str	r2, [r3, #8]
    pid_vt.limMax = 500; 		pid_vt.limMin = -500; 		pid_vt.limMaxInt = 1; 	pid_vt.limMinInt = -1;
 80030e2:	4b66      	ldr	r3, [pc, #408]	; (800327c <main+0x4fc>)
 80030e4:	4a69      	ldr	r2, [pc, #420]	; (800328c <main+0x50c>)
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	4b64      	ldr	r3, [pc, #400]	; (800327c <main+0x4fc>)
 80030ea:	4a69      	ldr	r2, [pc, #420]	; (8003290 <main+0x510>)
 80030ec:	611a      	str	r2, [r3, #16]
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <main+0x4fc>)
 80030f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030f4:	61da      	str	r2, [r3, #28]
 80030f6:	4b61      	ldr	r3, [pc, #388]	; (800327c <main+0x4fc>)
 80030f8:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <main+0x4f4>)
 80030fa:	619a      	str	r2, [r3, #24]
    pid_vt.T_sample = 0.1;
 80030fc:	4b5f      	ldr	r3, [pc, #380]	; (800327c <main+0x4fc>)
 80030fe:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <main+0x4f8>)
 8003100:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vt);
 8003102:	485e      	ldr	r0, [pc, #376]	; (800327c <main+0x4fc>)
 8003104:	f7fe fdf0 	bl	8001ce8 <PIDController_Init>

    // Yaw Direction
    pid_yaw.Kp = 25;			pid_yaw.Ki = 3;				pid_yaw.Kd = -0.001;
 8003108:	4b62      	ldr	r3, [pc, #392]	; (8003294 <main+0x514>)
 800310a:	4a63      	ldr	r2, [pc, #396]	; (8003298 <main+0x518>)
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <main+0x514>)
 8003110:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <main+0x504>)
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <main+0x514>)
 8003116:	4a5c      	ldr	r2, [pc, #368]	; (8003288 <main+0x508>)
 8003118:	609a      	str	r2, [r3, #8]
    pid_yaw.limMax = 500; 		pid_yaw.limMin = -500; 		pid_yaw.limMaxInt = 1; 	pid_yaw.limMinInt = -1;
 800311a:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <main+0x514>)
 800311c:	4a5b      	ldr	r2, [pc, #364]	; (800328c <main+0x50c>)
 800311e:	615a      	str	r2, [r3, #20]
 8003120:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <main+0x514>)
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <main+0x510>)
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <main+0x514>)
 8003128:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	4b59      	ldr	r3, [pc, #356]	; (8003294 <main+0x514>)
 8003130:	4a50      	ldr	r2, [pc, #320]	; (8003274 <main+0x4f4>)
 8003132:	619a      	str	r2, [r3, #24]
    pid_yaw.T_sample = 0.1;
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <main+0x514>)
 8003136:	4a50      	ldr	r2, [pc, #320]	; (8003278 <main+0x4f8>)
 8003138:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_yaw);
 800313a:	4856      	ldr	r0, [pc, #344]	; (8003294 <main+0x514>)
 800313c:	f7fe fdd4 	bl	8001ce8 <PIDController_Init>

    // STOP ALL Motor
	agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 8003140:	4e56      	ldr	r6, [pc, #344]	; (800329c <main+0x51c>)
 8003142:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <main+0x520>)
 8003144:	ac29      	add	r4, sp, #164	; 0xa4
 8003146:	461d      	mov	r5, r3
 8003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800315c:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <main+0x524>)
 800315e:	ac1a      	add	r4, sp, #104	; 0x68
 8003160:	461d      	mov	r5, r3
 8003162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800316a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800316c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800316e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003176:	4b4c      	ldr	r3, [pc, #304]	; (80032a8 <main+0x528>)
 8003178:	ac0b      	add	r4, sp, #44	; 0x2c
 800317a:	461d      	mov	r5, r3
 800317c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800317e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800318c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003190:	466d      	mov	r5, sp
 8003192:	f106 0410 	add.w	r4, r6, #16
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031aa:	f7fd ff64 	bl	8001076 <agv_stop_all>
	HAL_Delay(1000);
 80031ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031b2:	f001 fc13 	bl	80049dc <HAL_Delay>
//	agv_inverse_kinematic(0, 100, 0, 0, motor_A, motor_B, motor_C, motor_D);
//	HAL_Delay(1000);
//	agv_reset_all(motor_A, motor_B, motor_C, motor_D);
//	agv_stop_all(motor_A, motor_B, motor_C, motor_D);

	while(!run_to_point_with_yaw(0,5000,0,50)){
 80031b6:	bf00      	nop
 80031b8:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8003258 <main+0x4d8>
 80031bc:	2000      	movs	r0, #0
 80031be:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8003260 <main+0x4e0>
 80031c2:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8003268 <main+0x4e8>
 80031c6:	f000 fca7 	bl	8003b18 <run_to_point_with_yaw>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <main+0x438>
	}
	HAL_Delay(1000);
 80031d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031da:	f001 fbff 	bl	80049dc <HAL_Delay>
	while(!run_to_point_with_yaw(5000,5000,0,50)){
 80031de:	bf00      	nop
 80031e0:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8003258 <main+0x4d8>
 80031e4:	2000      	movs	r0, #0
 80031e6:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8003260 <main+0x4e0>
 80031ea:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8003260 <main+0x4e0>
 80031ee:	f000 fc93 	bl	8003b18 <run_to_point_with_yaw>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f083 0301 	eor.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <main+0x460>
	}
	HAL_Delay(1000);
 80031fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003202:	f001 fbeb 	bl	80049dc <HAL_Delay>
	while(!run_to_point_with_yaw(5000,0,0,50)){
 8003206:	bf00      	nop
 8003208:	ed9f 2b13 	vldr	d2, [pc, #76]	; 8003258 <main+0x4d8>
 800320c:	2000      	movs	r0, #0
 800320e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003268 <main+0x4e8>
 8003212:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8003260 <main+0x4e0>
 8003216:	f000 fc7f 	bl	8003b18 <run_to_point_with_yaw>
 800321a:	4603      	mov	r3, r0
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <main+0x488>
	}
	HAL_Delay(1000);
 8003226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800322a:	f001 fbd7 	bl	80049dc <HAL_Delay>
	while(!run_to_point_with_yaw(0,0,0,50)){
 800322e:	bf00      	nop
 8003230:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8003258 <main+0x4d8>
 8003234:	2000      	movs	r0, #0
 8003236:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8003268 <main+0x4e8>
 800323a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003268 <main+0x4e8>
 800323e:	f000 fc6b 	bl	8003b18 <run_to_point_with_yaw>
 8003242:	4603      	mov	r3, r0
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <main+0x4b0>
	}
	HAL_Delay(1000);
 800324e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003252:	f001 fbc3 	bl	80049dc <HAL_Delay>
//	aktuator_down(aktuator);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
 8003256:	e7fe      	b.n	8003256 <main+0x4d6>
 8003258:	00000000 	.word	0x00000000
 800325c:	40490000 	.word	0x40490000
 8003260:	00000000 	.word	0x00000000
 8003264:	40b38800 	.word	0x40b38800
	...
 8003270:	20000420 	.word	0x20000420
 8003274:	bf800000 	.word	0xbf800000
 8003278:	3dcccccd 	.word	0x3dcccccd
 800327c:	20000458 	.word	0x20000458
 8003280:	41700000 	.word	0x41700000
 8003284:	40400000 	.word	0x40400000
 8003288:	ba83126f 	.word	0xba83126f
 800328c:	43fa0000 	.word	0x43fa0000
 8003290:	c3fa0000 	.word	0xc3fa0000
 8003294:	20000490 	.word	0x20000490
 8003298:	41c80000 	.word	0x41c80000
 800329c:	200005b8 	.word	0x200005b8
 80032a0:	2000066c 	.word	0x2000066c
 80032a4:	20000630 	.word	0x20000630
 80032a8:	200005f4 	.word	0x200005f4

080032ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b094      	sub	sp, #80	; 0x50
 80032b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032b2:	f107 0320 	add.w	r3, r7, #32
 80032b6:	2230      	movs	r2, #48	; 0x30
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 f868 	bl	8008390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <SystemClock_Config+0xc8>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4a26      	ldr	r2, [pc, #152]	; (8003374 <SystemClock_Config+0xc8>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
 80032e0:	4b24      	ldr	r3, [pc, #144]	; (8003374 <SystemClock_Config+0xc8>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ec:	2300      	movs	r3, #0
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <SystemClock_Config+0xcc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <SystemClock_Config+0xcc>)
 80032f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <SystemClock_Config+0xcc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800330c:	2301      	movs	r3, #1
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003310:	2310      	movs	r3, #16
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003314:	2302      	movs	r3, #2
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003318:	2300      	movs	r3, #0
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800331c:	2308      	movs	r3, #8
 800331e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003320:	2364      	movs	r3, #100	; 0x64
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003324:	2302      	movs	r3, #2
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003328:	2304      	movs	r3, #4
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800332c:	f107 0320 	add.w	r3, r7, #32
 8003330:	4618      	mov	r0, r3
 8003332:	f002 fa29 	bl	8005788 <HAL_RCC_OscConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800333c:	f000 fedc 	bl	80040f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003340:	230f      	movs	r3, #15
 8003342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003344:	2302      	movs	r3, #2
 8003346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800334c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	2103      	movs	r1, #3
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fc8b 	bl	8005c78 <HAL_RCC_ClockConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003368:	f000 fec6 	bl	80040f8 <Error_Handler>
  }
}
 800336c:	bf00      	nop
 800336e:	3750      	adds	r7, #80	; 0x50
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000

0800337c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08c      	sub	sp, #48	; 0x30
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f005 f800 	bl	8008390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <MX_TIM1_Init+0xa8>)
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <MX_TIM1_Init+0xac>)
 800339c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a4:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033be:	4b19      	ldr	r3, [pc, #100]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033cc:	2301      	movs	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033dc:	2301      	movs	r3, #1
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	480d      	ldr	r0, [pc, #52]	; (8003424 <MX_TIM1_Init+0xa8>)
 80033f0:	f002 ff7a 	bl	80062e8 <HAL_TIM_Encoder_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80033fa:	f000 fe7d 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4806      	ldr	r0, [pc, #24]	; (8003424 <MX_TIM1_Init+0xa8>)
 800340c:	f003 fe3a 	bl	8007084 <HAL_TIMEx_MasterConfigSynchronization>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003416:	f000 fe6f 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000044 	.word	0x20000044
 8003428:	40010000 	.word	0x40010000

0800342c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	; 0x30
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f004 ffa8 	bl	8008390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <MX_TIM2_Init+0xa4>)
 800344a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800344e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <MX_TIM2_Init+0xa4>)
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <MX_TIM2_Init+0xa4>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <MX_TIM2_Init+0xa4>)
 800345e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <MX_TIM2_Init+0xa4>)
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346a:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <MX_TIM2_Init+0xa4>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003470:	2301      	movs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003478:	2301      	movs	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003484:	2300      	movs	r3, #0
 8003486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	4619      	mov	r1, r3
 800349a:	480d      	ldr	r0, [pc, #52]	; (80034d0 <MX_TIM2_Init+0xa4>)
 800349c:	f002 ff24 	bl	80062e8 <HAL_TIM_Encoder_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80034a6:	f000 fe27 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4806      	ldr	r0, [pc, #24]	; (80034d0 <MX_TIM2_Init+0xa4>)
 80034b8:	f003 fde4 	bl	8007084 <HAL_TIMEx_MasterConfigSynchronization>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80034c2:	f000 fe19 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034c6:	bf00      	nop
 80034c8:	3730      	adds	r7, #48	; 0x30
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000008c 	.word	0x2000008c

080034d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08e      	sub	sp, #56	; 0x38
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e8:	f107 0320 	add.w	r3, r7, #32
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
 8003500:	615a      	str	r2, [r3, #20]
 8003502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <MX_TIM3_Init+0x128>)
 8003506:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <MX_TIM3_Init+0x12c>)
 8003508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800350a:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <MX_TIM3_Init+0x128>)
 800350c:	2263      	movs	r2, #99	; 0x63
 800350e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003510:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <MX_TIM3_Init+0x128>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <MX_TIM3_Init+0x128>)
 8003518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800351c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <MX_TIM3_Init+0x128>)
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003524:	4b35      	ldr	r3, [pc, #212]	; (80035fc <MX_TIM3_Init+0x128>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800352a:	4834      	ldr	r0, [pc, #208]	; (80035fc <MX_TIM3_Init+0x128>)
 800352c:	f002 fd84 	bl	8006038 <HAL_TIM_Base_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003536:	f000 fddf 	bl	80040f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800353a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003544:	4619      	mov	r1, r3
 8003546:	482d      	ldr	r0, [pc, #180]	; (80035fc <MX_TIM3_Init+0x128>)
 8003548:	f003 f9d4 	bl	80068f4 <HAL_TIM_ConfigClockSource>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003552:	f000 fdd1 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003556:	4829      	ldr	r0, [pc, #164]	; (80035fc <MX_TIM3_Init+0x128>)
 8003558:	f002 fdbd 	bl	80060d6 <HAL_TIM_PWM_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003562:	f000 fdc9 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800356e:	f107 0320 	add.w	r3, r7, #32
 8003572:	4619      	mov	r1, r3
 8003574:	4821      	ldr	r0, [pc, #132]	; (80035fc <MX_TIM3_Init+0x128>)
 8003576:	f003 fd85 	bl	8007084 <HAL_TIMEx_MasterConfigSynchronization>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003580:	f000 fdba 	bl	80040f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003584:	2360      	movs	r3, #96	; 0x60
 8003586:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	4619      	mov	r1, r3
 800359a:	4818      	ldr	r0, [pc, #96]	; (80035fc <MX_TIM3_Init+0x128>)
 800359c:	f003 f8e8 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80035a6:	f000 fda7 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	2204      	movs	r2, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4812      	ldr	r0, [pc, #72]	; (80035fc <MX_TIM3_Init+0x128>)
 80035b2:	f003 f8dd 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80035bc:	f000 fd9c 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	2208      	movs	r2, #8
 80035c4:	4619      	mov	r1, r3
 80035c6:	480d      	ldr	r0, [pc, #52]	; (80035fc <MX_TIM3_Init+0x128>)
 80035c8:	f003 f8d2 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80035d2:	f000 fd91 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	220c      	movs	r2, #12
 80035da:	4619      	mov	r1, r3
 80035dc:	4807      	ldr	r0, [pc, #28]	; (80035fc <MX_TIM3_Init+0x128>)
 80035de:	f003 f8c7 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80035e8:	f000 fd86 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <MX_TIM3_Init+0x128>)
 80035ee:	f000 ff37 	bl	8004460 <HAL_TIM_MspPostInit>

}
 80035f2:	bf00      	nop
 80035f4:	3738      	adds	r7, #56	; 0x38
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200000d4 	.word	0x200000d4
 8003600:	40000400 	.word	0x40000400

08003604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f004 febc 	bl	8008390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <MX_TIM4_Init+0xa0>)
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <MX_TIM4_Init+0xa4>)
 8003624:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <MX_TIM4_Init+0xa0>)
 8003628:	2200      	movs	r2, #0
 800362a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <MX_TIM4_Init+0xa0>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <MX_TIM4_Init+0xa0>)
 8003634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003638:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <MX_TIM4_Init+0xa0>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <MX_TIM4_Init+0xa0>)
 8003642:	2200      	movs	r2, #0
 8003644:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003646:	2301      	movs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800364e:	2301      	movs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800365e:	2301      	movs	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4619      	mov	r1, r3
 8003670:	480c      	ldr	r0, [pc, #48]	; (80036a4 <MX_TIM4_Init+0xa0>)
 8003672:	f002 fe39 	bl	80062e8 <HAL_TIM_Encoder_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800367c:	f000 fd3c 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003680:	2300      	movs	r3, #0
 8003682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	4619      	mov	r1, r3
 800368c:	4805      	ldr	r0, [pc, #20]	; (80036a4 <MX_TIM4_Init+0xa0>)
 800368e:	f003 fcf9 	bl	8007084 <HAL_TIMEx_MasterConfigSynchronization>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003698:	f000 fd2e 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800369c:	bf00      	nop
 800369e:	3730      	adds	r7, #48	; 0x30
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	2000011c 	.word	0x2000011c
 80036a8:	40000800 	.word	0x40000800

080036ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fe68 	bl	8008390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <MX_TIM5_Init+0xa0>)
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <MX_TIM5_Init+0xa4>)
 80036cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <MX_TIM5_Init+0xa0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <MX_TIM5_Init+0xa0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <MX_TIM5_Init+0xa0>)
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <MX_TIM5_Init+0xa0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e8:	4b18      	ldr	r3, [pc, #96]	; (800374c <MX_TIM5_Init+0xa0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036ee:	2301      	movs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003706:	2301      	movs	r3, #1
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800370a:	2300      	movs	r3, #0
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003712:	f107 030c 	add.w	r3, r7, #12
 8003716:	4619      	mov	r1, r3
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <MX_TIM5_Init+0xa0>)
 800371a:	f002 fde5 	bl	80062e8 <HAL_TIM_Encoder_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003724:	f000 fce8 	bl	80040f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	; (800374c <MX_TIM5_Init+0xa0>)
 8003736:	f003 fca5 	bl	8007084 <HAL_TIMEx_MasterConfigSynchronization>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003740:	f000 fcda 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003744:	bf00      	nop
 8003746:	3730      	adds	r7, #48	; 0x30
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000164 	.word	0x20000164
 8003750:	40000c00 	.word	0x40000c00

08003754 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800375a:	f107 0320 	add.w	r3, r7, #32
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	60da      	str	r2, [r3, #12]
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	615a      	str	r2, [r3, #20]
 8003778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800377a:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <MX_TIM9_Init+0xd4>)
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <MX_TIM9_Init+0xd8>)
 800377e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8003780:	4b29      	ldr	r3, [pc, #164]	; (8003828 <MX_TIM9_Init+0xd4>)
 8003782:	2263      	movs	r2, #99	; 0x63
 8003784:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003786:	4b28      	ldr	r3, [pc, #160]	; (8003828 <MX_TIM9_Init+0xd4>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800378c:	4b26      	ldr	r3, [pc, #152]	; (8003828 <MX_TIM9_Init+0xd4>)
 800378e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003792:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <MX_TIM9_Init+0xd4>)
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <MX_TIM9_Init+0xd4>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80037a0:	4821      	ldr	r0, [pc, #132]	; (8003828 <MX_TIM9_Init+0xd4>)
 80037a2:	f002 fc49 	bl	8006038 <HAL_TIM_Base_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80037ac:	f000 fca4 	bl	80040f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80037b6:	f107 0320 	add.w	r3, r7, #32
 80037ba:	4619      	mov	r1, r3
 80037bc:	481a      	ldr	r0, [pc, #104]	; (8003828 <MX_TIM9_Init+0xd4>)
 80037be:	f003 f899 	bl	80068f4 <HAL_TIM_ConfigClockSource>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80037c8:	f000 fc96 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80037cc:	4816      	ldr	r0, [pc, #88]	; (8003828 <MX_TIM9_Init+0xd4>)
 80037ce:	f002 fc82 	bl	80060d6 <HAL_TIM_PWM_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80037d8:	f000 fc8e 	bl	80040f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037dc:	2360      	movs	r3, #96	; 0x60
 80037de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	2200      	movs	r2, #0
 80037f0:	4619      	mov	r1, r3
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <MX_TIM9_Init+0xd4>)
 80037f4:	f002 ffbc 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80037fe:	f000 fc7b 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2204      	movs	r2, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <MX_TIM9_Init+0xd4>)
 800380a:	f002 ffb1 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003814:	f000 fc70 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <MX_TIM9_Init+0xd4>)
 800381a:	f000 fe21 	bl	8004460 <HAL_TIM_MspPostInit>

}
 800381e:	bf00      	nop
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200001ac 	.word	0x200001ac
 800382c:	40014000 	.word	0x40014000

08003830 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	615a      	str	r2, [r3, #20]
 8003846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003848:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <MX_TIM10_Init+0x94>)
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <MX_TIM10_Init+0x98>)
 800384c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <MX_TIM10_Init+0x94>)
 8003850:	2263      	movs	r2, #99	; 0x63
 8003852:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <MX_TIM10_Init+0x94>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <MX_TIM10_Init+0x94>)
 800385c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003860:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <MX_TIM10_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <MX_TIM10_Init+0x94>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800386e:	4815      	ldr	r0, [pc, #84]	; (80038c4 <MX_TIM10_Init+0x94>)
 8003870:	f002 fbe2 	bl	8006038 <HAL_TIM_Base_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800387a:	f000 fc3d 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800387e:	4811      	ldr	r0, [pc, #68]	; (80038c4 <MX_TIM10_Init+0x94>)
 8003880:	f002 fc29 	bl	80060d6 <HAL_TIM_PWM_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800388a:	f000 fc35 	bl	80040f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800388e:	2360      	movs	r3, #96	; 0x60
 8003890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2200      	movs	r2, #0
 80038a2:	4619      	mov	r1, r3
 80038a4:	4807      	ldr	r0, [pc, #28]	; (80038c4 <MX_TIM10_Init+0x94>)
 80038a6:	f002 ff63 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80038b0:	f000 fc22 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80038b4:	4803      	ldr	r0, [pc, #12]	; (80038c4 <MX_TIM10_Init+0x94>)
 80038b6:	f000 fdd3 	bl	8004460 <HAL_TIM_MspPostInit>

}
 80038ba:	bf00      	nop
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200001f4 	.word	0x200001f4
 80038c8:	40014400 	.word	0x40014400

080038cc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]
 80038e0:	615a      	str	r2, [r3, #20]
 80038e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80038e4:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <MX_TIM11_Init+0x94>)
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <MX_TIM11_Init+0x98>)
 80038e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <MX_TIM11_Init+0x94>)
 80038ec:	2263      	movs	r2, #99	; 0x63
 80038ee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <MX_TIM11_Init+0x94>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <MX_TIM11_Init+0x94>)
 80038f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <MX_TIM11_Init+0x94>)
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <MX_TIM11_Init+0x94>)
 8003906:	2200      	movs	r2, #0
 8003908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800390a:	4815      	ldr	r0, [pc, #84]	; (8003960 <MX_TIM11_Init+0x94>)
 800390c:	f002 fb94 	bl	8006038 <HAL_TIM_Base_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003916:	f000 fbef 	bl	80040f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800391a:	4811      	ldr	r0, [pc, #68]	; (8003960 <MX_TIM11_Init+0x94>)
 800391c:	f002 fbdb 	bl	80060d6 <HAL_TIM_PWM_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003926:	f000 fbe7 	bl	80040f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800392a:	2360      	movs	r3, #96	; 0x60
 800392c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	2200      	movs	r2, #0
 800393e:	4619      	mov	r1, r3
 8003940:	4807      	ldr	r0, [pc, #28]	; (8003960 <MX_TIM11_Init+0x94>)
 8003942:	f002 ff15 	bl	8006770 <HAL_TIM_PWM_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800394c:	f000 fbd4 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <MX_TIM11_Init+0x94>)
 8003952:	f000 fd85 	bl	8004460 <HAL_TIM_MspPostInit>

}
 8003956:	bf00      	nop
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	2000023c 	.word	0x2000023c
 8003964:	40014800 	.word	0x40014800

08003968 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <MX_USART6_UART_Init+0x50>)
 8003970:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 8003974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003978:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 8003982:	2200      	movs	r2, #0
 8003984:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 800398e:	220c      	movs	r2, #12
 8003990:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800399e:	4805      	ldr	r0, [pc, #20]	; (80039b4 <MX_USART6_UART_Init+0x4c>)
 80039a0:	f003 fbf2 	bl	8007188 <HAL_UART_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80039aa:	f000 fba5 	bl	80040f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000284 	.word	0x20000284
 80039b8:	40011400 	.word	0x40011400

080039bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <MX_DMA_Init+0x3c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <MX_DMA_Init+0x3c>)
 80039cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <MX_DMA_Init+0x3c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2039      	movs	r0, #57	; 0x39
 80039e4:	f001 f8f9 	bl	8004bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80039e8:	2039      	movs	r0, #57	; 0x39
 80039ea:	f001 f912 	bl	8004c12 <HAL_NVIC_EnableIRQ>

}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	4b3c      	ldr	r3, [pc, #240]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <MX_GPIO_Init+0x10c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_UART_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8003a82:	2200      	movs	r2, #0
 8003a84:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003a88:	4820      	ldr	r0, [pc, #128]	; (8003b0c <MX_GPIO_Init+0x110>)
 8003a8a:	f001 fe63 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|ENR_D_Pin|ENL_D_Pin, GPIO_PIN_RESET);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f248 4110 	movw	r1, #33808	; 0x8410
 8003a94:	481e      	ldr	r0, [pc, #120]	; (8003b10 <MX_GPIO_Init+0x114>)
 8003a96:	f001 fe5d 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f24f 4134 	movw	r1, #62516	; 0xf434
 8003aa0:	481c      	ldr	r0, [pc, #112]	; (8003b14 <MX_GPIO_Init+0x118>)
 8003aa2:	f001 fe57 	bl	8005754 <HAL_GPIO_WritePin>
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UART_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = LED_UART_Pin|IN3_Pin|IN4_Pin;
 8003aa6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aac:	2301      	movs	r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4619      	mov	r1, r3
 8003abe:	4813      	ldr	r0, [pc, #76]	; (8003b0c <MX_GPIO_Init+0x110>)
 8003ac0:	f001 fcc4 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin ENR_D_Pin ENL_D_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|ENR_D_Pin|ENL_D_Pin;
 8003ac4:	f248 4310 	movw	r3, #33808	; 0x8410
 8003ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <MX_GPIO_Init+0x114>)
 8003ade:	f001 fcb5 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENR_A_Pin ENL_A_Pin ENR_B_Pin ENL_B_Pin
                           ENR_C_Pin ENL_C_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 8003ae2:	f24f 4334 	movw	r3, #62516	; 0xf434
 8003ae6:	617b      	str	r3, [r7, #20]
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4619      	mov	r1, r3
 8003afa:	4806      	ldr	r0, [pc, #24]	; (8003b14 <MX_GPIO_Init+0x118>)
 8003afc:	f001 fca6 	bl	800544c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b00:	bf00      	nop
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400

08003b18 <run_to_point_with_yaw>:
		current_msgid = msgid;
	}
	return false;
}

bool run_to_point_with_yaw(double sx, double sy, uint16_t heading, double error){
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	ed2d 8b02 	vpush	{d8}
 8003b20:	b0c3      	sub	sp, #268	; 0x10c
 8003b22:	af38      	add	r7, sp, #224	; 0xe0
 8003b24:	ed87 0b06 	vstr	d0, [r7, #24]
 8003b28:	ed87 1b04 	vstr	d1, [r7, #16]
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	ed87 2b00 	vstr	d2, [r7]
 8003b32:	81fb      	strh	r3, [r7, #14]
	if(current_msgid < msgid){
 8003b34:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <run_to_point_with_yaw+0x1d0>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <run_to_point_with_yaw+0x1d4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f080 82b9 	bcs.w	80040b4 <run_to_point_with_yaw+0x59c>
		double degree = 0;
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if(abs(kinematic.Sx - sx) < error && abs(kinematic.Sy - sy) < error && abs(degree - heading) < error){
 8003b4e:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <run_to_point_with_yaw+0x1d8>)
 8003b50:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b58:	f7fc fb42 	bl	80001e0 <__aeabi_dsub>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	f7fc ff8e 	bl	8000a84 <__aeabi_d2iz>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfb8      	it	lt
 8003b6e:	425b      	neglt	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc fc83 	bl	800047c <__aeabi_i2d>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b7e:	f7fc ff77 	bl	8000a70 <__aeabi_dcmpgt>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80bd 	beq.w	8003d04 <run_to_point_with_yaw+0x1ec>
 8003b8a:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <run_to_point_with_yaw+0x1d8>)
 8003b8c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8003b90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b94:	f7fc fb24 	bl	80001e0 <__aeabi_dsub>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7fc ff70 	bl	8000a84 <__aeabi_d2iz>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfb8      	it	lt
 8003baa:	425b      	neglt	r3, r3
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fc65 	bl	800047c <__aeabi_i2d>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bba:	f7fc ff59 	bl	8000a70 <__aeabi_dcmpgt>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 809f 	beq.w	8003d04 <run_to_point_with_yaw+0x1ec>
 8003bc6:	89fb      	ldrh	r3, [r7, #14]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fc57 	bl	800047c <__aeabi_i2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bd6:	f7fc fb03 	bl	80001e0 <__aeabi_dsub>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fc ff4f 	bl	8000a84 <__aeabi_d2iz>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bfb8      	it	lt
 8003bec:	425b      	neglt	r3, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fc44 	bl	800047c <__aeabi_i2d>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bfc:	f7fc ff38 	bl	8000a70 <__aeabi_dcmpgt>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d07e      	beq.n	8003d04 <run_to_point_with_yaw+0x1ec>
			agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 8003c06:	4e3b      	ldr	r6, [pc, #236]	; (8003cf4 <run_to_point_with_yaw+0x1dc>)
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <run_to_point_with_yaw+0x1e0>)
 8003c0a:	ac29      	add	r4, sp, #164	; 0xa4
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <run_to_point_with_yaw+0x1e4>)
 8003c24:	ac1a      	add	r4, sp, #104	; 0x68
 8003c26:	461d      	mov	r5, r3
 8003c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c3c:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <run_to_point_with_yaw+0x1e8>)
 8003c3e:	ac0b      	add	r4, sp, #44	; 0x2c
 8003c40:	461d      	mov	r5, r3
 8003c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c56:	466d      	mov	r5, sp
 8003c58:	f106 0410 	add.w	r4, r6, #16
 8003c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c64:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c6c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c70:	f7fd fa4f 	bl	8001112 <agv_reset_all>
			agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 8003c74:	4e1f      	ldr	r6, [pc, #124]	; (8003cf4 <run_to_point_with_yaw+0x1dc>)
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <run_to_point_with_yaw+0x1e0>)
 8003c78:	ac29      	add	r4, sp, #164	; 0xa4
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <run_to_point_with_yaw+0x1e4>)
 8003c92:	ac1a      	add	r4, sp, #104	; 0x68
 8003c94:	461d      	mov	r5, r3
 8003c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <run_to_point_with_yaw+0x1e8>)
 8003cac:	ac0b      	add	r4, sp, #44	; 0x2c
 8003cae:	461d      	mov	r5, r3
 8003cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cc4:	466d      	mov	r5, sp
 8003cc6:	f106 0410 	add.w	r4, r6, #16
 8003cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003cd6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003cda:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003cde:	f7fd f9ca 	bl	8001076 <agv_stop_all>
			return true;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1e7      	b.n	80040b6 <run_to_point_with_yaw+0x59e>
 8003ce6:	bf00      	nop
 8003ce8:	200005b4 	.word	0x200005b4
 8003cec:	200005b0 	.word	0x200005b0
 8003cf0:	20000348 	.word	0x20000348
 8003cf4:	200005b8 	.word	0x200005b8
 8003cf8:	2000066c 	.word	0x2000066c
 8003cfc:	20000630 	.word	0x20000630
 8003d00:	200005f4 	.word	0x200005f4
		}
		else{
			if(message_from_sensor.yaw < 0){
 8003d04:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <run_to_point_with_yaw+0x3b8>)
 8003d06:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f280 80f4 	bge.w	8003ef8 <run_to_point_with_yaw+0x3e0>
				degree = abs(message_from_sensor.yaw)/100;
 8003d10:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <run_to_point_with_yaw+0x3b8>)
 8003d12:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bfb8      	it	lt
 8003d1a:	425b      	neglt	r3, r3
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4a6d      	ldr	r2, [pc, #436]	; (8003ed4 <run_to_point_with_yaw+0x3bc>)
 8003d20:	fb82 1203 	smull	r1, r2, r2, r3
 8003d24:	1152      	asrs	r2, r2, #5
 8003d26:	17db      	asrs	r3, r3, #31
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fba6 	bl	800047c <__aeabi_i2d>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PIDController_Update(&pid_vx, sx, kinematic.Sx);
 8003d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d3c:	f7fc feca 	bl	8000ad4 <__aeabi_d2f>
 8003d40:	4604      	mov	r4, r0
 8003d42:	4b65      	ldr	r3, [pc, #404]	; (8003ed8 <run_to_point_with_yaw+0x3c0>)
 8003d44:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fec2 	bl	8000ad4 <__aeabi_d2f>
 8003d50:	4603      	mov	r3, r0
 8003d52:	ee00 3a90 	vmov	s1, r3
 8003d56:	ee00 4a10 	vmov	s0, r4
 8003d5a:	4860      	ldr	r0, [pc, #384]	; (8003edc <run_to_point_with_yaw+0x3c4>)
 8003d5c:	f7fd ffe2 	bl	8001d24 <PIDController_Update>
				PIDController_Update(&pid_vy, sy, kinematic.Sy);
 8003d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d64:	f7fc feb6 	bl	8000ad4 <__aeabi_d2f>
 8003d68:	4604      	mov	r4, r0
 8003d6a:	4b5b      	ldr	r3, [pc, #364]	; (8003ed8 <run_to_point_with_yaw+0x3c0>)
 8003d6c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fc feae 	bl	8000ad4 <__aeabi_d2f>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	ee00 3a90 	vmov	s1, r3
 8003d7e:	ee00 4a10 	vmov	s0, r4
 8003d82:	4857      	ldr	r0, [pc, #348]	; (8003ee0 <run_to_point_with_yaw+0x3c8>)
 8003d84:	f7fd ffce 	bl	8001d24 <PIDController_Update>
				PIDController_Update(&pid_yaw, heading, degree);
 8003d88:	89fb      	ldrh	r3, [r7, #14]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003d92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d96:	f7fc fe9d 	bl	8000ad4 <__aeabi_d2f>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	ee00 3a90 	vmov	s1, r3
 8003da0:	eeb0 0a48 	vmov.f32	s0, s16
 8003da4:	484f      	ldr	r0, [pc, #316]	; (8003ee4 <run_to_point_with_yaw+0x3cc>)
 8003da6:	f7fd ffbd 	bl	8001d24 <PIDController_Update>
				agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 8003daa:	4e4f      	ldr	r6, [pc, #316]	; (8003ee8 <run_to_point_with_yaw+0x3d0>)
 8003dac:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <run_to_point_with_yaw+0x3d4>)
 8003dae:	ac29      	add	r4, sp, #164	; 0xa4
 8003db0:	461d      	mov	r5, r3
 8003db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003dc6:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <run_to_point_with_yaw+0x3d8>)
 8003dc8:	ac1a      	add	r4, sp, #104	; 0x68
 8003dca:	461d      	mov	r5, r3
 8003dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ddc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003de0:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <run_to_point_with_yaw+0x3dc>)
 8003de2:	ac0b      	add	r4, sp, #44	; 0x2c
 8003de4:	461d      	mov	r5, r3
 8003de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003df6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003dfa:	466d      	mov	r5, sp
 8003dfc:	f106 0410 	add.w	r4, r6, #16
 8003e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003e10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003e14:	f7fd f97d 	bl	8001112 <agv_reset_all>
				agv_inverse_kinematic(pid_vx.out, pid_vy.out, (pid_yaw.out), 0, motor_A, motor_B, motor_C, motor_D);
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <run_to_point_with_yaw+0x3c4>)
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc fb3f 	bl	80004a0 <__aeabi_f2d>
 8003e22:	4680      	mov	r8, r0
 8003e24:	4689      	mov	r9, r1
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <run_to_point_with_yaw+0x3c8>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc fb38 	bl	80004a0 <__aeabi_f2d>
 8003e30:	4682      	mov	sl, r0
 8003e32:	468b      	mov	fp, r1
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <run_to_point_with_yaw+0x3cc>)
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fb31 	bl	80004a0 <__aeabi_f2d>
 8003e3e:	ec41 0b17 	vmov	d7, r0, r1
 8003e42:	4e29      	ldr	r6, [pc, #164]	; (8003ee8 <run_to_point_with_yaw+0x3d0>)
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <run_to_point_with_yaw+0x3d4>)
 8003e46:	ac29      	add	r4, sp, #164	; 0xa4
 8003e48:	461d      	mov	r5, r3
 8003e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <run_to_point_with_yaw+0x3d8>)
 8003e60:	ac1a      	add	r4, sp, #104	; 0x68
 8003e62:	461d      	mov	r5, r3
 8003e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <run_to_point_with_yaw+0x3dc>)
 8003e7a:	ac0b      	add	r4, sp, #44	; 0x2c
 8003e7c:	461d      	mov	r5, r3
 8003e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e92:	466d      	mov	r5, sp
 8003e94:	f106 0410 	add.w	r4, r6, #16
 8003e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ea4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ea8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003eac:	ed9f 3b06 	vldr	d3, [pc, #24]	; 8003ec8 <run_to_point_with_yaw+0x3b0>
 8003eb0:	eeb0 2a47 	vmov.f32	s4, s14
 8003eb4:	eef0 2a67 	vmov.f32	s5, s15
 8003eb8:	ec4b ab11 	vmov	d1, sl, fp
 8003ebc:	ec49 8b10 	vmov	d0, r8, r9
 8003ec0:	f7fd fc26 	bl	8001710 <agv_inverse_kinematic>
				return false;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e0f6      	b.n	80040b6 <run_to_point_with_yaw+0x59e>
	...
 8003ed0:	200004c8 	.word	0x200004c8
 8003ed4:	51eb851f 	.word	0x51eb851f
 8003ed8:	20000348 	.word	0x20000348
 8003edc:	20000420 	.word	0x20000420
 8003ee0:	200003e8 	.word	0x200003e8
 8003ee4:	20000490 	.word	0x20000490
 8003ee8:	200005b8 	.word	0x200005b8
 8003eec:	2000066c 	.word	0x2000066c
 8003ef0:	20000630 	.word	0x20000630
 8003ef4:	200005f4 	.word	0x200005f4
			}
			else{
				degree = (message_from_sensor.yaw)/100;
 8003ef8:	4b75      	ldr	r3, [pc, #468]	; (80040d0 <run_to_point_with_yaw+0x5b8>)
 8003efa:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8003efe:	4a75      	ldr	r2, [pc, #468]	; (80040d4 <run_to_point_with_yaw+0x5bc>)
 8003f00:	fb82 1203 	smull	r1, r2, r2, r3
 8003f04:	1152      	asrs	r2, r2, #5
 8003f06:	17db      	asrs	r3, r3, #31
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	b21b      	sxth	r3, r3
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fab5 	bl	800047c <__aeabi_i2d>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	e9c7 2308 	strd	r2, r3, [r7, #32]
				PIDController_Update(&pid_vx, sx, kinematic.Sx);
 8003f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f1e:	f7fc fdd9 	bl	8000ad4 <__aeabi_d2f>
 8003f22:	4604      	mov	r4, r0
 8003f24:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <run_to_point_with_yaw+0x5c0>)
 8003f26:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f7fc fdd1 	bl	8000ad4 <__aeabi_d2f>
 8003f32:	4603      	mov	r3, r0
 8003f34:	ee00 3a90 	vmov	s1, r3
 8003f38:	ee00 4a10 	vmov	s0, r4
 8003f3c:	4867      	ldr	r0, [pc, #412]	; (80040dc <run_to_point_with_yaw+0x5c4>)
 8003f3e:	f7fd fef1 	bl	8001d24 <PIDController_Update>
				PIDController_Update(&pid_vy, sy, kinematic.Sy);
 8003f42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f46:	f7fc fdc5 	bl	8000ad4 <__aeabi_d2f>
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4b62      	ldr	r3, [pc, #392]	; (80040d8 <run_to_point_with_yaw+0x5c0>)
 8003f4e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f7fc fdbd 	bl	8000ad4 <__aeabi_d2f>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	ee00 3a90 	vmov	s1, r3
 8003f60:	ee00 4a10 	vmov	s0, r4
 8003f64:	485e      	ldr	r0, [pc, #376]	; (80040e0 <run_to_point_with_yaw+0x5c8>)
 8003f66:	f7fd fedd 	bl	8001d24 <PIDController_Update>
				PIDController_Update(&pid_yaw, heading, degree);
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	ee07 3a90 	vmov	s15, r3
 8003f70:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003f74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f78:	f7fc fdac 	bl	8000ad4 <__aeabi_d2f>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	ee00 3a90 	vmov	s1, r3
 8003f82:	eeb0 0a48 	vmov.f32	s0, s16
 8003f86:	4857      	ldr	r0, [pc, #348]	; (80040e4 <run_to_point_with_yaw+0x5cc>)
 8003f88:	f7fd fecc 	bl	8001d24 <PIDController_Update>
				agv_reset_all(motor_A, motor_B, motor_C, motor_D);
 8003f8c:	4e56      	ldr	r6, [pc, #344]	; (80040e8 <run_to_point_with_yaw+0x5d0>)
 8003f8e:	4b57      	ldr	r3, [pc, #348]	; (80040ec <run_to_point_with_yaw+0x5d4>)
 8003f90:	ac29      	add	r4, sp, #164	; 0xa4
 8003f92:	461d      	mov	r5, r3
 8003f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fa8:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <run_to_point_with_yaw+0x5d8>)
 8003faa:	ac1a      	add	r4, sp, #104	; 0x68
 8003fac:	461d      	mov	r5, r3
 8003fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fc2:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <run_to_point_with_yaw+0x5dc>)
 8003fc4:	ac0b      	add	r4, sp, #44	; 0x2c
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fdc:	466d      	mov	r5, sp
 8003fde:	f106 0410 	add.w	r4, r6, #16
 8003fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003fee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ff2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ff6:	f7fd f88c 	bl	8001112 <agv_reset_all>
				agv_inverse_kinematic(pid_vx.out, pid_vy.out, (-pid_yaw.out), 0, motor_A, motor_B, motor_C, motor_D);
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <run_to_point_with_yaw+0x5c4>)
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc fa4e 	bl	80004a0 <__aeabi_f2d>
 8004004:	4680      	mov	r8, r0
 8004006:	4689      	mov	r9, r1
 8004008:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <run_to_point_with_yaw+0x5c8>)
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fa47 	bl	80004a0 <__aeabi_f2d>
 8004012:	4682      	mov	sl, r0
 8004014:	468b      	mov	fp, r1
 8004016:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <run_to_point_with_yaw+0x5cc>)
 8004018:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800401c:	eef1 7a67 	vneg.f32	s15, s15
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fa3b 	bl	80004a0 <__aeabi_f2d>
 800402a:	ec41 0b17 	vmov	d7, r0, r1
 800402e:	4e2e      	ldr	r6, [pc, #184]	; (80040e8 <run_to_point_with_yaw+0x5d0>)
 8004030:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <run_to_point_with_yaw+0x5d4>)
 8004032:	ac29      	add	r4, sp, #164	; 0xa4
 8004034:	461d      	mov	r5, r3
 8004036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800403a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800403c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800403e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <run_to_point_with_yaw+0x5d8>)
 800404c:	ac1a      	add	r4, sp, #104	; 0x68
 800404e:	461d      	mov	r5, r3
 8004050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800405a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800405c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <run_to_point_with_yaw+0x5dc>)
 8004066:	ac0b      	add	r4, sp, #44	; 0x2c
 8004068:	461d      	mov	r5, r3
 800406a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800406c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800406e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800407a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800407e:	466d      	mov	r5, sp
 8004080:	f106 0410 	add.w	r4, r6, #16
 8004084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800408a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800408c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004090:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004094:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004098:	ed9f 3b0b 	vldr	d3, [pc, #44]	; 80040c8 <run_to_point_with_yaw+0x5b0>
 800409c:	eeb0 2a47 	vmov.f32	s4, s14
 80040a0:	eef0 2a67 	vmov.f32	s5, s15
 80040a4:	ec4b ab11 	vmov	d1, sl, fp
 80040a8:	ec49 8b10 	vmov	d0, r8, r9
 80040ac:	f7fd fb30 	bl	8001710 <agv_inverse_kinematic>
				return false;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <run_to_point_with_yaw+0x59e>
			}

		}
		current_msgid = msgid;
	}
	return false;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	372c      	adds	r7, #44	; 0x2c
 80040ba:	46bd      	mov	sp, r7
 80040bc:	ecbd 8b02 	vpop	{d8}
 80040c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c4:	f3af 8000 	nop.w
	...
 80040d0:	200004c8 	.word	0x200004c8
 80040d4:	51eb851f 	.word	0x51eb851f
 80040d8:	20000348 	.word	0x20000348
 80040dc:	20000420 	.word	0x20000420
 80040e0:	200003e8 	.word	0x200003e8
 80040e4:	20000490 	.word	0x20000490
 80040e8:	200005b8 	.word	0x200005b8
 80040ec:	2000066c 	.word	0x2000066c
 80040f0:	20000630 	.word	0x20000630
 80040f4:	200005f4 	.word	0x200005f4

080040f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040fc:	b672      	cpsid	i
}
 80040fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004100:	e7fe      	b.n	8004100 <Error_Handler+0x8>
	...

08004104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <HAL_MspInit+0x4c>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <HAL_MspInit+0x4c>)
 8004114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004118:	6453      	str	r3, [r2, #68]	; 0x44
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <HAL_MspInit+0x4c>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_MspInit+0x4c>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <HAL_MspInit+0x4c>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_MspInit+0x4c>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800

08004154 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b090      	sub	sp, #64	; 0x40
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a83      	ldr	r2, [pc, #524]	; (8004380 <HAL_TIM_Encoder_MspInit+0x22c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d135      	bne.n	80041e2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
 800417a:	4b82      	ldr	r3, [pc, #520]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	4a81      	ldr	r2, [pc, #516]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6453      	str	r3, [r2, #68]	; 0x44
 8004186:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a7a      	ldr	r2, [pc, #488]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b78      	ldr	r3, [pc, #480]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041c0:	2301      	movs	r3, #1
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041c8:	4619      	mov	r1, r3
 80041ca:	486f      	ldr	r0, [pc, #444]	; (8004388 <HAL_TIM_Encoder_MspInit+0x234>)
 80041cc:	f001 f93e 	bl	800544c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2100      	movs	r1, #0
 80041d4:	201b      	movs	r0, #27
 80041d6:	f000 fd00 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80041da:	201b      	movs	r0, #27
 80041dc:	f000 fd19 	bl	8004c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80041e0:	e0ca      	b.n	8004378 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d152      	bne.n	8004292 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	4a63      	ldr	r2, [pc, #396]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6413      	str	r3, [r2, #64]	; 0x40
 80041fc:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6313      	str	r3, [r2, #48]	; 0x30
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	4a55      	ldr	r2, [pc, #340]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	6313      	str	r3, [r2, #48]	; 0x30
 8004234:	4b53      	ldr	r3, [pc, #332]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004240:	2320      	movs	r3, #32
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424c:	2300      	movs	r3, #0
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004250:	2301      	movs	r3, #1
 8004252:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004258:	4619      	mov	r1, r3
 800425a:	484b      	ldr	r0, [pc, #300]	; (8004388 <HAL_TIM_Encoder_MspInit+0x234>)
 800425c:	f001 f8f6 	bl	800544c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004260:	2308      	movs	r3, #8
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004270:	2301      	movs	r3, #1
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004278:	4619      	mov	r1, r3
 800427a:	4844      	ldr	r0, [pc, #272]	; (800438c <HAL_TIM_Encoder_MspInit+0x238>)
 800427c:	f001 f8e6 	bl	800544c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	201c      	movs	r0, #28
 8004286:	f000 fca8 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800428a:	201c      	movs	r0, #28
 800428c:	f000 fcc1 	bl	8004c12 <HAL_NVIC_EnableIRQ>
}
 8004290:	e072      	b.n	8004378 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a3e      	ldr	r2, [pc, #248]	; (8004390 <HAL_TIM_Encoder_MspInit+0x23c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d134      	bne.n	8004306 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	4a37      	ldr	r2, [pc, #220]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6413      	str	r3, [r2, #64]	; 0x40
 80042ac:	4b35      	ldr	r3, [pc, #212]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	4a30      	ldr	r2, [pc, #192]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80042c2:	f043 0302 	orr.w	r3, r3, #2
 80042c6:	6313      	str	r3, [r2, #48]	; 0x30
 80042c8:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042d4:	23c0      	movs	r3, #192	; 0xc0
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d8:	2302      	movs	r3, #2
 80042da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042e4:	2302      	movs	r3, #2
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ec:	4619      	mov	r1, r3
 80042ee:	4827      	ldr	r0, [pc, #156]	; (800438c <HAL_TIM_Encoder_MspInit+0x238>)
 80042f0:	f001 f8ac 	bl	800544c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	201e      	movs	r0, #30
 80042fa:	f000 fc6e 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042fe:	201e      	movs	r0, #30
 8004300:	f000 fc87 	bl	8004c12 <HAL_NVIC_EnableIRQ>
}
 8004304:	e038      	b.n	8004378 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <HAL_TIM_Encoder_MspInit+0x240>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d133      	bne.n	8004378 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800431a:	f043 0308 	orr.w	r3, r3, #8
 800431e:	6413      	str	r3, [r2, #64]	; 0x40
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6313      	str	r3, [r2, #48]	; 0x30
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_TIM_Encoder_MspInit+0x230>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004348:	2303      	movs	r3, #3
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	2300      	movs	r3, #0
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004358:	2302      	movs	r3, #2
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004360:	4619      	mov	r1, r3
 8004362:	4809      	ldr	r0, [pc, #36]	; (8004388 <HAL_TIM_Encoder_MspInit+0x234>)
 8004364:	f001 f872 	bl	800544c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004368:	2200      	movs	r2, #0
 800436a:	2100      	movs	r1, #0
 800436c:	2032      	movs	r0, #50	; 0x32
 800436e:	f000 fc34 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004372:	2032      	movs	r0, #50	; 0x32
 8004374:	f000 fc4d 	bl	8004c12 <HAL_NVIC_EnableIRQ>
}
 8004378:	bf00      	nop
 800437a:	3740      	adds	r7, #64	; 0x40
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40010000 	.word	0x40010000
 8004384:	40023800 	.word	0x40023800
 8004388:	40020000 	.word	0x40020000
 800438c:	40020400 	.word	0x40020400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00

08004398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a29      	ldr	r2, [pc, #164]	; (800444c <HAL_TIM_Base_MspInit+0xb4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a27      	ldr	r2, [pc, #156]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 80043b4:	f043 0302 	orr.w	r3, r3, #2
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80043c6:	e03a      	b.n	800443e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a21      	ldr	r2, [pc, #132]	; (8004454 <HAL_TIM_Base_MspInit+0xbc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10e      	bne.n	80043f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6453      	str	r3, [r2, #68]	; 0x44
 80043e2:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
}
 80043ee:	e026      	b.n	800443e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_TIM_Base_MspInit+0xc0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	6453      	str	r3, [r2, #68]	; 0x44
 800440a:	4b11      	ldr	r3, [pc, #68]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
}
 8004416:	e012      	b.n	800443e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0f      	ldr	r2, [pc, #60]	; (800445c <HAL_TIM_Base_MspInit+0xc4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10d      	bne.n	800443e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6453      	str	r3, [r2, #68]	; 0x44
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_TIM_Base_MspInit+0xb8>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40000400 	.word	0x40000400
 8004450:	40023800 	.word	0x40023800
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800

08004460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	; 0x30
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 031c 	add.w	r3, r7, #28
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a58      	ldr	r2, [pc, #352]	; (80045e0 <HAL_TIM_MspPostInit+0x180>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d13c      	bne.n	80044fc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b54      	ldr	r3, [pc, #336]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a4f      	ldr	r2, [pc, #316]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 80044a8:	f043 0302 	orr.w	r3, r3, #2
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b4d      	ldr	r3, [pc, #308]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ba:	23c0      	movs	r3, #192	; 0xc0
 80044bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c6:	2300      	movs	r3, #0
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044ca:	2302      	movs	r3, #2
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ce:	f107 031c 	add.w	r3, r7, #28
 80044d2:	4619      	mov	r1, r3
 80044d4:	4844      	ldr	r0, [pc, #272]	; (80045e8 <HAL_TIM_MspPostInit+0x188>)
 80044d6:	f000 ffb9 	bl	800544c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044da:	2303      	movs	r3, #3
 80044dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044de:	2302      	movs	r3, #2
 80044e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044ea:	2302      	movs	r3, #2
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ee:	f107 031c 	add.w	r3, r7, #28
 80044f2:	4619      	mov	r1, r3
 80044f4:	483d      	ldr	r0, [pc, #244]	; (80045ec <HAL_TIM_MspPostInit+0x18c>)
 80044f6:	f000 ffa9 	bl	800544c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80044fa:	e06c      	b.n	80045d6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM9)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <HAL_TIM_MspPostInit+0x190>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d11e      	bne.n	8004544 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a35      	ldr	r2, [pc, #212]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004522:	230c      	movs	r3, #12
 8004524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004532:	2303      	movs	r3, #3
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	f107 031c 	add.w	r3, r7, #28
 800453a:	4619      	mov	r1, r3
 800453c:	482a      	ldr	r0, [pc, #168]	; (80045e8 <HAL_TIM_MspPostInit+0x188>)
 800453e:	f000 ff85 	bl	800544c <HAL_GPIO_Init>
}
 8004542:	e048      	b.n	80045d6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_TIM_MspPostInit+0x194>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d11f      	bne.n	800458e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800456a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800456e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800457c:	2303      	movs	r3, #3
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	4819      	ldr	r0, [pc, #100]	; (80045ec <HAL_TIM_MspPostInit+0x18c>)
 8004588:	f000 ff60 	bl	800544c <HAL_GPIO_Init>
}
 800458c:	e023      	b.n	80045d6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM11)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_TIM_MspPostInit+0x198>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d11e      	bne.n	80045d6 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 80045a2:	f043 0302 	orr.w	r3, r3, #2
 80045a6:	6313      	str	r3, [r2, #48]	; 0x30
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <HAL_TIM_MspPostInit+0x184>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	2302      	movs	r3, #2
 80045bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c2:	2300      	movs	r3, #0
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80045c6:	2303      	movs	r3, #3
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ca:	f107 031c 	add.w	r3, r7, #28
 80045ce:	4619      	mov	r1, r3
 80045d0:	4806      	ldr	r0, [pc, #24]	; (80045ec <HAL_TIM_MspPostInit+0x18c>)
 80045d2:	f000 ff3b 	bl	800544c <HAL_GPIO_Init>
}
 80045d6:	bf00      	nop
 80045d8:	3730      	adds	r7, #48	; 0x30
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800

080045fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	605a      	str	r2, [r3, #4]
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <HAL_UART_MspInit+0xf4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d163      	bne.n	80046e6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_UART_MspInit+0xf8>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a33      	ldr	r2, [pc, #204]	; (80046f4 <HAL_UART_MspInit+0xf8>)
 8004628:	f043 0320 	orr.w	r3, r3, #32
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <HAL_UART_MspInit+0xf8>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <HAL_UART_MspInit+0xf8>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a2c      	ldr	r2, [pc, #176]	; (80046f4 <HAL_UART_MspInit+0xf8>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <HAL_UART_MspInit+0xf8>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004656:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800465a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004664:	2303      	movs	r3, #3
 8004666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004668:	2308      	movs	r3, #8
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4619      	mov	r1, r3
 8004672:	4821      	ldr	r0, [pc, #132]	; (80046f8 <HAL_UART_MspInit+0xfc>)
 8004674:	f000 feea 	bl	800544c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_UART_MspInit+0x100>)
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_UART_MspInit+0x104>)
 800467c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800467e:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <HAL_UART_MspInit+0x100>)
 8004680:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004684:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_UART_MspInit+0x100>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_UART_MspInit+0x100>)
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_UART_MspInit+0x100>)
 8004694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004698:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800469a:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_UART_MspInit+0x100>)
 800469c:	2200      	movs	r2, #0
 800469e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80046ba:	4810      	ldr	r0, [pc, #64]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046bc:	f000 fac4 	bl	8004c48 <HAL_DMA_Init>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80046c6:	f7ff fd17 	bl	80040f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <HAL_UART_MspInit+0x100>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80046d6:	2200      	movs	r2, #0
 80046d8:	2100      	movs	r1, #0
 80046da:	2047      	movs	r0, #71	; 0x47
 80046dc:	f000 fa7d 	bl	8004bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80046e0:	2047      	movs	r0, #71	; 0x47
 80046e2:	f000 fa96 	bl	8004c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80046e6:	bf00      	nop
 80046e8:	3728      	adds	r7, #40	; 0x28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40011400 	.word	0x40011400
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40020000 	.word	0x40020000
 80046fc:	200002cc 	.word	0x200002cc
 8004700:	40026428 	.word	0x40026428

08004704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004708:	e7fe      	b.n	8004708 <NMI_Handler+0x4>

0800470a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800470e:	e7fe      	b.n	800470e <HardFault_Handler+0x4>

08004710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004714:	e7fe      	b.n	8004714 <MemManage_Handler+0x4>

08004716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800471a:	e7fe      	b.n	800471a <BusFault_Handler+0x4>

0800471c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004720:	e7fe      	b.n	8004720 <UsageFault_Handler+0x4>

08004722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indexPos++;
 8004750:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <SysTick_Handler+0xa8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <SysTick_Handler+0xa8>)
 8004758:	6013      	str	r3, [r2, #0]
		if(indexPos == 500){
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <SysTick_Handler+0xa8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004762:	d142      	bne.n	80047ea <SysTick_Handler+0x9e>
			encoder_A.speed = ((encoder_A.position-encoder_A.old_position)*2); // * 2 karena 500ms
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <SysTick_Handler+0xac>)
 8004766:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800476a:	461a      	mov	r2, r3
 800476c:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <SysTick_Handler+0xac>)
 800476e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <SysTick_Handler+0xac>)
 8004778:	6153      	str	r3, [r2, #20]
			encoder_A.old_position = encoder_A.position;
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <SysTick_Handler+0xac>)
 800477c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <SysTick_Handler+0xac>)
 8004782:	821a      	strh	r2, [r3, #16]

			encoder_B.speed = ((encoder_B.position-encoder_B.old_position)*2);
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <SysTick_Handler+0xb0>)
 8004786:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800478a:	461a      	mov	r2, r3
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <SysTick_Handler+0xb0>)
 800478e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4a19      	ldr	r2, [pc, #100]	; (80047fc <SysTick_Handler+0xb0>)
 8004798:	6153      	str	r3, [r2, #20]
			encoder_B.old_position = encoder_B.position;
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <SysTick_Handler+0xb0>)
 800479c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80047a0:	4b16      	ldr	r3, [pc, #88]	; (80047fc <SysTick_Handler+0xb0>)
 80047a2:	821a      	strh	r2, [r3, #16]

			encoder_C.speed = ((encoder_C.position-encoder_C.old_position)*2);
 80047a4:	4b16      	ldr	r3, [pc, #88]	; (8004800 <SysTick_Handler+0xb4>)
 80047a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b14      	ldr	r3, [pc, #80]	; (8004800 <SysTick_Handler+0xb4>)
 80047ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <SysTick_Handler+0xb4>)
 80047b8:	6153      	str	r3, [r2, #20]
			encoder_C.old_position = encoder_C.position;
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <SysTick_Handler+0xb4>)
 80047bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <SysTick_Handler+0xb4>)
 80047c2:	821a      	strh	r2, [r3, #16]

			encoder_D.speed = ((encoder_D.position-encoder_D.old_position)*2);
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <SysTick_Handler+0xb8>)
 80047c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047ca:	461a      	mov	r2, r3
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <SysTick_Handler+0xb8>)
 80047ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <SysTick_Handler+0xb8>)
 80047d8:	6153      	str	r3, [r2, #20]
			encoder_D.old_position = encoder_D.position;
 80047da:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <SysTick_Handler+0xb8>)
 80047dc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <SysTick_Handler+0xb8>)
 80047e2:	821a      	strh	r2, [r3, #16]

			indexPos = 0;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <SysTick_Handler+0xa8>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ea:	f000 f8d7 	bl	800499c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000708 	.word	0x20000708
 80047f8:	200006a8 	.word	0x200006a8
 80047fc:	200006c0 	.word	0x200006c0
 8004800:	200006d8 	.word	0x200006d8
 8004804:	200006f0 	.word	0x200006f0

08004808 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800480c:	4802      	ldr	r0, [pc, #8]	; (8004818 <TIM1_CC_IRQHandler+0x10>)
 800480e:	f001 febf 	bl	8006590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000044 	.word	0x20000044

0800481c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004820:	4802      	ldr	r0, [pc, #8]	; (800482c <TIM2_IRQHandler+0x10>)
 8004822:	f001 feb5 	bl	8006590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2000008c 	.word	0x2000008c

08004830 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004834:	4802      	ldr	r0, [pc, #8]	; (8004840 <TIM4_IRQHandler+0x10>)
 8004836:	f001 feab 	bl	8006590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000011c 	.word	0x2000011c

08004844 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004848:	4802      	ldr	r0, [pc, #8]	; (8004854 <TIM5_IRQHandler+0x10>)
 800484a:	f001 fea1 	bl	8006590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000164 	.word	0x20000164

08004858 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800485c:	4802      	ldr	r0, [pc, #8]	; (8004868 <DMA2_Stream1_IRQHandler+0x10>)
 800485e:	f000 fb8b 	bl	8004f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200002cc 	.word	0x200002cc

0800486c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <USART6_IRQHandler+0x10>)
 8004872:	f002 fcff 	bl	8007274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000284 	.word	0x20000284

08004880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <SystemInit+0x20>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <SystemInit+0x20>)
 800488c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80048a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048a8:	f7ff ffea 	bl	8004880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048ac:	480c      	ldr	r0, [pc, #48]	; (80048e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048ae:	490d      	ldr	r1, [pc, #52]	; (80048e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048b0:	4a0d      	ldr	r2, [pc, #52]	; (80048e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b4:	e002      	b.n	80048bc <LoopCopyDataInit>

080048b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ba:	3304      	adds	r3, #4

080048bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048c0:	d3f9      	bcc.n	80048b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048c4:	4c0a      	ldr	r4, [pc, #40]	; (80048f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c8:	e001      	b.n	80048ce <LoopFillZerobss>

080048ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048cc:	3204      	adds	r2, #4

080048ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048d0:	d3fb      	bcc.n	80048ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048d2:	f003 fd65 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048d6:	f7fe fa53 	bl	8002d80 <main>
  bx  lr    
 80048da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80048dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80048e8:	08009730 	.word	0x08009730
  ldr r2, =_sbss
 80048ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80048f0:	20000710 	.word	0x20000710

080048f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048f4:	e7fe      	b.n	80048f4 <ADC_IRQHandler>
	...

080048f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_Init+0x40>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <HAL_Init+0x40>)
 8004902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_Init+0x40>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <HAL_Init+0x40>)
 800490e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_Init+0x40>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a07      	ldr	r2, [pc, #28]	; (8004938 <HAL_Init+0x40>)
 800491a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004920:	2003      	movs	r0, #3
 8004922:	f000 f94f 	bl	8004bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004926:	200f      	movs	r0, #15
 8004928:	f000 f808 	bl	800493c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800492c:	f7ff fbea 	bl	8004104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023c00 	.word	0x40023c00

0800493c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <HAL_InitTick+0x54>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_InitTick+0x58>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4619      	mov	r1, r3
 800494e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004952:	fbb3 f3f1 	udiv	r3, r3, r1
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f967 	bl	8004c2e <HAL_SYSTICK_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e00e      	b.n	8004988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d80a      	bhi.n	8004986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004970:	2200      	movs	r2, #0
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004978:	f000 f92f 	bl	8004bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800497c:	4a06      	ldr	r2, [pc, #24]	; (8004998 <HAL_InitTick+0x5c>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000000 	.word	0x20000000
 8004994:	20000008 	.word	0x20000008
 8004998:	20000004 	.word	0x20000004

0800499c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_IncTick+0x20>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_IncTick+0x24>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_IncTick+0x24>)
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000008 	.word	0x20000008
 80049c0:	2000070c 	.word	0x2000070c

080049c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return uwTick;
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <HAL_GetTick+0x14>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	2000070c 	.word	0x2000070c

080049dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049e4:	f7ff ffee 	bl	80049c4 <HAL_GetTick>
 80049e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d005      	beq.n	8004a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_Delay+0x44>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a02:	bf00      	nop
 8004a04:	f7ff ffde 	bl	80049c4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d8f7      	bhi.n	8004a04 <HAL_Delay+0x28>
  {
  }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000008 	.word	0x20000008

08004a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a40:	4013      	ands	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	60d3      	str	r3, [r2, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <__NVIC_GetPriorityGrouping+0x18>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 0307 	and.w	r3, r3, #7
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	db0b      	blt.n	8004ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	4907      	ldr	r1, [pc, #28]	; (8004ac0 <__NVIC_EnableIRQ+0x38>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000e100 	.word	0xe000e100

08004ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db0a      	blt.n	8004aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	490c      	ldr	r1, [pc, #48]	; (8004b10 <__NVIC_SetPriority+0x4c>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aec:	e00a      	b.n	8004b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4908      	ldr	r1, [pc, #32]	; (8004b14 <__NVIC_SetPriority+0x50>)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	3b04      	subs	r3, #4
 8004afc:	0112      	lsls	r2, r2, #4
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	761a      	strb	r2, [r3, #24]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000e100 	.word	0xe000e100
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b089      	sub	sp, #36	; 0x24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f1c3 0307 	rsb	r3, r3, #7
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	bf28      	it	cs
 8004b36:	2304      	movcs	r3, #4
 8004b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d902      	bls.n	8004b48 <NVIC_EncodePriority+0x30>
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3b03      	subs	r3, #3
 8004b46:	e000      	b.n	8004b4a <NVIC_EncodePriority+0x32>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	43d9      	mvns	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b70:	4313      	orrs	r3, r2
         );
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3724      	adds	r7, #36	; 0x24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b90:	d301      	bcc.n	8004b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00f      	b.n	8004bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b96:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <SysTick_Config+0x40>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b9e:	210f      	movs	r1, #15
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba4:	f7ff ff8e 	bl	8004ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <SysTick_Config+0x40>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <SysTick_Config+0x40>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010

08004bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff29 	bl	8004a24 <__NVIC_SetPriorityGrouping>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4603      	mov	r3, r0
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bec:	f7ff ff3e 	bl	8004a6c <__NVIC_GetPriorityGrouping>
 8004bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	f7ff ff8e 	bl	8004b18 <NVIC_EncodePriority>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff5d 	bl	8004ac4 <__NVIC_SetPriority>
}
 8004c0a:	bf00      	nop
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	4603      	mov	r3, r0
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff ff31 	bl	8004a88 <__NVIC_EnableIRQ>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ffa2 	bl	8004b80 <SysTick_Config>
 8004c3c:	4603      	mov	r3, r0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c54:	f7ff feb6 	bl	80049c4 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e099      	b.n	8004d98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c84:	e00f      	b.n	8004ca6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c86:	f7ff fe9d 	bl	80049c4 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d908      	bls.n	8004ca6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e078      	b.n	8004d98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e8      	bne.n	8004c86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <HAL_DMA_Init+0x158>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d107      	bne.n	8004d10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d117      	bne.n	8004d6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00e      	beq.n	8004d6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fb01 	bl	8005354 <DMA_CheckFifoParam>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2240      	movs	r2, #64	; 0x40
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d66:	2301      	movs	r3, #1
 8004d68:	e016      	b.n	8004d98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fab8 	bl	80052e8 <DMA_CalcBaseAndBitshift>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	223f      	movs	r2, #63	; 0x3f
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	f010803f 	.word	0xf010803f

08004da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_Start_IT+0x26>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e040      	b.n	8004e4c <HAL_DMA_Start_IT+0xa8>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d12f      	bne.n	8004e3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fa4a 	bl	800528c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	223f      	movs	r2, #63	; 0x3f
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0216 	orr.w	r2, r2, #22
 8004e12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0208 	orr.w	r2, r2, #8
 8004e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e005      	b.n	8004e4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
 8004e48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e62:	f7ff fdaf 	bl	80049c4 <HAL_GetTick>
 8004e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d008      	beq.n	8004e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e052      	b.n	8004f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0216 	bic.w	r2, r2, #22
 8004e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_DMA_Abort+0x62>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0208 	bic.w	r2, r2, #8
 8004ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ed6:	e013      	b.n	8004f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed8:	f7ff fd74 	bl	80049c4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d90c      	bls.n	8004f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e015      	b.n	8004f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e4      	bne.n	8004ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	223f      	movs	r2, #63	; 0x3f
 8004f14:	409a      	lsls	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e00c      	b.n	8004f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2205      	movs	r2, #5
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f84:	4b8e      	ldr	r3, [pc, #568]	; (80051c0 <HAL_DMA_IRQHandler+0x248>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a8e      	ldr	r2, [pc, #568]	; (80051c4 <HAL_DMA_IRQHandler+0x24c>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01a      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0201 	orr.w	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	2201      	movs	r2, #1
 8005008:	409a      	lsls	r2, r3
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f043 0202 	orr.w	r2, r3, #2
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	2204      	movs	r2, #4
 8005020:	409a      	lsls	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4013      	ands	r3, r2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	2204      	movs	r2, #4
 800503e:	409a      	lsls	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	f043 0204 	orr.w	r2, r3, #4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005054:	2210      	movs	r2, #16
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d043      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03c      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	2210      	movs	r2, #16
 8005074:	409a      	lsls	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d018      	beq.n	80050ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d108      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d024      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
 80050a6:	e01f      	b.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
 80050b8:	e016      	b.n	80050e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0208 	bic.w	r2, r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	2220      	movs	r2, #32
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 808f 	beq.w	8005218 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8087 	beq.w	8005218 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	2220      	movs	r2, #32
 8005110:	409a      	lsls	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b05      	cmp	r3, #5
 8005120:	d136      	bne.n	8005190 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0216 	bic.w	r2, r2, #22
 8005130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005140:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_DMA_IRQHandler+0x1da>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0208 	bic.w	r2, r2, #8
 8005160:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	223f      	movs	r2, #63	; 0x3f
 8005168:	409a      	lsls	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d07e      	beq.n	8005284 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
        }
        return;
 800518e:	e079      	b.n	8005284 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01d      	beq.n	80051da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
 80051bc:	e02c      	b.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
 80051be:	bf00      	nop
 80051c0:	20000000 	.word	0x20000000
 80051c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d023      	beq.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
 80051d8:	e01e      	b.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0210 	bic.w	r2, r2, #16
 80051f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	2b00      	cmp	r3, #0
 800521e:	d032      	beq.n	8005286 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d022      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2205      	movs	r2, #5
 8005230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3301      	adds	r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d307      	bcc.n	8005260 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f2      	bne.n	8005244 <HAL_DMA_IRQHandler+0x2cc>
 800525e:	e000      	b.n	8005262 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005260:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
 8005282:	e000      	b.n	8005286 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005284:	bf00      	nop
    }
  }
}
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ca:	e007      	b.n	80052dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3b10      	subs	r3, #16
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <DMA_CalcBaseAndBitshift+0x64>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <DMA_CalcBaseAndBitshift+0x68>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d909      	bls.n	800532a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	; 0x58
 8005328:	e007      	b.n	800533a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	aaaaaaab 	.word	0xaaaaaaab
 8005350:	08009540 	.word	0x08009540

08005354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d856      	bhi.n	8005422 <DMA_CheckFifoParam+0xce>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x28>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800539f 	.word	0x0800539f
 8005384:	0800538d 	.word	0x0800538d
 8005388:	08005423 	.word	0x08005423
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d046      	beq.n	8005426 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e043      	b.n	8005426 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d140      	bne.n	800542a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ac:	e03d      	b.n	800542a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d121      	bne.n	80053fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d837      	bhi.n	800542e <DMA_CheckFifoParam+0xda>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x70>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053db 	.word	0x080053db
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	080053ed 	.word	0x080053ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e030      	b.n	800543c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d025      	beq.n	8005432 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ea:	e022      	b.n	8005432 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053f4:	d11f      	bne.n	8005436 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fa:	e01c      	b.n	8005436 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d903      	bls.n	800540a <DMA_CheckFifoParam+0xb6>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d003      	beq.n	8005410 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005408:	e018      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	e015      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e00b      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005422:	bf00      	nop
 8005424:	e00a      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 8005426:	bf00      	nop
 8005428:	e008      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800542a:	bf00      	nop
 800542c:	e006      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e004      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 8005432:	bf00      	nop
 8005434:	e002      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;   
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800543a:	bf00      	nop
    }
  } 
  
  return status; 
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop

0800544c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	e159      	b.n	800571c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005468:	2201      	movs	r2, #1
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	f040 8148 	bne.w	8005716 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d005      	beq.n	800549e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549a:	2b02      	cmp	r3, #2
 800549c:	d130      	bne.n	8005500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	2203      	movs	r2, #3
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4013      	ands	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 0201 	and.w	r2, r3, #1
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b03      	cmp	r3, #3
 800550a:	d017      	beq.n	800553c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	2203      	movs	r2, #3
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d123      	bne.n	8005590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	220f      	movs	r2, #15
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	08da      	lsrs	r2, r3, #3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3208      	adds	r2, #8
 800558a:	69b9      	ldr	r1, [r7, #24]
 800558c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	2203      	movs	r2, #3
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0203 	and.w	r2, r3, #3
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80a2 	beq.w	8005716 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	4b57      	ldr	r3, [pc, #348]	; (8005734 <HAL_GPIO_Init+0x2e8>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	4a56      	ldr	r2, [pc, #344]	; (8005734 <HAL_GPIO_Init+0x2e8>)
 80055dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e0:	6453      	str	r3, [r2, #68]	; 0x44
 80055e2:	4b54      	ldr	r3, [pc, #336]	; (8005734 <HAL_GPIO_Init+0x2e8>)
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ee:	4a52      	ldr	r2, [pc, #328]	; (8005738 <HAL_GPIO_Init+0x2ec>)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	3302      	adds	r3, #2
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	220f      	movs	r2, #15
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a49      	ldr	r2, [pc, #292]	; (800573c <HAL_GPIO_Init+0x2f0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d019      	beq.n	800564e <HAL_GPIO_Init+0x202>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a48      	ldr	r2, [pc, #288]	; (8005740 <HAL_GPIO_Init+0x2f4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_GPIO_Init+0x1fe>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a47      	ldr	r2, [pc, #284]	; (8005744 <HAL_GPIO_Init+0x2f8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00d      	beq.n	8005646 <HAL_GPIO_Init+0x1fa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a46      	ldr	r2, [pc, #280]	; (8005748 <HAL_GPIO_Init+0x2fc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <HAL_GPIO_Init+0x1f6>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a45      	ldr	r2, [pc, #276]	; (800574c <HAL_GPIO_Init+0x300>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d101      	bne.n	800563e <HAL_GPIO_Init+0x1f2>
 800563a:	2304      	movs	r3, #4
 800563c:	e008      	b.n	8005650 <HAL_GPIO_Init+0x204>
 800563e:	2307      	movs	r3, #7
 8005640:	e006      	b.n	8005650 <HAL_GPIO_Init+0x204>
 8005642:	2303      	movs	r3, #3
 8005644:	e004      	b.n	8005650 <HAL_GPIO_Init+0x204>
 8005646:	2302      	movs	r3, #2
 8005648:	e002      	b.n	8005650 <HAL_GPIO_Init+0x204>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_GPIO_Init+0x204>
 800564e:	2300      	movs	r3, #0
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	f002 0203 	and.w	r2, r2, #3
 8005656:	0092      	lsls	r2, r2, #2
 8005658:	4093      	lsls	r3, r2
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005660:	4935      	ldr	r1, [pc, #212]	; (8005738 <HAL_GPIO_Init+0x2ec>)
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	3302      	adds	r3, #2
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800566e:	4b38      	ldr	r3, [pc, #224]	; (8005750 <HAL_GPIO_Init+0x304>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005692:	4a2f      	ldr	r2, [pc, #188]	; (8005750 <HAL_GPIO_Init+0x304>)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005698:	4b2d      	ldr	r3, [pc, #180]	; (8005750 <HAL_GPIO_Init+0x304>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_GPIO_Init+0x304>)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056c2:	4b23      	ldr	r3, [pc, #140]	; (8005750 <HAL_GPIO_Init+0x304>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056e6:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <HAL_GPIO_Init+0x304>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ec:	4b18      	ldr	r3, [pc, #96]	; (8005750 <HAL_GPIO_Init+0x304>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005710:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <HAL_GPIO_Init+0x304>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3301      	adds	r3, #1
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	f67f aea2 	bls.w	8005468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	3724      	adds	r7, #36	; 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800
 8005738:	40013800 	.word	0x40013800
 800573c:	40020000 	.word	0x40020000
 8005740:	40020400 	.word	0x40020400
 8005744:	40020800 	.word	0x40020800
 8005748:	40020c00 	.word	0x40020c00
 800574c:	40021000 	.word	0x40021000
 8005750:	40013c00 	.word	0x40013c00

08005754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005764:	787b      	ldrb	r3, [r7, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005770:	e003      	b.n	800577a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	041a      	lsls	r2, r3, #16
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	619a      	str	r2, [r3, #24]
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e267      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d075      	beq.n	8005892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a6:	4b88      	ldr	r3, [pc, #544]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d00c      	beq.n	80057cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b2:	4b85      	ldr	r3, [pc, #532]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d112      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057be:	4b82      	ldr	r3, [pc, #520]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	4b7e      	ldr	r3, [pc, #504]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d05b      	beq.n	8005890 <HAL_RCC_OscConfig+0x108>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d157      	bne.n	8005890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e242      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d106      	bne.n	80057fc <HAL_RCC_OscConfig+0x74>
 80057ee:	4b76      	ldr	r3, [pc, #472]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a75      	ldr	r2, [pc, #468]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e01d      	b.n	8005838 <HAL_RCC_OscConfig+0xb0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0x98>
 8005806:	4b70      	ldr	r3, [pc, #448]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6f      	ldr	r2, [pc, #444]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 800580c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b6d      	ldr	r3, [pc, #436]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6c      	ldr	r2, [pc, #432]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e00b      	b.n	8005838 <HAL_RCC_OscConfig+0xb0>
 8005820:	4b69      	ldr	r3, [pc, #420]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a68      	ldr	r2, [pc, #416]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4b66      	ldr	r3, [pc, #408]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a65      	ldr	r2, [pc, #404]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7ff f8c0 	bl	80049c4 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005848:	f7ff f8bc 	bl	80049c4 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e207      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b5b      	ldr	r3, [pc, #364]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0xc0>
 8005866:	e014      	b.n	8005892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7ff f8ac 	bl	80049c4 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005870:	f7ff f8a8 	bl	80049c4 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e1f3      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005882:	4b51      	ldr	r3, [pc, #324]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0xe8>
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d063      	beq.n	8005966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800589e:	4b4a      	ldr	r3, [pc, #296]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058aa:	4b47      	ldr	r3, [pc, #284]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d11c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b6:	4b44      	ldr	r3, [pc, #272]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c2:	4b41      	ldr	r3, [pc, #260]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCC_OscConfig+0x152>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d001      	beq.n	80058da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e1c7      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058da:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4937      	ldr	r1, [pc, #220]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ee:	e03a      	b.n	8005966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f8:	4b34      	ldr	r3, [pc, #208]	; (80059cc <HAL_RCC_OscConfig+0x244>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fe:	f7ff f861 	bl	80049c4 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005906:	f7ff f85d 	bl	80049c4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e1a8      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005918:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005924:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4925      	ldr	r1, [pc, #148]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]
 8005938:	e015      	b.n	8005966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_RCC_OscConfig+0x244>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7ff f840 	bl	80049c4 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005948:	f7ff f83c 	bl	80049c4 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e187      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d036      	beq.n	80059e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <HAL_RCC_OscConfig+0x248>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7ff f820 	bl	80049c4 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005988:	f7ff f81c 	bl	80049c4 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e167      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_OscConfig+0x240>)
 800599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x200>
 80059a6:	e01b      	b.n	80059e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_RCC_OscConfig+0x248>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ae:	f7ff f809 	bl	80049c4 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b4:	e00e      	b.n	80059d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b6:	f7ff f805 	bl	80049c4 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d907      	bls.n	80059d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e150      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
 80059c8:	40023800 	.word	0x40023800
 80059cc:	42470000 	.word	0x42470000
 80059d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d4:	4b88      	ldr	r3, [pc, #544]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 80059d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1ea      	bne.n	80059b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8097 	beq.w	8005b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f2:	4b81      	ldr	r3, [pc, #516]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	4b7d      	ldr	r3, [pc, #500]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	4a7c      	ldr	r2, [pc, #496]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0e:	4b7a      	ldr	r3, [pc, #488]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	60bb      	str	r3, [r7, #8]
 8005a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1e:	4b77      	ldr	r3, [pc, #476]	; (8005bfc <HAL_RCC_OscConfig+0x474>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d118      	bne.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a2a:	4b74      	ldr	r3, [pc, #464]	; (8005bfc <HAL_RCC_OscConfig+0x474>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a73      	ldr	r2, [pc, #460]	; (8005bfc <HAL_RCC_OscConfig+0x474>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a36:	f7fe ffc5 	bl	80049c4 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3e:	f7fe ffc1 	bl	80049c4 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e10c      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <HAL_RCC_OscConfig+0x474>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d106      	bne.n	8005a72 <HAL_RCC_OscConfig+0x2ea>
 8005a64:	4b64      	ldr	r3, [pc, #400]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	4a63      	ldr	r2, [pc, #396]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a70:	e01c      	b.n	8005aac <HAL_RCC_OscConfig+0x324>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x30c>
 8005a7a:	4b5f      	ldr	r3, [pc, #380]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a5e      	ldr	r2, [pc, #376]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a80:	f043 0304 	orr.w	r3, r3, #4
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0x324>
 8005a94:	4b58      	ldr	r3, [pc, #352]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	4a57      	ldr	r2, [pc, #348]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa0:	4b55      	ldr	r3, [pc, #340]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa4:	4a54      	ldr	r2, [pc, #336]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005aa6:	f023 0304 	bic.w	r3, r3, #4
 8005aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d015      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fe ff86 	bl	80049c4 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abc:	f7fe ff82 	bl	80049c4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0cb      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	4b49      	ldr	r3, [pc, #292]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0ee      	beq.n	8005abc <HAL_RCC_OscConfig+0x334>
 8005ade:	e014      	b.n	8005b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae0:	f7fe ff70 	bl	80049c4 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae6:	e00a      	b.n	8005afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae8:	f7fe ff6c 	bl	80049c4 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e0b5      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afe:	4b3e      	ldr	r3, [pc, #248]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ee      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b10:	4b39      	ldr	r3, [pc, #228]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	4a38      	ldr	r2, [pc, #224]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80a1 	beq.w	8005c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b26:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d05c      	beq.n	8005bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d141      	bne.n	8005bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_RCC_OscConfig+0x478>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b40:	f7fe ff40 	bl	80049c4 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b48:	f7fe ff3c 	bl	80049c4 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e087      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5a:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69da      	ldr	r2, [r3, #28]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	019b      	lsls	r3, r3, #6
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	491b      	ldr	r1, [pc, #108]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b90:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_RCC_OscConfig+0x478>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b96:	f7fe ff15 	bl	80049c4 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b9e:	f7fe ff11 	bl	80049c4 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e05c      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x416>
 8005bbc:	e054      	b.n	8005c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <HAL_RCC_OscConfig+0x478>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fe fefe 	bl	80049c4 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bcc:	f7fe fefa 	bl	80049c4 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e045      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_RCC_OscConfig+0x470>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0x444>
 8005bea:	e03d      	b.n	8005c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e038      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	40007000 	.word	0x40007000
 8005c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_RCC_OscConfig+0x4ec>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d028      	beq.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d121      	bne.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d11a      	bne.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c34:	4013      	ands	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d111      	bne.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800

08005c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0cc      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c8c:	4b68      	ldr	r3, [pc, #416]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d90c      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9a:	4b65      	ldr	r3, [pc, #404]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0b8      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d020      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ccc:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	4a58      	ldr	r2, [pc, #352]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce4:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a52      	ldr	r2, [pc, #328]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf0:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	494d      	ldr	r1, [pc, #308]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d044      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d107      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	4b47      	ldr	r3, [pc, #284]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d119      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e07f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d36:	4b3f      	ldr	r3, [pc, #252]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e06f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d46:	4b3b      	ldr	r3, [pc, #236]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e067      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d56:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4934      	ldr	r1, [pc, #208]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d68:	f7fe fe2c 	bl	80049c4 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fe fe28 	bl	80049c4 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e04f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d20c      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e032      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4916      	ldr	r1, [pc, #88]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	490e      	ldr	r1, [pc, #56]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dfe:	f000 f821 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005e02:	4602      	mov	r2, r0
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	490a      	ldr	r1, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005e10:	5ccb      	ldrb	r3, [r1, r3]
 8005e12:	fa22 f303 	lsr.w	r3, r2, r3
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fd8c 	bl	800493c <HAL_InitTick>

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40023c00 	.word	0x40023c00
 8005e34:	40023800 	.word	0x40023800
 8005e38:	08009528 	.word	0x08009528
 8005e3c:	20000000 	.word	0x20000000
 8005e40:	20000004 	.word	0x20000004

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e48:	b090      	sub	sp, #64	; 0x40
 8005e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e50:	2300      	movs	r3, #0
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e54:	2300      	movs	r3, #0
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e5c:	4b59      	ldr	r3, [pc, #356]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d00d      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x40>
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	f200 80a1 	bhi.w	8005fb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x34>
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d003      	beq.n	8005e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e76:	e09b      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e78:	4b53      	ldr	r3, [pc, #332]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005e7c:	e09b      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e7e:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005e80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e82:	e098      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e84:	4b4f      	ldr	r3, [pc, #316]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e8e:	4b4d      	ldr	r3, [pc, #308]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d028      	beq.n	8005eec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9a:	4b4a      	ldr	r3, [pc, #296]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005eac:	2100      	movs	r1, #0
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005eb0:	fb03 f201 	mul.w	r2, r3, r1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	fb00 f303 	mul.w	r3, r0, r3
 8005eba:	4413      	add	r3, r2
 8005ebc:	4a43      	ldr	r2, [pc, #268]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ebe:	fba0 1202 	umull	r1, r2, r0, r2
 8005ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec4:	460a      	mov	r2, r1
 8005ec6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eca:	4413      	add	r3, r2
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	61fa      	str	r2, [r7, #28]
 8005ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ede:	f7fa fe49 	bl	8000b74 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eea:	e053      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eec:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	099b      	lsrs	r3, r3, #6
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	617a      	str	r2, [r7, #20]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005efe:	f04f 0b00 	mov.w	fp, #0
 8005f02:	4652      	mov	r2, sl
 8005f04:	465b      	mov	r3, fp
 8005f06:	f04f 0000 	mov.w	r0, #0
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	0159      	lsls	r1, r3, #5
 8005f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f14:	0150      	lsls	r0, r2, #5
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	ebb2 080a 	subs.w	r8, r2, sl
 8005f1e:	eb63 090b 	sbc.w	r9, r3, fp
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f36:	ebb2 0408 	subs.w	r4, r2, r8
 8005f3a:	eb63 0509 	sbc.w	r5, r3, r9
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	00eb      	lsls	r3, r5, #3
 8005f48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f4c:	00e2      	lsls	r2, r4, #3
 8005f4e:	4614      	mov	r4, r2
 8005f50:	461d      	mov	r5, r3
 8005f52:	eb14 030a 	adds.w	r3, r4, sl
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	eb45 030b 	adc.w	r3, r5, fp
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	028b      	lsls	r3, r1, #10
 8005f6e:	4621      	mov	r1, r4
 8005f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f74:	4621      	mov	r1, r4
 8005f76:	028a      	lsls	r2, r1, #10
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	2200      	movs	r2, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	60fa      	str	r2, [r7, #12]
 8005f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f88:	f7fa fdf4 	bl	8000b74 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4613      	mov	r3, r2
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fae:	e002      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3740      	adds	r7, #64	; 0x40
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	00f42400 	.word	0x00f42400
 8005fcc:	017d7840 	.word	0x017d7840

08005fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000000 	.word	0x20000000

08005fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fec:	f7ff fff0 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	0a9b      	lsrs	r3, r3, #10
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4903      	ldr	r1, [pc, #12]	; (800600c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006004:	4618      	mov	r0, r3
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40023800 	.word	0x40023800
 800600c:	08009538 	.word	0x08009538

08006010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006014:	f7ff ffdc 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8006018:	4602      	mov	r2, r0
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0b5b      	lsrs	r3, r3, #13
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	4903      	ldr	r1, [pc, #12]	; (8006034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006026:	5ccb      	ldrb	r3, [r1, r3]
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40023800 	.word	0x40023800
 8006034:	08009538 	.word	0x08009538

08006038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e041      	b.n	80060ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fe f99a 	bl	8004398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f000 fd2c 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e041      	b.n	800616c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f839 	bl	8006174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f000 fcdd 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <HAL_TIM_PWM_Start+0x24>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e022      	b.n	80061f2 <HAL_TIM_PWM_Start+0x6a>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d109      	bne.n	80061c6 <HAL_TIM_PWM_Start+0x3e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	bf14      	ite	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	2300      	moveq	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	e015      	b.n	80061f2 <HAL_TIM_PWM_Start+0x6a>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x58>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e008      	b.n	80061f2 <HAL_TIM_PWM_Start+0x6a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e068      	b.n	80062cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0x82>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	e013      	b.n	8006232 <HAL_TIM_PWM_Start+0xaa>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0x92>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006218:	e00b      	b.n	8006232 <HAL_TIM_PWM_Start+0xaa>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0xa2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006228:	e003      	b.n	8006232 <HAL_TIM_PWM_Start+0xaa>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fefc 	bl	8007038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_TIM_PWM_Start+0x14c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d107      	bne.n	800625a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <HAL_TIM_PWM_Start+0x14c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_TIM_PWM_Start+0x10e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d013      	beq.n	8006296 <HAL_TIM_PWM_Start+0x10e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <HAL_TIM_PWM_Start+0x150>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIM_PWM_Start+0x10e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a17      	ldr	r2, [pc, #92]	; (80062dc <HAL_TIM_PWM_Start+0x154>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_TIM_PWM_Start+0x10e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <HAL_TIM_PWM_Start+0x158>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIM_PWM_Start+0x10e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <HAL_TIM_PWM_Start+0x15c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d010      	beq.n	80062ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b8:	e007      	b.n	80062ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40014000 	.word	0x40014000

080062e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e097      	b.n	800642c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7fd ff1f 	bl	8004154 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800632c:	f023 0307 	bic.w	r3, r3, #7
 8006330:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f000 fbc9 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	4313      	orrs	r3, r2
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006388:	f023 030c 	bic.w	r3, r3, #12
 800638c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	4313      	orrs	r3, r2
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	011a      	lsls	r2, r3, #4
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	031b      	lsls	r3, r3, #12
 80063b8:	4313      	orrs	r3, r2
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	4313      	orrs	r3, r2
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006444:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800644c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006454:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800645c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d110      	bne.n	8006486 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d102      	bne.n	8006470 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800646a:	7b7b      	ldrb	r3, [r7, #13]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d001      	beq.n	8006474 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e089      	b.n	8006588 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006484:	e031      	b.n	80064ea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d110      	bne.n	80064ae <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d102      	bne.n	8006498 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006492:	7b3b      	ldrb	r3, [r7, #12]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d001      	beq.n	800649c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e075      	b.n	8006588 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ac:	e01d      	b.n	80064ea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d108      	bne.n	80064c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d105      	bne.n	80064c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ba:	7b7b      	ldrb	r3, [r7, #13]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d102      	bne.n	80064c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c0:	7b3b      	ldrb	r3, [r7, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d001      	beq.n	80064ca <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e05e      	b.n	8006588 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d010      	beq.n	8006518 <HAL_TIM_Encoder_Start_IT+0xe4>
 80064f6:	e01f      	b.n	8006538 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	2100      	movs	r1, #0
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fd99 	bl	8007038 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0202 	orr.w	r2, r2, #2
 8006514:	60da      	str	r2, [r3, #12]
      break;
 8006516:	e02e      	b.n	8006576 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2201      	movs	r2, #1
 800651e:	2104      	movs	r1, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fd89 	bl	8007038 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0204 	orr.w	r2, r2, #4
 8006534:	60da      	str	r2, [r3, #12]
      break;
 8006536:	e01e      	b.n	8006576 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2201      	movs	r2, #1
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fd79 	bl	8007038 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2201      	movs	r2, #1
 800654c:	2104      	movs	r1, #4
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fd72 	bl	8007038 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0202 	orr.w	r2, r2, #2
 8006562:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0204 	orr.w	r2, r2, #4
 8006572:	60da      	str	r2, [r3, #12]
      break;
 8006574:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0201 	orr.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d020      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01b      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0202 	mvn.w	r2, #2
 80065c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fc f888 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80065e0:	e005      	b.n	80065ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa57 	bl	8006a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa5e 	bl	8006aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d020      	beq.n	8006640 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0204 	mvn.w	r2, #4
 8006610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fc f862 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 800662c:	e005      	b.n	800663a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa31 	bl	8006a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa38 	bl	8006aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01b      	beq.n	800668c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0208 	mvn.w	r2, #8
 800665c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2204      	movs	r2, #4
 8006662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fc f83c 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa0b 	bl	8006a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa12 	bl	8006aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b00      	cmp	r3, #0
 8006694:	d020      	beq.n	80066d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0210 	mvn.w	r2, #16
 80066a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2208      	movs	r2, #8
 80066ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fc f816 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9e5 	bl	8006a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9ec 	bl	8006aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00c      	beq.n	80066fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0201 	mvn.w	r2, #1
 80066f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9c3 	bl	8006a82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fd2a 	bl	8007174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9bd 	bl	8006abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0220 	mvn.w	r2, #32
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fcfc 	bl	8007160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800678a:	2302      	movs	r3, #2
 800678c:	e0ae      	b.n	80068ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b0c      	cmp	r3, #12
 800679a:	f200 809f 	bhi.w	80068dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067d9 	.word	0x080067d9
 80067a8:	080068dd 	.word	0x080068dd
 80067ac:	080068dd 	.word	0x080068dd
 80067b0:	080068dd 	.word	0x080068dd
 80067b4:	08006819 	.word	0x08006819
 80067b8:	080068dd 	.word	0x080068dd
 80067bc:	080068dd 	.word	0x080068dd
 80067c0:	080068dd 	.word	0x080068dd
 80067c4:	0800685b 	.word	0x0800685b
 80067c8:	080068dd 	.word	0x080068dd
 80067cc:	080068dd 	.word	0x080068dd
 80067d0:	080068dd 	.word	0x080068dd
 80067d4:	0800689b 	.word	0x0800689b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fa04 	bl	8006bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0208 	orr.w	r2, r2, #8
 80067f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0204 	bic.w	r2, r2, #4
 8006802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6999      	ldr	r1, [r3, #24]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	619a      	str	r2, [r3, #24]
      break;
 8006816:	e064      	b.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fa4a 	bl	8006cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	021a      	lsls	r2, r3, #8
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	619a      	str	r2, [r3, #24]
      break;
 8006858:	e043      	b.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fa95 	bl	8006d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69da      	ldr	r2, [r3, #28]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0208 	orr.w	r2, r2, #8
 8006874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0204 	bic.w	r2, r2, #4
 8006884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69d9      	ldr	r1, [r3, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	61da      	str	r2, [r3, #28]
      break;
 8006898:	e023      	b.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fadf 	bl	8006e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	021a      	lsls	r2, r3, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	61da      	str	r2, [r3, #28]
      break;
 80068da:	e002      	b.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
      break;
 80068e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIM_ConfigClockSource+0x1c>
 800690c:	2302      	movs	r3, #2
 800690e:	e0b4      	b.n	8006a7a <HAL_TIM_ConfigClockSource+0x186>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800692e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006948:	d03e      	beq.n	80069c8 <HAL_TIM_ConfigClockSource+0xd4>
 800694a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694e:	f200 8087 	bhi.w	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	f000 8086 	beq.w	8006a66 <HAL_TIM_ConfigClockSource+0x172>
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d87f      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b70      	cmp	r3, #112	; 0x70
 8006962:	d01a      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xa6>
 8006964:	2b70      	cmp	r3, #112	; 0x70
 8006966:	d87b      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b60      	cmp	r3, #96	; 0x60
 800696a:	d050      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0x11a>
 800696c:	2b60      	cmp	r3, #96	; 0x60
 800696e:	d877      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b50      	cmp	r3, #80	; 0x50
 8006972:	d03c      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0xfa>
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d873      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d058      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x13a>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d86f      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	2b30      	cmp	r3, #48	; 0x30
 8006982:	d064      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15a>
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d86b      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b20      	cmp	r3, #32
 800698a:	d060      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15a>
 800698c:	2b20      	cmp	r3, #32
 800698e:	d867      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d05c      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15a>
 8006994:	2b10      	cmp	r3, #16
 8006996:	d05a      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15a>
 8006998:	e062      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069aa:	f000 fb25 	bl	8006ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	609a      	str	r2, [r3, #8]
      break;
 80069c6:	e04f      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	f000 fb0e 	bl	8006ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ea:	609a      	str	r2, [r3, #8]
      break;
 80069ec:	e03c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fa:	461a      	mov	r2, r3
 80069fc:	f000 fa82 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2150      	movs	r1, #80	; 0x50
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fadb 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006a0c:	e02c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f000 faa1 	bl	8006f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2160      	movs	r1, #96	; 0x60
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 facb 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006a2c:	e01c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 fa62 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2140      	movs	r1, #64	; 0x40
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fabb 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006a4c:	e00c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f000 fab2 	bl	8006fc2 <TIM_ITRx_SetConfig>
      break;
 8006a5e:	e003      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
      break;
 8006a64:	e000      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3a      	ldr	r2, [pc, #232]	; (8006bd0 <TIM_Base_SetConfig+0xfc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00f      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d00b      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a37      	ldr	r2, [pc, #220]	; (8006bd4 <TIM_Base_SetConfig+0x100>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a36      	ldr	r2, [pc, #216]	; (8006bd8 <TIM_Base_SetConfig+0x104>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a35      	ldr	r2, [pc, #212]	; (8006bdc <TIM_Base_SetConfig+0x108>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d108      	bne.n	8006b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <TIM_Base_SetConfig+0xfc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01b      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d017      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <TIM_Base_SetConfig+0x100>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <TIM_Base_SetConfig+0x104>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <TIM_Base_SetConfig+0x108>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a25      	ldr	r2, [pc, #148]	; (8006be0 <TIM_Base_SetConfig+0x10c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <TIM_Base_SetConfig+0x110>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a0e      	ldr	r2, [pc, #56]	; (8006bd0 <TIM_Base_SetConfig+0xfc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d103      	bne.n	8006ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d105      	bne.n	8006bc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	f023 0201 	bic.w	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 0302 	bic.w	r3, r3, #2
 8006c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <TIM_OC1_SetConfig+0xc8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d10c      	bne.n	8006c62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0308 	bic.w	r3, r3, #8
 8006c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f023 0304 	bic.w	r3, r3, #4
 8006c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <TIM_OC1_SetConfig+0xc8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d111      	bne.n	8006c8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40010000 	.word	0x40010000

08006cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f023 0210 	bic.w	r2, r3, #16
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0320 	bic.w	r3, r3, #32
 8006d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <TIM_OC2_SetConfig+0xd4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10d      	bne.n	8006d34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <TIM_OC2_SetConfig+0xd4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d113      	bne.n	8006d64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000

08006d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <TIM_OC3_SetConfig+0xd0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10d      	bne.n	8006e0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a14      	ldr	r2, [pc, #80]	; (8006e60 <TIM_OC3_SetConfig+0xd0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d113      	bne.n	8006e3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40010000 	.word	0x40010000

08006e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a10      	ldr	r2, [pc, #64]	; (8006f00 <TIM_OC4_SetConfig+0x9c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d109      	bne.n	8006ed8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40010000 	.word	0x40010000

08006f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0201 	bic.w	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f023 030a 	bic.w	r3, r3, #10
 8006f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b087      	sub	sp, #28
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f023 0210 	bic.w	r2, r3, #16
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f043 0307 	orr.w	r3, r3, #7
 8006fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	021a      	lsls	r2, r3, #8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	431a      	orrs	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4313      	orrs	r3, r2
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	609a      	str	r2, [r3, #8]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	2201      	movs	r2, #1
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	43db      	mvns	r3, r3
 800705a:	401a      	ands	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	fa01 f303 	lsl.w	r3, r1, r3
 8007070:	431a      	orrs	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007098:	2302      	movs	r3, #2
 800709a:	e050      	b.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1c      	ldr	r2, [pc, #112]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d018      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e8:	d013      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a18      	ldr	r2, [pc, #96]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a16      	ldr	r2, [pc, #88]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a15      	ldr	r2, [pc, #84]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a13      	ldr	r2, [pc, #76]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d10c      	bne.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4313      	orrs	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40014000 	.word	0x40014000

08007160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e042      	b.n	8007220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fd fa24 	bl	80045fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2224      	movs	r2, #36	; 0x24
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fe6b 	bl	8007ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695a      	ldr	r2, [r3, #20]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b20      	cmp	r3, #32
 8007240:	d112      	bne.n	8007268 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_UART_Receive_DMA+0x26>
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e00b      	b.n	800726a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	461a      	mov	r2, r3
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fbc2 	bl	80079e8 <UART_Start_Receive_DMA>
 8007264:	4603      	mov	r3, r0
 8007266:	e000      	b.n	800726a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007268:	2302      	movs	r3, #2
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b0ba      	sub	sp, #232	; 0xe8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800729a:	2300      	movs	r3, #0
 800729c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10f      	bne.n	80072da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_UART_IRQHandler+0x66>
 80072c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fd29 	bl	8007d2a <UART_Receive_IT>
      return;
 80072d8:	e25b      	b.n	8007792 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 80de 	beq.w	80074a0 <HAL_UART_IRQHandler+0x22c>
 80072e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80d1 	beq.w	80074a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <HAL_UART_IRQHandler+0xae>
 800730a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f043 0201 	orr.w	r2, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <HAL_UART_IRQHandler+0xd2>
 800732e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	f043 0202 	orr.w	r2, r3, #2
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <HAL_UART_IRQHandler+0xf6>
 8007352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007362:	f043 0204 	orr.w	r2, r3, #4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d011      	beq.n	800739a <HAL_UART_IRQHandler+0x126>
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d105      	bne.n	800738e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	f043 0208 	orr.w	r2, r3, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 81f2 	beq.w	8007788 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <HAL_UART_IRQHandler+0x14e>
 80073b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fcb4 	bl	8007d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <HAL_UART_IRQHandler+0x17a>
 80073e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04f      	beq.n	800748e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fbbc 	bl	8007b6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d141      	bne.n	8007486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800741c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3314      	adds	r3, #20
 800742a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800742e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800743a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d9      	bne.n	8007402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	4a7e      	ldr	r2, [pc, #504]	; (8007654 <HAL_UART_IRQHandler+0x3e0>)
 800745c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	4618      	mov	r0, r3
 8007464:	f7fd fd66 	bl	8004f34 <HAL_DMA_Abort_IT>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d016      	beq.n	800749c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	e00e      	b.n	800749c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f99e 	bl	80077c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e00a      	b.n	800749c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f99a 	bl	80077c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e006      	b.n	800749c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f996 	bl	80077c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800749a:	e175      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	bf00      	nop
    return;
 800749e:	e173      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	f040 814f 	bne.w	8007748 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 8148 	beq.w	8007748 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8141 	beq.w	8007748 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	f040 80b6 	bne.w	8007658 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8145 	beq.w	800778c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800750a:	429a      	cmp	r2, r3
 800750c:	f080 813e 	bcs.w	800778c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007522:	f000 8088 	beq.w	8007636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800753c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800755e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800756a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1d9      	bne.n	8007526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3314      	adds	r3, #20
 8007578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3314      	adds	r3, #20
 8007592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800759a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800759e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e1      	bne.n	8007572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3314      	adds	r3, #20
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007606:	f023 0310 	bic.w	r3, r3, #16
 800760a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007618:	65ba      	str	r2, [r7, #88]	; 0x58
 800761a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800761e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	4618      	mov	r0, r3
 8007632:	f7fd fc0f 	bl	8004e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007644:	b29b      	uxth	r3, r3
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	b29b      	uxth	r3, r3
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f8c1 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007652:	e09b      	b.n	800778c <HAL_UART_IRQHandler+0x518>
 8007654:	08007c33 	.word	0x08007c33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007660:	b29b      	uxth	r3, r3
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 808e 	beq.w	8007790 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8089 	beq.w	8007790 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076a2:	647a      	str	r2, [r7, #68]	; 0x44
 80076a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e3      	bne.n	800767e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3314      	adds	r3, #20
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	623b      	str	r3, [r7, #32]
   return(result);
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3314      	adds	r3, #20
 80076d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076da:	633a      	str	r2, [r7, #48]	; 0x30
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e3      	bne.n	80076b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	60fb      	str	r3, [r7, #12]
   return(result);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0310 	bic.w	r3, r3, #16
 8007712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007720:	61fa      	str	r2, [r7, #28]
 8007722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	69b9      	ldr	r1, [r7, #24]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	617b      	str	r3, [r7, #20]
   return(result);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e3      	bne.n	80076fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800773a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f847 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007746:	e023      	b.n	8007790 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <HAL_UART_IRQHandler+0x4f4>
 8007754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa7a 	bl	8007c5a <UART_Transmit_IT>
    return;
 8007766:	e014      	b.n	8007792 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00e      	beq.n	8007792 <HAL_UART_IRQHandler+0x51e>
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 faba 	bl	8007cfa <UART_EndTransmit_IT>
    return;
 8007786:	e004      	b.n	8007792 <HAL_UART_IRQHandler+0x51e>
    return;
 8007788:	bf00      	nop
 800778a:	e002      	b.n	8007792 <HAL_UART_IRQHandler+0x51e>
      return;
 800778c:	bf00      	nop
 800778e:	e000      	b.n	8007792 <HAL_UART_IRQHandler+0x51e>
      return;
 8007790:	bf00      	nop
  }
}
 8007792:	37e8      	adds	r7, #232	; 0xe8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b09c      	sub	sp, #112	; 0x70
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d172      	bne.n	80078ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780a:	2200      	movs	r2, #0
 800780c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800780e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007824:	66bb      	str	r3, [r7, #104]	; 0x68
 8007826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800782e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007830:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800783c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e5      	bne.n	800780e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3314      	adds	r3, #20
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	667b      	str	r3, [r7, #100]	; 0x64
 800785a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3314      	adds	r3, #20
 8007860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007862:	647a      	str	r2, [r7, #68]	; 0x44
 8007864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e5      	bne.n	8007842 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	623b      	str	r3, [r7, #32]
   return(result);
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788c:	663b      	str	r3, [r7, #96]	; 0x60
 800788e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007896:	633a      	str	r2, [r7, #48]	; 0x30
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800789c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d119      	bne.n	80078ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f023 0310 	bic.w	r3, r3, #16
 80078d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078da:	61fa      	str	r2, [r7, #28]
 80078dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	69b9      	ldr	r1, [r7, #24]
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	617b      	str	r3, [r7, #20]
   return(result);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e5      	bne.n	80078ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f0:	2200      	movs	r2, #0
 80078f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d106      	bne.n	800790a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007900:	4619      	mov	r1, r3
 8007902:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007904:	f7ff ff66 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007908:	e002      	b.n	8007910 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800790a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800790c:	f7fb fa1e 	bl	8002d4c <HAL_UART_RxCpltCallback>
}
 8007910:	bf00      	nop
 8007912:	3770      	adds	r7, #112	; 0x70
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	2b01      	cmp	r3, #1
 8007932:	d108      	bne.n	8007946 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	4619      	mov	r1, r3
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff ff48 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007944:	e002      	b.n	800794c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f7ff ff30 	bl	80077ac <HAL_UART_RxHalfCpltCallback>
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	bf0c      	ite	eq
 8007974:	2301      	moveq	r3, #1
 8007976:	2300      	movne	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b21      	cmp	r3, #33	; 0x21
 8007986:	d108      	bne.n	800799a <UART_DMAError+0x46>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f000 f8c1 	bl	8007b1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b40      	cmp	r3, #64	; 0x40
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b22      	cmp	r3, #34	; 0x22
 80079ba:	d108      	bne.n	80079ce <UART_DMAError+0x7a>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80079c8:	68b8      	ldr	r0, [r7, #8]
 80079ca:	f000 f8cf 	bl	8007b6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f043 0210 	orr.w	r2, r3, #16
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079da:	68b8      	ldr	r0, [r7, #8]
 80079dc:	f7ff fef0 	bl	80077c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b098      	sub	sp, #96	; 0x60
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2222      	movs	r2, #34	; 0x22
 8007a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	4a3e      	ldr	r2, [pc, #248]	; (8007b10 <UART_Start_Receive_DMA+0x128>)
 8007a16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <UART_Start_Receive_DMA+0x12c>)
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a24:	4a3c      	ldr	r2, [pc, #240]	; (8007b18 <UART_Start_Receive_DMA+0x130>)
 8007a26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a30:	f107 0308 	add.w	r3, r7, #8
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	f7fd f9ac 	bl	8004da4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d019      	beq.n	8007a9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3314      	adds	r3, #20
 8007abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007abe:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e5      	bne.n	8007a9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3314      	adds	r3, #20
 8007ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae8:	653b      	str	r3, [r7, #80]	; 0x50
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3314      	adds	r3, #20
 8007af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007af2:	627a      	str	r2, [r7, #36]	; 0x24
 8007af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6a39      	ldr	r1, [r7, #32]
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3760      	adds	r7, #96	; 0x60
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	080077ed 	.word	0x080077ed
 8007b14:	08007919 	.word	0x08007919
 8007b18:	08007955 	.word	0x08007955

08007b1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	61ba      	str	r2, [r7, #24]
 8007b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	613b      	str	r3, [r7, #16]
   return(result);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e5      	bne.n	8007b24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007b60:	bf00      	nop
 8007b62:	3724      	adds	r7, #36	; 0x24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b095      	sub	sp, #84	; 0x54
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b94:	643a      	str	r2, [r7, #64]	; 0x40
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e5      	bne.n	8007b74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f023 0301 	bic.w	r3, r3, #1
 8007bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3314      	adds	r3, #20
 8007bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e5      	bne.n	8007ba8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d119      	bne.n	8007c18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	330c      	adds	r3, #12
 8007bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f023 0310 	bic.w	r3, r3, #16
 8007bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c04:	61ba      	str	r2, [r7, #24]
 8007c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6979      	ldr	r1, [r7, #20]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	613b      	str	r3, [r7, #16]
   return(result);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c26:	bf00      	nop
 8007c28:	3754      	adds	r7, #84	; 0x54
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fdb7 	bl	80077c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b21      	cmp	r3, #33	; 0x21
 8007c6c:	d13e      	bne.n	8007cec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c76:	d114      	bne.n	8007ca2 <UART_Transmit_IT+0x48>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d110      	bne.n	8007ca2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	1c9a      	adds	r2, r3, #2
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	621a      	str	r2, [r3, #32]
 8007ca0:	e008      	b.n	8007cb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6211      	str	r1, [r2, #32]
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10f      	bne.n	8007ce8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e000      	b.n	8007cee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cec:	2302      	movs	r3, #2
  }
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fd3c 	bl	8007798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b08c      	sub	sp, #48	; 0x30
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b22      	cmp	r3, #34	; 0x22
 8007d3c:	f040 80ae 	bne.w	8007e9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d117      	bne.n	8007d7a <UART_Receive_IT+0x50>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d113      	bne.n	8007d7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	1c9a      	adds	r2, r3, #2
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	629a      	str	r2, [r3, #40]	; 0x28
 8007d78:	e026      	b.n	8007dc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8c:	d007      	beq.n	8007d9e <UART_Receive_IT+0x74>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10a      	bne.n	8007dac <UART_Receive_IT+0x82>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e008      	b.n	8007dbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d15d      	bne.n	8007e98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0220 	bic.w	r2, r2, #32
 8007dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695a      	ldr	r2, [r3, #20]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d135      	bne.n	8007e8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	613b      	str	r3, [r7, #16]
   return(result);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f023 0310 	bic.w	r3, r3, #16
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	330c      	adds	r3, #12
 8007e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e48:	623a      	str	r2, [r7, #32]
 8007e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	69f9      	ldr	r1, [r7, #28]
 8007e4e:	6a3a      	ldr	r2, [r7, #32]
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e5      	bne.n	8007e28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d10a      	bne.n	8007e80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fca4 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
 8007e8c:	e002      	b.n	8007e94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fa ff5c 	bl	8002d4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e002      	b.n	8007e9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3730      	adds	r7, #48	; 0x30
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eac:	b0c0      	sub	sp, #256	; 0x100
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec4:	68d9      	ldr	r1, [r3, #12]
 8007ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	ea40 0301 	orr.w	r3, r0, r1
 8007ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f00:	f021 010c 	bic.w	r1, r1, #12
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f22:	6999      	ldr	r1, [r3, #24]
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	ea40 0301 	orr.w	r3, r0, r1
 8007f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b8f      	ldr	r3, [pc, #572]	; (8008174 <UART_SetConfig+0x2cc>)
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d005      	beq.n	8007f48 <UART_SetConfig+0xa0>
 8007f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4b8d      	ldr	r3, [pc, #564]	; (8008178 <UART_SetConfig+0x2d0>)
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d104      	bne.n	8007f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f48:	f7fe f862 	bl	8006010 <HAL_RCC_GetPCLK2Freq>
 8007f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f50:	e003      	b.n	8007f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f52:	f7fe f849 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 8007f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f64:	f040 810c 	bne.w	8008180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	1891      	adds	r1, r2, r2
 8007f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f82:	415b      	adcs	r3, r3
 8007f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	eb12 0801 	adds.w	r8, r2, r1
 8007f90:	4629      	mov	r1, r5
 8007f92:	eb43 0901 	adc.w	r9, r3, r1
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	f04f 0300 	mov.w	r3, #0
 8007f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007faa:	4690      	mov	r8, r2
 8007fac:	4699      	mov	r9, r3
 8007fae:	4623      	mov	r3, r4
 8007fb0:	eb18 0303 	adds.w	r3, r8, r3
 8007fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fb8:	462b      	mov	r3, r5
 8007fba:	eb49 0303 	adc.w	r3, r9, r3
 8007fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	18db      	adds	r3, r3, r3
 8007fda:	653b      	str	r3, [r7, #80]	; 0x50
 8007fdc:	4613      	mov	r3, r2
 8007fde:	eb42 0303 	adc.w	r3, r2, r3
 8007fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fec:	f7f8 fdc2 	bl	8000b74 <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4b61      	ldr	r3, [pc, #388]	; (800817c <UART_SetConfig+0x2d4>)
 8007ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffa:	095b      	lsrs	r3, r3, #5
 8007ffc:	011c      	lsls	r4, r3, #4
 8007ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008002:	2200      	movs	r2, #0
 8008004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800800c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	1891      	adds	r1, r2, r2
 8008016:	64b9      	str	r1, [r7, #72]	; 0x48
 8008018:	415b      	adcs	r3, r3
 800801a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800801c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008020:	4641      	mov	r1, r8
 8008022:	eb12 0a01 	adds.w	sl, r2, r1
 8008026:	4649      	mov	r1, r9
 8008028:	eb43 0b01 	adc.w	fp, r3, r1
 800802c:	f04f 0200 	mov.w	r2, #0
 8008030:	f04f 0300 	mov.w	r3, #0
 8008034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800803c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008040:	4692      	mov	sl, r2
 8008042:	469b      	mov	fp, r3
 8008044:	4643      	mov	r3, r8
 8008046:	eb1a 0303 	adds.w	r3, sl, r3
 800804a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800804e:	464b      	mov	r3, r9
 8008050:	eb4b 0303 	adc.w	r3, fp, r3
 8008054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800806c:	460b      	mov	r3, r1
 800806e:	18db      	adds	r3, r3, r3
 8008070:	643b      	str	r3, [r7, #64]	; 0x40
 8008072:	4613      	mov	r3, r2
 8008074:	eb42 0303 	adc.w	r3, r2, r3
 8008078:	647b      	str	r3, [r7, #68]	; 0x44
 800807a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800807e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008082:	f7f8 fd77 	bl	8000b74 <__aeabi_uldivmod>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4611      	mov	r1, r2
 800808c:	4b3b      	ldr	r3, [pc, #236]	; (800817c <UART_SetConfig+0x2d4>)
 800808e:	fba3 2301 	umull	r2, r3, r3, r1
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	2264      	movs	r2, #100	; 0x64
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	1acb      	subs	r3, r1, r3
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080a2:	4b36      	ldr	r3, [pc, #216]	; (800817c <UART_SetConfig+0x2d4>)
 80080a4:	fba3 2302 	umull	r2, r3, r3, r2
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080b0:	441c      	add	r4, r3
 80080b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080c4:	4642      	mov	r2, r8
 80080c6:	464b      	mov	r3, r9
 80080c8:	1891      	adds	r1, r2, r2
 80080ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80080cc:	415b      	adcs	r3, r3
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080d4:	4641      	mov	r1, r8
 80080d6:	1851      	adds	r1, r2, r1
 80080d8:	6339      	str	r1, [r7, #48]	; 0x30
 80080da:	4649      	mov	r1, r9
 80080dc:	414b      	adcs	r3, r1
 80080de:	637b      	str	r3, [r7, #52]	; 0x34
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080ec:	4659      	mov	r1, fp
 80080ee:	00cb      	lsls	r3, r1, #3
 80080f0:	4651      	mov	r1, sl
 80080f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080f6:	4651      	mov	r1, sl
 80080f8:	00ca      	lsls	r2, r1, #3
 80080fa:	4610      	mov	r0, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	4603      	mov	r3, r0
 8008100:	4642      	mov	r2, r8
 8008102:	189b      	adds	r3, r3, r2
 8008104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008108:	464b      	mov	r3, r9
 800810a:	460a      	mov	r2, r1
 800810c:	eb42 0303 	adc.w	r3, r2, r3
 8008110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008128:	460b      	mov	r3, r1
 800812a:	18db      	adds	r3, r3, r3
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
 800812e:	4613      	mov	r3, r2
 8008130:	eb42 0303 	adc.w	r3, r2, r3
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800813a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800813e:	f7f8 fd19 	bl	8000b74 <__aeabi_uldivmod>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4b0d      	ldr	r3, [pc, #52]	; (800817c <UART_SetConfig+0x2d4>)
 8008148:	fba3 1302 	umull	r1, r3, r3, r2
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	2164      	movs	r1, #100	; 0x64
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	3332      	adds	r3, #50	; 0x32
 800815a:	4a08      	ldr	r2, [pc, #32]	; (800817c <UART_SetConfig+0x2d4>)
 800815c:	fba2 2303 	umull	r2, r3, r2, r3
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	f003 0207 	and.w	r2, r3, #7
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4422      	add	r2, r4
 800816e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008170:	e106      	b.n	8008380 <UART_SetConfig+0x4d8>
 8008172:	bf00      	nop
 8008174:	40011000 	.word	0x40011000
 8008178:	40011400 	.word	0x40011400
 800817c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008184:	2200      	movs	r2, #0
 8008186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800818a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800818e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008192:	4642      	mov	r2, r8
 8008194:	464b      	mov	r3, r9
 8008196:	1891      	adds	r1, r2, r2
 8008198:	6239      	str	r1, [r7, #32]
 800819a:	415b      	adcs	r3, r3
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
 800819e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081a2:	4641      	mov	r1, r8
 80081a4:	1854      	adds	r4, r2, r1
 80081a6:	4649      	mov	r1, r9
 80081a8:	eb43 0501 	adc.w	r5, r3, r1
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	00eb      	lsls	r3, r5, #3
 80081b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ba:	00e2      	lsls	r2, r4, #3
 80081bc:	4614      	mov	r4, r2
 80081be:	461d      	mov	r5, r3
 80081c0:	4643      	mov	r3, r8
 80081c2:	18e3      	adds	r3, r4, r3
 80081c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081c8:	464b      	mov	r3, r9
 80081ca:	eb45 0303 	adc.w	r3, r5, r3
 80081ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081ee:	4629      	mov	r1, r5
 80081f0:	008b      	lsls	r3, r1, #2
 80081f2:	4621      	mov	r1, r4
 80081f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081f8:	4621      	mov	r1, r4
 80081fa:	008a      	lsls	r2, r1, #2
 80081fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008200:	f7f8 fcb8 	bl	8000b74 <__aeabi_uldivmod>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4b60      	ldr	r3, [pc, #384]	; (800838c <UART_SetConfig+0x4e4>)
 800820a:	fba3 2302 	umull	r2, r3, r3, r2
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	011c      	lsls	r4, r3, #4
 8008212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008216:	2200      	movs	r2, #0
 8008218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800821c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	1891      	adds	r1, r2, r2
 800822a:	61b9      	str	r1, [r7, #24]
 800822c:	415b      	adcs	r3, r3
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008234:	4641      	mov	r1, r8
 8008236:	1851      	adds	r1, r2, r1
 8008238:	6139      	str	r1, [r7, #16]
 800823a:	4649      	mov	r1, r9
 800823c:	414b      	adcs	r3, r1
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800824c:	4659      	mov	r1, fp
 800824e:	00cb      	lsls	r3, r1, #3
 8008250:	4651      	mov	r1, sl
 8008252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008256:	4651      	mov	r1, sl
 8008258:	00ca      	lsls	r2, r1, #3
 800825a:	4610      	mov	r0, r2
 800825c:	4619      	mov	r1, r3
 800825e:	4603      	mov	r3, r0
 8008260:	4642      	mov	r2, r8
 8008262:	189b      	adds	r3, r3, r2
 8008264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008268:	464b      	mov	r3, r9
 800826a:	460a      	mov	r2, r1
 800826c:	eb42 0303 	adc.w	r3, r2, r3
 8008270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	67bb      	str	r3, [r7, #120]	; 0x78
 800827e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800828c:	4649      	mov	r1, r9
 800828e:	008b      	lsls	r3, r1, #2
 8008290:	4641      	mov	r1, r8
 8008292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008296:	4641      	mov	r1, r8
 8008298:	008a      	lsls	r2, r1, #2
 800829a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800829e:	f7f8 fc69 	bl	8000b74 <__aeabi_uldivmod>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	4b38      	ldr	r3, [pc, #224]	; (800838c <UART_SetConfig+0x4e4>)
 80082aa:	fba3 2301 	umull	r2, r3, r3, r1
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	2264      	movs	r2, #100	; 0x64
 80082b2:	fb02 f303 	mul.w	r3, r2, r3
 80082b6:	1acb      	subs	r3, r1, r3
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	3332      	adds	r3, #50	; 0x32
 80082bc:	4a33      	ldr	r2, [pc, #204]	; (800838c <UART_SetConfig+0x4e4>)
 80082be:	fba2 2303 	umull	r2, r3, r2, r3
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082c8:	441c      	add	r4, r3
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2200      	movs	r2, #0
 80082d0:	673b      	str	r3, [r7, #112]	; 0x70
 80082d2:	677a      	str	r2, [r7, #116]	; 0x74
 80082d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	1891      	adds	r1, r2, r2
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	415b      	adcs	r3, r3
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082e8:	4641      	mov	r1, r8
 80082ea:	1851      	adds	r1, r2, r1
 80082ec:	6039      	str	r1, [r7, #0]
 80082ee:	4649      	mov	r1, r9
 80082f0:	414b      	adcs	r3, r1
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008300:	4659      	mov	r1, fp
 8008302:	00cb      	lsls	r3, r1, #3
 8008304:	4651      	mov	r1, sl
 8008306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830a:	4651      	mov	r1, sl
 800830c:	00ca      	lsls	r2, r1, #3
 800830e:	4610      	mov	r0, r2
 8008310:	4619      	mov	r1, r3
 8008312:	4603      	mov	r3, r0
 8008314:	4642      	mov	r2, r8
 8008316:	189b      	adds	r3, r3, r2
 8008318:	66bb      	str	r3, [r7, #104]	; 0x68
 800831a:	464b      	mov	r3, r9
 800831c:	460a      	mov	r2, r1
 800831e:	eb42 0303 	adc.w	r3, r2, r3
 8008322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	663b      	str	r3, [r7, #96]	; 0x60
 800832e:	667a      	str	r2, [r7, #100]	; 0x64
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	f04f 0300 	mov.w	r3, #0
 8008338:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800833c:	4649      	mov	r1, r9
 800833e:	008b      	lsls	r3, r1, #2
 8008340:	4641      	mov	r1, r8
 8008342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008346:	4641      	mov	r1, r8
 8008348:	008a      	lsls	r2, r1, #2
 800834a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800834e:	f7f8 fc11 	bl	8000b74 <__aeabi_uldivmod>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <UART_SetConfig+0x4e4>)
 8008358:	fba3 1302 	umull	r1, r3, r3, r2
 800835c:	095b      	lsrs	r3, r3, #5
 800835e:	2164      	movs	r1, #100	; 0x64
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	3332      	adds	r3, #50	; 0x32
 800836a:	4a08      	ldr	r2, [pc, #32]	; (800838c <UART_SetConfig+0x4e4>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	f003 020f 	and.w	r2, r3, #15
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4422      	add	r2, r4
 800837e:	609a      	str	r2, [r3, #8]
}
 8008380:	bf00      	nop
 8008382:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008386:	46bd      	mov	sp, r7
 8008388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800838c:	51eb851f 	.word	0x51eb851f

08008390 <memset>:
 8008390:	4402      	add	r2, r0
 8008392:	4603      	mov	r3, r0
 8008394:	4293      	cmp	r3, r2
 8008396:	d100      	bne.n	800839a <memset+0xa>
 8008398:	4770      	bx	lr
 800839a:	f803 1b01 	strb.w	r1, [r3], #1
 800839e:	e7f9      	b.n	8008394 <memset+0x4>

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4d0d      	ldr	r5, [pc, #52]	; (80083d8 <__libc_init_array+0x38>)
 80083a4:	4c0d      	ldr	r4, [pc, #52]	; (80083dc <__libc_init_array+0x3c>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	2600      	movs	r6, #0
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	4d0b      	ldr	r5, [pc, #44]	; (80083e0 <__libc_init_array+0x40>)
 80083b2:	4c0c      	ldr	r4, [pc, #48]	; (80083e4 <__libc_init_array+0x44>)
 80083b4:	f001 f8ac 	bl	8009510 <_init>
 80083b8:	1b64      	subs	r4, r4, r5
 80083ba:	10a4      	asrs	r4, r4, #2
 80083bc:	2600      	movs	r6, #0
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	08009728 	.word	0x08009728
 80083dc:	08009728 	.word	0x08009728
 80083e0:	08009728 	.word	0x08009728
 80083e4:	0800972c 	.word	0x0800972c

080083e8 <cos>:
 80083e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ea:	ec53 2b10 	vmov	r2, r3, d0
 80083ee:	4826      	ldr	r0, [pc, #152]	; (8008488 <cos+0xa0>)
 80083f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083f4:	4281      	cmp	r1, r0
 80083f6:	dc06      	bgt.n	8008406 <cos+0x1e>
 80083f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008480 <cos+0x98>
 80083fc:	b005      	add	sp, #20
 80083fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8008402:	f000 b89d 	b.w	8008540 <__kernel_cos>
 8008406:	4821      	ldr	r0, [pc, #132]	; (800848c <cos+0xa4>)
 8008408:	4281      	cmp	r1, r0
 800840a:	dd09      	ble.n	8008420 <cos+0x38>
 800840c:	ee10 0a10 	vmov	r0, s0
 8008410:	4619      	mov	r1, r3
 8008412:	f7f7 fee5 	bl	80001e0 <__aeabi_dsub>
 8008416:	ec41 0b10 	vmov	d0, r0, r1
 800841a:	b005      	add	sp, #20
 800841c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008420:	4668      	mov	r0, sp
 8008422:	f000 fa15 	bl	8008850 <__ieee754_rem_pio2>
 8008426:	f000 0003 	and.w	r0, r0, #3
 800842a:	2801      	cmp	r0, #1
 800842c:	d00b      	beq.n	8008446 <cos+0x5e>
 800842e:	2802      	cmp	r0, #2
 8008430:	d016      	beq.n	8008460 <cos+0x78>
 8008432:	b9e0      	cbnz	r0, 800846e <cos+0x86>
 8008434:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008438:	ed9d 0b00 	vldr	d0, [sp]
 800843c:	f000 f880 	bl	8008540 <__kernel_cos>
 8008440:	ec51 0b10 	vmov	r0, r1, d0
 8008444:	e7e7      	b.n	8008416 <cos+0x2e>
 8008446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800844a:	ed9d 0b00 	vldr	d0, [sp]
 800844e:	f000 f93f 	bl	80086d0 <__kernel_sin>
 8008452:	ec53 2b10 	vmov	r2, r3, d0
 8008456:	ee10 0a10 	vmov	r0, s0
 800845a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800845e:	e7da      	b.n	8008416 <cos+0x2e>
 8008460:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008464:	ed9d 0b00 	vldr	d0, [sp]
 8008468:	f000 f86a 	bl	8008540 <__kernel_cos>
 800846c:	e7f1      	b.n	8008452 <cos+0x6a>
 800846e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008472:	ed9d 0b00 	vldr	d0, [sp]
 8008476:	2001      	movs	r0, #1
 8008478:	f000 f92a 	bl	80086d0 <__kernel_sin>
 800847c:	e7e0      	b.n	8008440 <cos+0x58>
 800847e:	bf00      	nop
	...
 8008488:	3fe921fb 	.word	0x3fe921fb
 800848c:	7fefffff 	.word	0x7fefffff

08008490 <sin>:
 8008490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008492:	ec53 2b10 	vmov	r2, r3, d0
 8008496:	4828      	ldr	r0, [pc, #160]	; (8008538 <sin+0xa8>)
 8008498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800849c:	4281      	cmp	r1, r0
 800849e:	dc07      	bgt.n	80084b0 <sin+0x20>
 80084a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008530 <sin+0xa0>
 80084a4:	2000      	movs	r0, #0
 80084a6:	b005      	add	sp, #20
 80084a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ac:	f000 b910 	b.w	80086d0 <__kernel_sin>
 80084b0:	4822      	ldr	r0, [pc, #136]	; (800853c <sin+0xac>)
 80084b2:	4281      	cmp	r1, r0
 80084b4:	dd09      	ble.n	80084ca <sin+0x3a>
 80084b6:	ee10 0a10 	vmov	r0, s0
 80084ba:	4619      	mov	r1, r3
 80084bc:	f7f7 fe90 	bl	80001e0 <__aeabi_dsub>
 80084c0:	ec41 0b10 	vmov	d0, r0, r1
 80084c4:	b005      	add	sp, #20
 80084c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80084ca:	4668      	mov	r0, sp
 80084cc:	f000 f9c0 	bl	8008850 <__ieee754_rem_pio2>
 80084d0:	f000 0003 	and.w	r0, r0, #3
 80084d4:	2801      	cmp	r0, #1
 80084d6:	d00c      	beq.n	80084f2 <sin+0x62>
 80084d8:	2802      	cmp	r0, #2
 80084da:	d011      	beq.n	8008500 <sin+0x70>
 80084dc:	b9f0      	cbnz	r0, 800851c <sin+0x8c>
 80084de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084e2:	ed9d 0b00 	vldr	d0, [sp]
 80084e6:	2001      	movs	r0, #1
 80084e8:	f000 f8f2 	bl	80086d0 <__kernel_sin>
 80084ec:	ec51 0b10 	vmov	r0, r1, d0
 80084f0:	e7e6      	b.n	80084c0 <sin+0x30>
 80084f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084f6:	ed9d 0b00 	vldr	d0, [sp]
 80084fa:	f000 f821 	bl	8008540 <__kernel_cos>
 80084fe:	e7f5      	b.n	80084ec <sin+0x5c>
 8008500:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008504:	ed9d 0b00 	vldr	d0, [sp]
 8008508:	2001      	movs	r0, #1
 800850a:	f000 f8e1 	bl	80086d0 <__kernel_sin>
 800850e:	ec53 2b10 	vmov	r2, r3, d0
 8008512:	ee10 0a10 	vmov	r0, s0
 8008516:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800851a:	e7d1      	b.n	80084c0 <sin+0x30>
 800851c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008520:	ed9d 0b00 	vldr	d0, [sp]
 8008524:	f000 f80c 	bl	8008540 <__kernel_cos>
 8008528:	e7f1      	b.n	800850e <sin+0x7e>
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w
	...
 8008538:	3fe921fb 	.word	0x3fe921fb
 800853c:	7fefffff 	.word	0x7fefffff

08008540 <__kernel_cos>:
 8008540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	ec57 6b10 	vmov	r6, r7, d0
 8008548:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800854c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008550:	ed8d 1b00 	vstr	d1, [sp]
 8008554:	da07      	bge.n	8008566 <__kernel_cos+0x26>
 8008556:	ee10 0a10 	vmov	r0, s0
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fa92 	bl	8000a84 <__aeabi_d2iz>
 8008560:	2800      	cmp	r0, #0
 8008562:	f000 8088 	beq.w	8008676 <__kernel_cos+0x136>
 8008566:	4632      	mov	r2, r6
 8008568:	463b      	mov	r3, r7
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	f7f7 ffef 	bl	8000550 <__aeabi_dmul>
 8008572:	4b51      	ldr	r3, [pc, #324]	; (80086b8 <__kernel_cos+0x178>)
 8008574:	2200      	movs	r2, #0
 8008576:	4604      	mov	r4, r0
 8008578:	460d      	mov	r5, r1
 800857a:	f7f7 ffe9 	bl	8000550 <__aeabi_dmul>
 800857e:	a340      	add	r3, pc, #256	; (adr r3, 8008680 <__kernel_cos+0x140>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	4682      	mov	sl, r0
 8008586:	468b      	mov	fp, r1
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	f7f7 ffe0 	bl	8000550 <__aeabi_dmul>
 8008590:	a33d      	add	r3, pc, #244	; (adr r3, 8008688 <__kernel_cos+0x148>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f7 fe25 	bl	80001e4 <__adddf3>
 800859a:	4622      	mov	r2, r4
 800859c:	462b      	mov	r3, r5
 800859e:	f7f7 ffd7 	bl	8000550 <__aeabi_dmul>
 80085a2:	a33b      	add	r3, pc, #236	; (adr r3, 8008690 <__kernel_cos+0x150>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 fe1a 	bl	80001e0 <__aeabi_dsub>
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
 80085b0:	f7f7 ffce 	bl	8000550 <__aeabi_dmul>
 80085b4:	a338      	add	r3, pc, #224	; (adr r3, 8008698 <__kernel_cos+0x158>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f7 fe13 	bl	80001e4 <__adddf3>
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	f7f7 ffc5 	bl	8000550 <__aeabi_dmul>
 80085c6:	a336      	add	r3, pc, #216	; (adr r3, 80086a0 <__kernel_cos+0x160>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 fe08 	bl	80001e0 <__aeabi_dsub>
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	f7f7 ffbc 	bl	8000550 <__aeabi_dmul>
 80085d8:	a333      	add	r3, pc, #204	; (adr r3, 80086a8 <__kernel_cos+0x168>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 fe01 	bl	80001e4 <__adddf3>
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	f7f7 ffb3 	bl	8000550 <__aeabi_dmul>
 80085ea:	4622      	mov	r2, r4
 80085ec:	462b      	mov	r3, r5
 80085ee:	f7f7 ffaf 	bl	8000550 <__aeabi_dmul>
 80085f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085f6:	4604      	mov	r4, r0
 80085f8:	460d      	mov	r5, r1
 80085fa:	4630      	mov	r0, r6
 80085fc:	4639      	mov	r1, r7
 80085fe:	f7f7 ffa7 	bl	8000550 <__aeabi_dmul>
 8008602:	460b      	mov	r3, r1
 8008604:	4602      	mov	r2, r0
 8008606:	4629      	mov	r1, r5
 8008608:	4620      	mov	r0, r4
 800860a:	f7f7 fde9 	bl	80001e0 <__aeabi_dsub>
 800860e:	4b2b      	ldr	r3, [pc, #172]	; (80086bc <__kernel_cos+0x17c>)
 8008610:	4598      	cmp	r8, r3
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	dc10      	bgt.n	800863a <__kernel_cos+0xfa>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4650      	mov	r0, sl
 800861e:	4659      	mov	r1, fp
 8008620:	f7f7 fdde 	bl	80001e0 <__aeabi_dsub>
 8008624:	460b      	mov	r3, r1
 8008626:	4926      	ldr	r1, [pc, #152]	; (80086c0 <__kernel_cos+0x180>)
 8008628:	4602      	mov	r2, r0
 800862a:	2000      	movs	r0, #0
 800862c:	f7f7 fdd8 	bl	80001e0 <__aeabi_dsub>
 8008630:	ec41 0b10 	vmov	d0, r0, r1
 8008634:	b003      	add	sp, #12
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	4b22      	ldr	r3, [pc, #136]	; (80086c4 <__kernel_cos+0x184>)
 800863c:	4920      	ldr	r1, [pc, #128]	; (80086c0 <__kernel_cos+0x180>)
 800863e:	4598      	cmp	r8, r3
 8008640:	bfcc      	ite	gt
 8008642:	4d21      	ldrgt	r5, [pc, #132]	; (80086c8 <__kernel_cos+0x188>)
 8008644:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008648:	2400      	movs	r4, #0
 800864a:	4622      	mov	r2, r4
 800864c:	462b      	mov	r3, r5
 800864e:	2000      	movs	r0, #0
 8008650:	f7f7 fdc6 	bl	80001e0 <__aeabi_dsub>
 8008654:	4622      	mov	r2, r4
 8008656:	4680      	mov	r8, r0
 8008658:	4689      	mov	r9, r1
 800865a:	462b      	mov	r3, r5
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f7 fdbe 	bl	80001e0 <__aeabi_dsub>
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	f7f7 fdba 	bl	80001e0 <__aeabi_dsub>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4640      	mov	r0, r8
 8008672:	4649      	mov	r1, r9
 8008674:	e7da      	b.n	800862c <__kernel_cos+0xec>
 8008676:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80086b0 <__kernel_cos+0x170>
 800867a:	e7db      	b.n	8008634 <__kernel_cos+0xf4>
 800867c:	f3af 8000 	nop.w
 8008680:	be8838d4 	.word	0xbe8838d4
 8008684:	bda8fae9 	.word	0xbda8fae9
 8008688:	bdb4b1c4 	.word	0xbdb4b1c4
 800868c:	3e21ee9e 	.word	0x3e21ee9e
 8008690:	809c52ad 	.word	0x809c52ad
 8008694:	3e927e4f 	.word	0x3e927e4f
 8008698:	19cb1590 	.word	0x19cb1590
 800869c:	3efa01a0 	.word	0x3efa01a0
 80086a0:	16c15177 	.word	0x16c15177
 80086a4:	3f56c16c 	.word	0x3f56c16c
 80086a8:	5555554c 	.word	0x5555554c
 80086ac:	3fa55555 	.word	0x3fa55555
 80086b0:	00000000 	.word	0x00000000
 80086b4:	3ff00000 	.word	0x3ff00000
 80086b8:	3fe00000 	.word	0x3fe00000
 80086bc:	3fd33332 	.word	0x3fd33332
 80086c0:	3ff00000 	.word	0x3ff00000
 80086c4:	3fe90000 	.word	0x3fe90000
 80086c8:	3fd20000 	.word	0x3fd20000
 80086cc:	00000000 	.word	0x00000000

080086d0 <__kernel_sin>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	ed2d 8b04 	vpush	{d8-d9}
 80086d8:	eeb0 8a41 	vmov.f32	s16, s2
 80086dc:	eef0 8a61 	vmov.f32	s17, s3
 80086e0:	ec55 4b10 	vmov	r4, r5, d0
 80086e4:	b083      	sub	sp, #12
 80086e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80086ee:	9001      	str	r0, [sp, #4]
 80086f0:	da06      	bge.n	8008700 <__kernel_sin+0x30>
 80086f2:	ee10 0a10 	vmov	r0, s0
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f8 f9c4 	bl	8000a84 <__aeabi_d2iz>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d051      	beq.n	80087a4 <__kernel_sin+0xd4>
 8008700:	4622      	mov	r2, r4
 8008702:	462b      	mov	r3, r5
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 ff22 	bl	8000550 <__aeabi_dmul>
 800870c:	4682      	mov	sl, r0
 800870e:	468b      	mov	fp, r1
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 ff1a 	bl	8000550 <__aeabi_dmul>
 800871c:	a341      	add	r3, pc, #260	; (adr r3, 8008824 <__kernel_sin+0x154>)
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	4680      	mov	r8, r0
 8008724:	4689      	mov	r9, r1
 8008726:	4650      	mov	r0, sl
 8008728:	4659      	mov	r1, fp
 800872a:	f7f7 ff11 	bl	8000550 <__aeabi_dmul>
 800872e:	a33f      	add	r3, pc, #252	; (adr r3, 800882c <__kernel_sin+0x15c>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	f7f7 fd54 	bl	80001e0 <__aeabi_dsub>
 8008738:	4652      	mov	r2, sl
 800873a:	465b      	mov	r3, fp
 800873c:	f7f7 ff08 	bl	8000550 <__aeabi_dmul>
 8008740:	a33c      	add	r3, pc, #240	; (adr r3, 8008834 <__kernel_sin+0x164>)
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f7f7 fd4d 	bl	80001e4 <__adddf3>
 800874a:	4652      	mov	r2, sl
 800874c:	465b      	mov	r3, fp
 800874e:	f7f7 feff 	bl	8000550 <__aeabi_dmul>
 8008752:	a33a      	add	r3, pc, #232	; (adr r3, 800883c <__kernel_sin+0x16c>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f7f7 fd42 	bl	80001e0 <__aeabi_dsub>
 800875c:	4652      	mov	r2, sl
 800875e:	465b      	mov	r3, fp
 8008760:	f7f7 fef6 	bl	8000550 <__aeabi_dmul>
 8008764:	a337      	add	r3, pc, #220	; (adr r3, 8008844 <__kernel_sin+0x174>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	f7f7 fd3b 	bl	80001e4 <__adddf3>
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	4606      	mov	r6, r0
 8008772:	460f      	mov	r7, r1
 8008774:	b9eb      	cbnz	r3, 80087b2 <__kernel_sin+0xe2>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4650      	mov	r0, sl
 800877c:	4659      	mov	r1, fp
 800877e:	f7f7 fee7 	bl	8000550 <__aeabi_dmul>
 8008782:	a325      	add	r3, pc, #148	; (adr r3, 8008818 <__kernel_sin+0x148>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fd2a 	bl	80001e0 <__aeabi_dsub>
 800878c:	4642      	mov	r2, r8
 800878e:	464b      	mov	r3, r9
 8008790:	f7f7 fede 	bl	8000550 <__aeabi_dmul>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4620      	mov	r0, r4
 800879a:	4629      	mov	r1, r5
 800879c:	f7f7 fd22 	bl	80001e4 <__adddf3>
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	ec45 4b10 	vmov	d0, r4, r5
 80087a8:	b003      	add	sp, #12
 80087aa:	ecbd 8b04 	vpop	{d8-d9}
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <__kernel_sin+0x150>)
 80087b4:	ec51 0b18 	vmov	r0, r1, d8
 80087b8:	2200      	movs	r2, #0
 80087ba:	f7f7 fec9 	bl	8000550 <__aeabi_dmul>
 80087be:	4632      	mov	r2, r6
 80087c0:	ec41 0b19 	vmov	d9, r0, r1
 80087c4:	463b      	mov	r3, r7
 80087c6:	4640      	mov	r0, r8
 80087c8:	4649      	mov	r1, r9
 80087ca:	f7f7 fec1 	bl	8000550 <__aeabi_dmul>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	ec51 0b19 	vmov	r0, r1, d9
 80087d6:	f7f7 fd03 	bl	80001e0 <__aeabi_dsub>
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f7f7 feb7 	bl	8000550 <__aeabi_dmul>
 80087e2:	ec53 2b18 	vmov	r2, r3, d8
 80087e6:	f7f7 fcfb 	bl	80001e0 <__aeabi_dsub>
 80087ea:	a30b      	add	r3, pc, #44	; (adr r3, 8008818 <__kernel_sin+0x148>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	4606      	mov	r6, r0
 80087f2:	460f      	mov	r7, r1
 80087f4:	4640      	mov	r0, r8
 80087f6:	4649      	mov	r1, r9
 80087f8:	f7f7 feaa 	bl	8000550 <__aeabi_dmul>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f7 fcee 	bl	80001e4 <__adddf3>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fce6 	bl	80001e0 <__aeabi_dsub>
 8008814:	e7c4      	b.n	80087a0 <__kernel_sin+0xd0>
 8008816:	bf00      	nop
 8008818:	55555549 	.word	0x55555549
 800881c:	3fc55555 	.word	0x3fc55555
 8008820:	3fe00000 	.word	0x3fe00000
 8008824:	5acfd57c 	.word	0x5acfd57c
 8008828:	3de5d93a 	.word	0x3de5d93a
 800882c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008830:	3e5ae5e6 	.word	0x3e5ae5e6
 8008834:	57b1fe7d 	.word	0x57b1fe7d
 8008838:	3ec71de3 	.word	0x3ec71de3
 800883c:	19c161d5 	.word	0x19c161d5
 8008840:	3f2a01a0 	.word	0x3f2a01a0
 8008844:	1110f8a6 	.word	0x1110f8a6
 8008848:	3f811111 	.word	0x3f811111
 800884c:	00000000 	.word	0x00000000

08008850 <__ieee754_rem_pio2>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	ed2d 8b02 	vpush	{d8}
 8008858:	ec55 4b10 	vmov	r4, r5, d0
 800885c:	4bca      	ldr	r3, [pc, #808]	; (8008b88 <__ieee754_rem_pio2+0x338>)
 800885e:	b08b      	sub	sp, #44	; 0x2c
 8008860:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008864:	4598      	cmp	r8, r3
 8008866:	4682      	mov	sl, r0
 8008868:	9502      	str	r5, [sp, #8]
 800886a:	dc08      	bgt.n	800887e <__ieee754_rem_pio2+0x2e>
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	ed80 0b00 	vstr	d0, [r0]
 8008874:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008878:	f04f 0b00 	mov.w	fp, #0
 800887c:	e028      	b.n	80088d0 <__ieee754_rem_pio2+0x80>
 800887e:	4bc3      	ldr	r3, [pc, #780]	; (8008b8c <__ieee754_rem_pio2+0x33c>)
 8008880:	4598      	cmp	r8, r3
 8008882:	dc78      	bgt.n	8008976 <__ieee754_rem_pio2+0x126>
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	4ec2      	ldr	r6, [pc, #776]	; (8008b90 <__ieee754_rem_pio2+0x340>)
 8008888:	2b00      	cmp	r3, #0
 800888a:	ee10 0a10 	vmov	r0, s0
 800888e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x300>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	4629      	mov	r1, r5
 8008896:	dd39      	ble.n	800890c <__ieee754_rem_pio2+0xbc>
 8008898:	f7f7 fca2 	bl	80001e0 <__aeabi_dsub>
 800889c:	45b0      	cmp	r8, r6
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	d01b      	beq.n	80088dc <__ieee754_rem_pio2+0x8c>
 80088a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x308>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 fc99 	bl	80001e0 <__aeabi_dsub>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	e9ca 2300 	strd	r2, r3, [sl]
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f7 fc91 	bl	80001e0 <__aeabi_dsub>
 80088be:	a3a6      	add	r3, pc, #664	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x308>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fc8c 	bl	80001e0 <__aeabi_dsub>
 80088c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088cc:	f04f 0b01 	mov.w	fp, #1
 80088d0:	4658      	mov	r0, fp
 80088d2:	b00b      	add	sp, #44	; 0x2c
 80088d4:	ecbd 8b02 	vpop	{d8}
 80088d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x310>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f7f7 fc7d 	bl	80001e0 <__aeabi_dsub>
 80088e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x318>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	f7f7 fc76 	bl	80001e0 <__aeabi_dsub>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	e9ca 2300 	strd	r2, r3, [sl]
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f7 fc6e 	bl	80001e0 <__aeabi_dsub>
 8008904:	a398      	add	r3, pc, #608	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x318>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	e7db      	b.n	80088c4 <__ieee754_rem_pio2+0x74>
 800890c:	f7f7 fc6a 	bl	80001e4 <__adddf3>
 8008910:	45b0      	cmp	r8, r6
 8008912:	4604      	mov	r4, r0
 8008914:	460d      	mov	r5, r1
 8008916:	d016      	beq.n	8008946 <__ieee754_rem_pio2+0xf6>
 8008918:	a38f      	add	r3, pc, #572	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x308>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fc61 	bl	80001e4 <__adddf3>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	e9ca 2300 	strd	r2, r3, [sl]
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fc57 	bl	80001e0 <__aeabi_dsub>
 8008932:	a389      	add	r3, pc, #548	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x308>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f7 fc54 	bl	80001e4 <__adddf3>
 800893c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008940:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008944:	e7c4      	b.n	80088d0 <__ieee754_rem_pio2+0x80>
 8008946:	a386      	add	r3, pc, #536	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x310>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f7f7 fc4a 	bl	80001e4 <__adddf3>
 8008950:	a385      	add	r3, pc, #532	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x318>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	4604      	mov	r4, r0
 8008958:	460d      	mov	r5, r1
 800895a:	f7f7 fc43 	bl	80001e4 <__adddf3>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	e9ca 2300 	strd	r2, r3, [sl]
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	f7f7 fc39 	bl	80001e0 <__aeabi_dsub>
 800896e:	a37e      	add	r3, pc, #504	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x318>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	e7e0      	b.n	8008938 <__ieee754_rem_pio2+0xe8>
 8008976:	4b87      	ldr	r3, [pc, #540]	; (8008b94 <__ieee754_rem_pio2+0x344>)
 8008978:	4598      	cmp	r8, r3
 800897a:	f300 80d8 	bgt.w	8008b2e <__ieee754_rem_pio2+0x2de>
 800897e:	f000 f96d 	bl	8008c5c <fabs>
 8008982:	ec55 4b10 	vmov	r4, r5, d0
 8008986:	ee10 0a10 	vmov	r0, s0
 800898a:	a379      	add	r3, pc, #484	; (adr r3, 8008b70 <__ieee754_rem_pio2+0x320>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	4629      	mov	r1, r5
 8008992:	f7f7 fddd 	bl	8000550 <__aeabi_dmul>
 8008996:	4b80      	ldr	r3, [pc, #512]	; (8008b98 <__ieee754_rem_pio2+0x348>)
 8008998:	2200      	movs	r2, #0
 800899a:	f7f7 fc23 	bl	80001e4 <__adddf3>
 800899e:	f7f8 f871 	bl	8000a84 <__aeabi_d2iz>
 80089a2:	4683      	mov	fp, r0
 80089a4:	f7f7 fd6a 	bl	800047c <__aeabi_i2d>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	ec43 2b18 	vmov	d8, r2, r3
 80089b0:	a367      	add	r3, pc, #412	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x300>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f7f7 fdcb 	bl	8000550 <__aeabi_dmul>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4620      	mov	r0, r4
 80089c0:	4629      	mov	r1, r5
 80089c2:	f7f7 fc0d 	bl	80001e0 <__aeabi_dsub>
 80089c6:	a364      	add	r3, pc, #400	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x308>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	4606      	mov	r6, r0
 80089ce:	460f      	mov	r7, r1
 80089d0:	ec51 0b18 	vmov	r0, r1, d8
 80089d4:	f7f7 fdbc 	bl	8000550 <__aeabi_dmul>
 80089d8:	f1bb 0f1f 	cmp.w	fp, #31
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	dc0d      	bgt.n	80089fe <__ieee754_rem_pio2+0x1ae>
 80089e2:	4b6e      	ldr	r3, [pc, #440]	; (8008b9c <__ieee754_rem_pio2+0x34c>)
 80089e4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80089e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ec:	4543      	cmp	r3, r8
 80089ee:	d006      	beq.n	80089fe <__ieee754_rem_pio2+0x1ae>
 80089f0:	4622      	mov	r2, r4
 80089f2:	462b      	mov	r3, r5
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f7f7 fbf2 	bl	80001e0 <__aeabi_dsub>
 80089fc:	e00e      	b.n	8008a1c <__ieee754_rem_pio2+0x1cc>
 80089fe:	462b      	mov	r3, r5
 8008a00:	4622      	mov	r2, r4
 8008a02:	4630      	mov	r0, r6
 8008a04:	4639      	mov	r1, r7
 8008a06:	f7f7 fbeb 	bl	80001e0 <__aeabi_dsub>
 8008a0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a14:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	dc02      	bgt.n	8008a22 <__ieee754_rem_pio2+0x1d2>
 8008a1c:	e9ca 0100 	strd	r0, r1, [sl]
 8008a20:	e039      	b.n	8008a96 <__ieee754_rem_pio2+0x246>
 8008a22:	a34f      	add	r3, pc, #316	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x310>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	ec51 0b18 	vmov	r0, r1, d8
 8008a2c:	f7f7 fd90 	bl	8000550 <__aeabi_dmul>
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fbd0 	bl	80001e0 <__aeabi_dsub>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4680      	mov	r8, r0
 8008a46:	4689      	mov	r9, r1
 8008a48:	4630      	mov	r0, r6
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f7f7 fbc8 	bl	80001e0 <__aeabi_dsub>
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fbc4 	bl	80001e0 <__aeabi_dsub>
 8008a58:	a343      	add	r3, pc, #268	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x318>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	ec51 0b18 	vmov	r0, r1, d8
 8008a66:	f7f7 fd73 	bl	8000550 <__aeabi_dmul>
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	f7f7 fbb7 	bl	80001e0 <__aeabi_dsub>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	f7f7 fbaf 	bl	80001e0 <__aeabi_dsub>
 8008a82:	9a03      	ldr	r2, [sp, #12]
 8008a84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b31      	cmp	r3, #49	; 0x31
 8008a8c:	dc24      	bgt.n	8008ad8 <__ieee754_rem_pio2+0x288>
 8008a8e:	e9ca 0100 	strd	r0, r1, [sl]
 8008a92:	4646      	mov	r6, r8
 8008a94:	464f      	mov	r7, r9
 8008a96:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f7 fb9d 	bl	80001e0 <__aeabi_dsub>
 8008aa6:	462b      	mov	r3, r5
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	f7f7 fb99 	bl	80001e0 <__aeabi_dsub>
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ab6:	f6bf af0b 	bge.w	80088d0 <__ieee754_rem_pio2+0x80>
 8008aba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008abe:	f8ca 3004 	str.w	r3, [sl, #4]
 8008ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac6:	f8ca 8000 	str.w	r8, [sl]
 8008aca:	f8ca 0008 	str.w	r0, [sl, #8]
 8008ace:	f8ca 300c 	str.w	r3, [sl, #12]
 8008ad2:	f1cb 0b00 	rsb	fp, fp, #0
 8008ad6:	e6fb      	b.n	80088d0 <__ieee754_rem_pio2+0x80>
 8008ad8:	a327      	add	r3, pc, #156	; (adr r3, 8008b78 <__ieee754_rem_pio2+0x328>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	ec51 0b18 	vmov	r0, r1, d8
 8008ae2:	f7f7 fd35 	bl	8000550 <__aeabi_dmul>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4640      	mov	r0, r8
 8008af0:	4649      	mov	r1, r9
 8008af2:	f7f7 fb75 	bl	80001e0 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fb6d 	bl	80001e0 <__aeabi_dsub>
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	f7f7 fb69 	bl	80001e0 <__aeabi_dsub>
 8008b0e:	a31c      	add	r3, pc, #112	; (adr r3, 8008b80 <__ieee754_rem_pio2+0x330>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	ec51 0b18 	vmov	r0, r1, d8
 8008b1c:	f7f7 fd18 	bl	8000550 <__aeabi_dmul>
 8008b20:	4622      	mov	r2, r4
 8008b22:	462b      	mov	r3, r5
 8008b24:	f7f7 fb5c 	bl	80001e0 <__aeabi_dsub>
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	e760      	b.n	80089f0 <__ieee754_rem_pio2+0x1a0>
 8008b2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ba0 <__ieee754_rem_pio2+0x350>)
 8008b30:	4598      	cmp	r8, r3
 8008b32:	dd37      	ble.n	8008ba4 <__ieee754_rem_pio2+0x354>
 8008b34:	ee10 2a10 	vmov	r2, s0
 8008b38:	462b      	mov	r3, r5
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f7f7 fb4f 	bl	80001e0 <__aeabi_dsub>
 8008b42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b46:	e9ca 0100 	strd	r0, r1, [sl]
 8008b4a:	e695      	b.n	8008878 <__ieee754_rem_pio2+0x28>
 8008b4c:	f3af 8000 	nop.w
 8008b50:	54400000 	.word	0x54400000
 8008b54:	3ff921fb 	.word	0x3ff921fb
 8008b58:	1a626331 	.word	0x1a626331
 8008b5c:	3dd0b461 	.word	0x3dd0b461
 8008b60:	1a600000 	.word	0x1a600000
 8008b64:	3dd0b461 	.word	0x3dd0b461
 8008b68:	2e037073 	.word	0x2e037073
 8008b6c:	3ba3198a 	.word	0x3ba3198a
 8008b70:	6dc9c883 	.word	0x6dc9c883
 8008b74:	3fe45f30 	.word	0x3fe45f30
 8008b78:	2e000000 	.word	0x2e000000
 8008b7c:	3ba3198a 	.word	0x3ba3198a
 8008b80:	252049c1 	.word	0x252049c1
 8008b84:	397b839a 	.word	0x397b839a
 8008b88:	3fe921fb 	.word	0x3fe921fb
 8008b8c:	4002d97b 	.word	0x4002d97b
 8008b90:	3ff921fb 	.word	0x3ff921fb
 8008b94:	413921fb 	.word	0x413921fb
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	08009548 	.word	0x08009548
 8008ba0:	7fefffff 	.word	0x7fefffff
 8008ba4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008ba8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008bac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	f7f7 ff66 	bl	8000a84 <__aeabi_d2iz>
 8008bb8:	f7f7 fc60 	bl	800047c <__aeabi_i2d>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bc8:	f7f7 fb0a 	bl	80001e0 <__aeabi_dsub>
 8008bcc:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <__ieee754_rem_pio2+0x404>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f7f7 fcbe 	bl	8000550 <__aeabi_dmul>
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	f7f7 ff54 	bl	8000a84 <__aeabi_d2iz>
 8008bdc:	f7f7 fc4e 	bl	800047c <__aeabi_i2d>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bec:	f7f7 faf8 	bl	80001e0 <__aeabi_dsub>
 8008bf0:	4b18      	ldr	r3, [pc, #96]	; (8008c54 <__ieee754_rem_pio2+0x404>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 fcac 	bl	8000550 <__aeabi_dmul>
 8008bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bfc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008c00:	2703      	movs	r7, #3
 8008c02:	2400      	movs	r4, #0
 8008c04:	2500      	movs	r5, #0
 8008c06:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	46b9      	mov	r9, r7
 8008c10:	3f01      	subs	r7, #1
 8008c12:	f7f7 ff05 	bl	8000a20 <__aeabi_dcmpeq>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d1f5      	bne.n	8008c06 <__ieee754_rem_pio2+0x3b6>
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <__ieee754_rem_pio2+0x408>)
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	2302      	movs	r3, #2
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4632      	mov	r2, r6
 8008c24:	464b      	mov	r3, r9
 8008c26:	4651      	mov	r1, sl
 8008c28:	a804      	add	r0, sp, #16
 8008c2a:	f000 f821 	bl	8008c70 <__kernel_rem_pio2>
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	4683      	mov	fp, r0
 8008c34:	f6bf ae4c 	bge.w	80088d0 <__ieee754_rem_pio2+0x80>
 8008c38:	e9da 2100 	ldrd	r2, r1, [sl]
 8008c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c40:	e9ca 2300 	strd	r2, r3, [sl]
 8008c44:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008c48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c4c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008c50:	e73f      	b.n	8008ad2 <__ieee754_rem_pio2+0x282>
 8008c52:	bf00      	nop
 8008c54:	41700000 	.word	0x41700000
 8008c58:	080095c8 	.word	0x080095c8

08008c5c <fabs>:
 8008c5c:	ec51 0b10 	vmov	r0, r1, d0
 8008c60:	ee10 2a10 	vmov	r2, s0
 8008c64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c68:	ec43 2b10 	vmov	d0, r2, r3
 8008c6c:	4770      	bx	lr
	...

08008c70 <__kernel_rem_pio2>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	ed2d 8b02 	vpush	{d8}
 8008c78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008c7c:	f112 0f14 	cmn.w	r2, #20
 8008c80:	9306      	str	r3, [sp, #24]
 8008c82:	9104      	str	r1, [sp, #16]
 8008c84:	4bc2      	ldr	r3, [pc, #776]	; (8008f90 <__kernel_rem_pio2+0x320>)
 8008c86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008c88:	9009      	str	r0, [sp, #36]	; 0x24
 8008c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	9b06      	ldr	r3, [sp, #24]
 8008c92:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008c96:	bfa8      	it	ge
 8008c98:	1ed4      	subge	r4, r2, #3
 8008c9a:	9305      	str	r3, [sp, #20]
 8008c9c:	bfb2      	itee	lt
 8008c9e:	2400      	movlt	r4, #0
 8008ca0:	2318      	movge	r3, #24
 8008ca2:	fb94 f4f3 	sdivge	r4, r4, r3
 8008ca6:	f06f 0317 	mvn.w	r3, #23
 8008caa:	fb04 3303 	mla	r3, r4, r3, r3
 8008cae:	eb03 0a02 	add.w	sl, r3, r2
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	9a05      	ldr	r2, [sp, #20]
 8008cb6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008f80 <__kernel_rem_pio2+0x310>
 8008cba:	eb03 0802 	add.w	r8, r3, r2
 8008cbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008cc0:	1aa7      	subs	r7, r4, r2
 8008cc2:	ae20      	add	r6, sp, #128	; 0x80
 8008cc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008cc8:	2500      	movs	r5, #0
 8008cca:	4545      	cmp	r5, r8
 8008ccc:	dd13      	ble.n	8008cf6 <__kernel_rem_pio2+0x86>
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	aa20      	add	r2, sp, #128	; 0x80
 8008cd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008cd6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008cda:	f04f 0800 	mov.w	r8, #0
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	4598      	cmp	r8, r3
 8008ce2:	dc31      	bgt.n	8008d48 <__kernel_rem_pio2+0xd8>
 8008ce4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008f80 <__kernel_rem_pio2+0x310>
 8008ce8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008cec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cf0:	462f      	mov	r7, r5
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	e01b      	b.n	8008d2e <__kernel_rem_pio2+0xbe>
 8008cf6:	42ef      	cmn	r7, r5
 8008cf8:	d407      	bmi.n	8008d0a <__kernel_rem_pio2+0x9a>
 8008cfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008cfe:	f7f7 fbbd 	bl	800047c <__aeabi_i2d>
 8008d02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d06:	3501      	adds	r5, #1
 8008d08:	e7df      	b.n	8008cca <__kernel_rem_pio2+0x5a>
 8008d0a:	ec51 0b18 	vmov	r0, r1, d8
 8008d0e:	e7f8      	b.n	8008d02 <__kernel_rem_pio2+0x92>
 8008d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008d18:	f7f7 fc1a 	bl	8000550 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d24:	f7f7 fa5e 	bl	80001e4 <__adddf3>
 8008d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d2c:	3601      	adds	r6, #1
 8008d2e:	9b05      	ldr	r3, [sp, #20]
 8008d30:	429e      	cmp	r6, r3
 8008d32:	f1a7 0708 	sub.w	r7, r7, #8
 8008d36:	ddeb      	ble.n	8008d10 <__kernel_rem_pio2+0xa0>
 8008d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d3c:	f108 0801 	add.w	r8, r8, #1
 8008d40:	ecab 7b02 	vstmia	fp!, {d7}
 8008d44:	3508      	adds	r5, #8
 8008d46:	e7ca      	b.n	8008cde <__kernel_rem_pio2+0x6e>
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	aa0c      	add	r2, sp, #48	; 0x30
 8008d4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d52:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008d54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d58:	9c00      	ldr	r4, [sp, #0]
 8008d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d5c:	00e3      	lsls	r3, r4, #3
 8008d5e:	9308      	str	r3, [sp, #32]
 8008d60:	ab98      	add	r3, sp, #608	; 0x260
 8008d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008d6a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008d6e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008d74:	46c3      	mov	fp, r8
 8008d76:	46a1      	mov	r9, r4
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	f1a5 0508 	sub.w	r5, r5, #8
 8008d80:	dc77      	bgt.n	8008e72 <__kernel_rem_pio2+0x202>
 8008d82:	ec47 6b10 	vmov	d0, r6, r7
 8008d86:	4650      	mov	r0, sl
 8008d88:	f000 fac2 	bl	8009310 <scalbn>
 8008d8c:	ec57 6b10 	vmov	r6, r7, d0
 8008d90:	2200      	movs	r2, #0
 8008d92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008d96:	ee10 0a10 	vmov	r0, s0
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fbd8 	bl	8000550 <__aeabi_dmul>
 8008da0:	ec41 0b10 	vmov	d0, r0, r1
 8008da4:	f000 fb34 	bl	8009410 <floor>
 8008da8:	4b7a      	ldr	r3, [pc, #488]	; (8008f94 <__kernel_rem_pio2+0x324>)
 8008daa:	ec51 0b10 	vmov	r0, r1, d0
 8008dae:	2200      	movs	r2, #0
 8008db0:	f7f7 fbce 	bl	8000550 <__aeabi_dmul>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4630      	mov	r0, r6
 8008dba:	4639      	mov	r1, r7
 8008dbc:	f7f7 fa10 	bl	80001e0 <__aeabi_dsub>
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	f7f7 fe5e 	bl	8000a84 <__aeabi_d2iz>
 8008dc8:	9002      	str	r0, [sp, #8]
 8008dca:	f7f7 fb57 	bl	800047c <__aeabi_i2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fa03 	bl	80001e0 <__aeabi_dsub>
 8008dda:	f1ba 0f00 	cmp.w	sl, #0
 8008dde:	4606      	mov	r6, r0
 8008de0:	460f      	mov	r7, r1
 8008de2:	dd6d      	ble.n	8008ec0 <__kernel_rem_pio2+0x250>
 8008de4:	1e61      	subs	r1, r4, #1
 8008de6:	ab0c      	add	r3, sp, #48	; 0x30
 8008de8:	9d02      	ldr	r5, [sp, #8]
 8008dea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dee:	f1ca 0018 	rsb	r0, sl, #24
 8008df2:	fa43 f200 	asr.w	r2, r3, r0
 8008df6:	4415      	add	r5, r2
 8008df8:	4082      	lsls	r2, r0
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	aa0c      	add	r2, sp, #48	; 0x30
 8008dfe:	9502      	str	r5, [sp, #8]
 8008e00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e04:	f1ca 0217 	rsb	r2, sl, #23
 8008e08:	fa43 fb02 	asr.w	fp, r3, r2
 8008e0c:	f1bb 0f00 	cmp.w	fp, #0
 8008e10:	dd65      	ble.n	8008ede <__kernel_rem_pio2+0x26e>
 8008e12:	9b02      	ldr	r3, [sp, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	3301      	adds	r3, #1
 8008e18:	9302      	str	r3, [sp, #8]
 8008e1a:	4615      	mov	r5, r2
 8008e1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008e20:	4294      	cmp	r4, r2
 8008e22:	f300 809f 	bgt.w	8008f64 <__kernel_rem_pio2+0x2f4>
 8008e26:	f1ba 0f00 	cmp.w	sl, #0
 8008e2a:	dd07      	ble.n	8008e3c <__kernel_rem_pio2+0x1cc>
 8008e2c:	f1ba 0f01 	cmp.w	sl, #1
 8008e30:	f000 80c1 	beq.w	8008fb6 <__kernel_rem_pio2+0x346>
 8008e34:	f1ba 0f02 	cmp.w	sl, #2
 8008e38:	f000 80c7 	beq.w	8008fca <__kernel_rem_pio2+0x35a>
 8008e3c:	f1bb 0f02 	cmp.w	fp, #2
 8008e40:	d14d      	bne.n	8008ede <__kernel_rem_pio2+0x26e>
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	4954      	ldr	r1, [pc, #336]	; (8008f98 <__kernel_rem_pio2+0x328>)
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f7f7 f9c9 	bl	80001e0 <__aeabi_dsub>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	2d00      	cmp	r5, #0
 8008e54:	d043      	beq.n	8008ede <__kernel_rem_pio2+0x26e>
 8008e56:	4650      	mov	r0, sl
 8008e58:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008f88 <__kernel_rem_pio2+0x318>
 8008e5c:	f000 fa58 	bl	8009310 <scalbn>
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	ec53 2b10 	vmov	r2, r3, d0
 8008e68:	f7f7 f9ba 	bl	80001e0 <__aeabi_dsub>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	e035      	b.n	8008ede <__kernel_rem_pio2+0x26e>
 8008e72:	4b4a      	ldr	r3, [pc, #296]	; (8008f9c <__kernel_rem_pio2+0x32c>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fb69 	bl	8000550 <__aeabi_dmul>
 8008e7e:	f7f7 fe01 	bl	8000a84 <__aeabi_d2iz>
 8008e82:	f7f7 fafb 	bl	800047c <__aeabi_i2d>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	ec43 2b18 	vmov	d8, r2, r3
 8008e8e:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <__kernel_rem_pio2+0x330>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	f7f7 fb5d 	bl	8000550 <__aeabi_dmul>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	f7f7 f99f 	bl	80001e0 <__aeabi_dsub>
 8008ea2:	f7f7 fdef 	bl	8000a84 <__aeabi_d2iz>
 8008ea6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008eaa:	f84b 0b04 	str.w	r0, [fp], #4
 8008eae:	ec51 0b18 	vmov	r0, r1, d8
 8008eb2:	f7f7 f997 	bl	80001e4 <__adddf3>
 8008eb6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	e75b      	b.n	8008d78 <__kernel_rem_pio2+0x108>
 8008ec0:	d106      	bne.n	8008ed0 <__kernel_rem_pio2+0x260>
 8008ec2:	1e63      	subs	r3, r4, #1
 8008ec4:	aa0c      	add	r2, sp, #48	; 0x30
 8008ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008ece:	e79d      	b.n	8008e0c <__kernel_rem_pio2+0x19c>
 8008ed0:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <__kernel_rem_pio2+0x334>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f7f7 fdc2 	bl	8000a5c <__aeabi_dcmpge>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d140      	bne.n	8008f5e <__kernel_rem_pio2+0x2ee>
 8008edc:	4683      	mov	fp, r0
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 fd9b 	bl	8000a20 <__aeabi_dcmpeq>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f000 80c1 	beq.w	8009072 <__kernel_rem_pio2+0x402>
 8008ef0:	1e65      	subs	r5, r4, #1
 8008ef2:	462b      	mov	r3, r5
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	9900      	ldr	r1, [sp, #0]
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	da6d      	bge.n	8008fd8 <__kernel_rem_pio2+0x368>
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	f000 808a 	beq.w	8009016 <__kernel_rem_pio2+0x3a6>
 8008f02:	ab0c      	add	r3, sp, #48	; 0x30
 8008f04:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80ae 	beq.w	800906e <__kernel_rem_pio2+0x3fe>
 8008f12:	4650      	mov	r0, sl
 8008f14:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008f88 <__kernel_rem_pio2+0x318>
 8008f18:	f000 f9fa 	bl	8009310 <scalbn>
 8008f1c:	1c6b      	adds	r3, r5, #1
 8008f1e:	00da      	lsls	r2, r3, #3
 8008f20:	9205      	str	r2, [sp, #20]
 8008f22:	ec57 6b10 	vmov	r6, r7, d0
 8008f26:	aa70      	add	r2, sp, #448	; 0x1c0
 8008f28:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008f9c <__kernel_rem_pio2+0x32c>
 8008f2c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008f30:	462c      	mov	r4, r5
 8008f32:	f04f 0800 	mov.w	r8, #0
 8008f36:	2c00      	cmp	r4, #0
 8008f38:	f280 80d4 	bge.w	80090e4 <__kernel_rem_pio2+0x474>
 8008f3c:	462c      	mov	r4, r5
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	f2c0 8102 	blt.w	8009148 <__kernel_rem_pio2+0x4d8>
 8008f44:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <__kernel_rem_pio2+0x338>)
 8008f46:	461e      	mov	r6, r3
 8008f48:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f4a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008f4e:	1b2b      	subs	r3, r5, r4
 8008f50:	f04f 0900 	mov.w	r9, #0
 8008f54:	f04f 0a00 	mov.w	sl, #0
 8008f58:	2700      	movs	r7, #0
 8008f5a:	9306      	str	r3, [sp, #24]
 8008f5c:	e0e6      	b.n	800912c <__kernel_rem_pio2+0x4bc>
 8008f5e:	f04f 0b02 	mov.w	fp, #2
 8008f62:	e756      	b.n	8008e12 <__kernel_rem_pio2+0x1a2>
 8008f64:	f8d8 3000 	ldr.w	r3, [r8]
 8008f68:	bb05      	cbnz	r5, 8008fac <__kernel_rem_pio2+0x33c>
 8008f6a:	b123      	cbz	r3, 8008f76 <__kernel_rem_pio2+0x306>
 8008f6c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008f70:	f8c8 3000 	str.w	r3, [r8]
 8008f74:	2301      	movs	r3, #1
 8008f76:	3201      	adds	r2, #1
 8008f78:	f108 0804 	add.w	r8, r8, #4
 8008f7c:	461d      	mov	r5, r3
 8008f7e:	e74f      	b.n	8008e20 <__kernel_rem_pio2+0x1b0>
	...
 8008f8c:	3ff00000 	.word	0x3ff00000
 8008f90:	08009710 	.word	0x08009710
 8008f94:	40200000 	.word	0x40200000
 8008f98:	3ff00000 	.word	0x3ff00000
 8008f9c:	3e700000 	.word	0x3e700000
 8008fa0:	41700000 	.word	0x41700000
 8008fa4:	3fe00000 	.word	0x3fe00000
 8008fa8:	080096d0 	.word	0x080096d0
 8008fac:	1acb      	subs	r3, r1, r3
 8008fae:	f8c8 3000 	str.w	r3, [r8]
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	e7df      	b.n	8008f76 <__kernel_rem_pio2+0x306>
 8008fb6:	1e62      	subs	r2, r4, #1
 8008fb8:	ab0c      	add	r3, sp, #48	; 0x30
 8008fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fc2:	a90c      	add	r1, sp, #48	; 0x30
 8008fc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008fc8:	e738      	b.n	8008e3c <__kernel_rem_pio2+0x1cc>
 8008fca:	1e62      	subs	r2, r4, #1
 8008fcc:	ab0c      	add	r3, sp, #48	; 0x30
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008fd6:	e7f4      	b.n	8008fc2 <__kernel_rem_pio2+0x352>
 8008fd8:	a90c      	add	r1, sp, #48	; 0x30
 8008fda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	e788      	b.n	8008ef6 <__kernel_rem_pio2+0x286>
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008fea:	2900      	cmp	r1, #0
 8008fec:	d0fa      	beq.n	8008fe4 <__kernel_rem_pio2+0x374>
 8008fee:	9a08      	ldr	r2, [sp, #32]
 8008ff0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008ff4:	446a      	add	r2, sp
 8008ff6:	3a98      	subs	r2, #152	; 0x98
 8008ff8:	9208      	str	r2, [sp, #32]
 8008ffa:	9a06      	ldr	r2, [sp, #24]
 8008ffc:	a920      	add	r1, sp, #128	; 0x80
 8008ffe:	18a2      	adds	r2, r4, r2
 8009000:	18e3      	adds	r3, r4, r3
 8009002:	f104 0801 	add.w	r8, r4, #1
 8009006:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	4543      	cmp	r3, r8
 8009010:	da04      	bge.n	800901c <__kernel_rem_pio2+0x3ac>
 8009012:	461c      	mov	r4, r3
 8009014:	e6a2      	b.n	8008d5c <__kernel_rem_pio2+0xec>
 8009016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009018:	2301      	movs	r3, #1
 800901a:	e7e4      	b.n	8008fe6 <__kernel_rem_pio2+0x376>
 800901c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009022:	f7f7 fa2b 	bl	800047c <__aeabi_i2d>
 8009026:	e8e5 0102 	strd	r0, r1, [r5], #8
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	46ab      	mov	fp, r5
 800902e:	461c      	mov	r4, r3
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	2600      	movs	r6, #0
 8009036:	2700      	movs	r7, #0
 8009038:	9b05      	ldr	r3, [sp, #20]
 800903a:	4599      	cmp	r9, r3
 800903c:	dd06      	ble.n	800904c <__kernel_rem_pio2+0x3dc>
 800903e:	9b08      	ldr	r3, [sp, #32]
 8009040:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009044:	f108 0801 	add.w	r8, r8, #1
 8009048:	9308      	str	r3, [sp, #32]
 800904a:	e7df      	b.n	800900c <__kernel_rem_pio2+0x39c>
 800904c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009050:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009054:	f7f7 fa7c 	bl	8000550 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 f8c0 	bl	80001e4 <__adddf3>
 8009064:	f109 0901 	add.w	r9, r9, #1
 8009068:	4606      	mov	r6, r0
 800906a:	460f      	mov	r7, r1
 800906c:	e7e4      	b.n	8009038 <__kernel_rem_pio2+0x3c8>
 800906e:	3d01      	subs	r5, #1
 8009070:	e747      	b.n	8008f02 <__kernel_rem_pio2+0x292>
 8009072:	ec47 6b10 	vmov	d0, r6, r7
 8009076:	f1ca 0000 	rsb	r0, sl, #0
 800907a:	f000 f949 	bl	8009310 <scalbn>
 800907e:	ec57 6b10 	vmov	r6, r7, d0
 8009082:	4ba0      	ldr	r3, [pc, #640]	; (8009304 <__kernel_rem_pio2+0x694>)
 8009084:	ee10 0a10 	vmov	r0, s0
 8009088:	2200      	movs	r2, #0
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 fce6 	bl	8000a5c <__aeabi_dcmpge>
 8009090:	b1f8      	cbz	r0, 80090d2 <__kernel_rem_pio2+0x462>
 8009092:	4b9d      	ldr	r3, [pc, #628]	; (8009308 <__kernel_rem_pio2+0x698>)
 8009094:	2200      	movs	r2, #0
 8009096:	4630      	mov	r0, r6
 8009098:	4639      	mov	r1, r7
 800909a:	f7f7 fa59 	bl	8000550 <__aeabi_dmul>
 800909e:	f7f7 fcf1 	bl	8000a84 <__aeabi_d2iz>
 80090a2:	4680      	mov	r8, r0
 80090a4:	f7f7 f9ea 	bl	800047c <__aeabi_i2d>
 80090a8:	4b96      	ldr	r3, [pc, #600]	; (8009304 <__kernel_rem_pio2+0x694>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 fa50 	bl	8000550 <__aeabi_dmul>
 80090b0:	460b      	mov	r3, r1
 80090b2:	4602      	mov	r2, r0
 80090b4:	4639      	mov	r1, r7
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7f7 f892 	bl	80001e0 <__aeabi_dsub>
 80090bc:	f7f7 fce2 	bl	8000a84 <__aeabi_d2iz>
 80090c0:	1c65      	adds	r5, r4, #1
 80090c2:	ab0c      	add	r3, sp, #48	; 0x30
 80090c4:	f10a 0a18 	add.w	sl, sl, #24
 80090c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80090cc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80090d0:	e71f      	b.n	8008f12 <__kernel_rem_pio2+0x2a2>
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fcd5 	bl	8000a84 <__aeabi_d2iz>
 80090da:	ab0c      	add	r3, sp, #48	; 0x30
 80090dc:	4625      	mov	r5, r4
 80090de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80090e2:	e716      	b.n	8008f12 <__kernel_rem_pio2+0x2a2>
 80090e4:	ab0c      	add	r3, sp, #48	; 0x30
 80090e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80090ea:	f7f7 f9c7 	bl	800047c <__aeabi_i2d>
 80090ee:	4632      	mov	r2, r6
 80090f0:	463b      	mov	r3, r7
 80090f2:	f7f7 fa2d 	bl	8000550 <__aeabi_dmul>
 80090f6:	4642      	mov	r2, r8
 80090f8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80090fc:	464b      	mov	r3, r9
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 fa25 	bl	8000550 <__aeabi_dmul>
 8009106:	3c01      	subs	r4, #1
 8009108:	4606      	mov	r6, r0
 800910a:	460f      	mov	r7, r1
 800910c:	e713      	b.n	8008f36 <__kernel_rem_pio2+0x2c6>
 800910e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009112:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009116:	f7f7 fa1b 	bl	8000550 <__aeabi_dmul>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4648      	mov	r0, r9
 8009120:	4651      	mov	r1, sl
 8009122:	f7f7 f85f 	bl	80001e4 <__adddf3>
 8009126:	3701      	adds	r7, #1
 8009128:	4681      	mov	r9, r0
 800912a:	468a      	mov	sl, r1
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	429f      	cmp	r7, r3
 8009130:	dc02      	bgt.n	8009138 <__kernel_rem_pio2+0x4c8>
 8009132:	9b06      	ldr	r3, [sp, #24]
 8009134:	429f      	cmp	r7, r3
 8009136:	ddea      	ble.n	800910e <__kernel_rem_pio2+0x49e>
 8009138:	9a06      	ldr	r2, [sp, #24]
 800913a:	ab48      	add	r3, sp, #288	; 0x120
 800913c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009140:	e9c6 9a00 	strd	r9, sl, [r6]
 8009144:	3c01      	subs	r4, #1
 8009146:	e6fa      	b.n	8008f3e <__kernel_rem_pio2+0x2ce>
 8009148:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800914a:	2b02      	cmp	r3, #2
 800914c:	dc0b      	bgt.n	8009166 <__kernel_rem_pio2+0x4f6>
 800914e:	2b00      	cmp	r3, #0
 8009150:	dc39      	bgt.n	80091c6 <__kernel_rem_pio2+0x556>
 8009152:	d05d      	beq.n	8009210 <__kernel_rem_pio2+0x5a0>
 8009154:	9b02      	ldr	r3, [sp, #8]
 8009156:	f003 0007 	and.w	r0, r3, #7
 800915a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800915e:	ecbd 8b02 	vpop	{d8}
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009168:	2b03      	cmp	r3, #3
 800916a:	d1f3      	bne.n	8009154 <__kernel_rem_pio2+0x4e4>
 800916c:	9b05      	ldr	r3, [sp, #20]
 800916e:	9500      	str	r5, [sp, #0]
 8009170:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009174:	eb0d 0403 	add.w	r4, sp, r3
 8009178:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800917c:	46a2      	mov	sl, r4
 800917e:	9b00      	ldr	r3, [sp, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f1aa 0a08 	sub.w	sl, sl, #8
 8009186:	dc69      	bgt.n	800925c <__kernel_rem_pio2+0x5ec>
 8009188:	46aa      	mov	sl, r5
 800918a:	f1ba 0f01 	cmp.w	sl, #1
 800918e:	f1a4 0408 	sub.w	r4, r4, #8
 8009192:	f300 8083 	bgt.w	800929c <__kernel_rem_pio2+0x62c>
 8009196:	9c05      	ldr	r4, [sp, #20]
 8009198:	ab48      	add	r3, sp, #288	; 0x120
 800919a:	441c      	add	r4, r3
 800919c:	2000      	movs	r0, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	2d01      	cmp	r5, #1
 80091a2:	f300 809a 	bgt.w	80092da <__kernel_rem_pio2+0x66a>
 80091a6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80091aa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80091ae:	f1bb 0f00 	cmp.w	fp, #0
 80091b2:	f040 8098 	bne.w	80092e6 <__kernel_rem_pio2+0x676>
 80091b6:	9b04      	ldr	r3, [sp, #16]
 80091b8:	e9c3 7800 	strd	r7, r8, [r3]
 80091bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80091c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80091c4:	e7c6      	b.n	8009154 <__kernel_rem_pio2+0x4e4>
 80091c6:	9e05      	ldr	r6, [sp, #20]
 80091c8:	ab48      	add	r3, sp, #288	; 0x120
 80091ca:	441e      	add	r6, r3
 80091cc:	462c      	mov	r4, r5
 80091ce:	2000      	movs	r0, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	2c00      	cmp	r4, #0
 80091d4:	da33      	bge.n	800923e <__kernel_rem_pio2+0x5ce>
 80091d6:	f1bb 0f00 	cmp.w	fp, #0
 80091da:	d036      	beq.n	800924a <__kernel_rem_pio2+0x5da>
 80091dc:	4602      	mov	r2, r0
 80091de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e2:	9c04      	ldr	r4, [sp, #16]
 80091e4:	e9c4 2300 	strd	r2, r3, [r4]
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80091f0:	f7f6 fff6 	bl	80001e0 <__aeabi_dsub>
 80091f4:	ae4a      	add	r6, sp, #296	; 0x128
 80091f6:	2401      	movs	r4, #1
 80091f8:	42a5      	cmp	r5, r4
 80091fa:	da29      	bge.n	8009250 <__kernel_rem_pio2+0x5e0>
 80091fc:	f1bb 0f00 	cmp.w	fp, #0
 8009200:	d002      	beq.n	8009208 <__kernel_rem_pio2+0x598>
 8009202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009206:	4619      	mov	r1, r3
 8009208:	9b04      	ldr	r3, [sp, #16]
 800920a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800920e:	e7a1      	b.n	8009154 <__kernel_rem_pio2+0x4e4>
 8009210:	9c05      	ldr	r4, [sp, #20]
 8009212:	ab48      	add	r3, sp, #288	; 0x120
 8009214:	441c      	add	r4, r3
 8009216:	2000      	movs	r0, #0
 8009218:	2100      	movs	r1, #0
 800921a:	2d00      	cmp	r5, #0
 800921c:	da09      	bge.n	8009232 <__kernel_rem_pio2+0x5c2>
 800921e:	f1bb 0f00 	cmp.w	fp, #0
 8009222:	d002      	beq.n	800922a <__kernel_rem_pio2+0x5ba>
 8009224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009228:	4619      	mov	r1, r3
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	e9c3 0100 	strd	r0, r1, [r3]
 8009230:	e790      	b.n	8009154 <__kernel_rem_pio2+0x4e4>
 8009232:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009236:	f7f6 ffd5 	bl	80001e4 <__adddf3>
 800923a:	3d01      	subs	r5, #1
 800923c:	e7ed      	b.n	800921a <__kernel_rem_pio2+0x5aa>
 800923e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009242:	f7f6 ffcf 	bl	80001e4 <__adddf3>
 8009246:	3c01      	subs	r4, #1
 8009248:	e7c3      	b.n	80091d2 <__kernel_rem_pio2+0x562>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	e7c8      	b.n	80091e2 <__kernel_rem_pio2+0x572>
 8009250:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009254:	f7f6 ffc6 	bl	80001e4 <__adddf3>
 8009258:	3401      	adds	r4, #1
 800925a:	e7cd      	b.n	80091f8 <__kernel_rem_pio2+0x588>
 800925c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009260:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	3b01      	subs	r3, #1
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	4632      	mov	r2, r6
 800926c:	463b      	mov	r3, r7
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f6 ffb7 	bl	80001e4 <__adddf3>
 8009276:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4640      	mov	r0, r8
 8009280:	4649      	mov	r1, r9
 8009282:	f7f6 ffad 	bl	80001e0 <__aeabi_dsub>
 8009286:	4632      	mov	r2, r6
 8009288:	463b      	mov	r3, r7
 800928a:	f7f6 ffab 	bl	80001e4 <__adddf3>
 800928e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009292:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009296:	ed8a 7b00 	vstr	d7, [sl]
 800929a:	e770      	b.n	800917e <__kernel_rem_pio2+0x50e>
 800929c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80092a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80092a4:	4640      	mov	r0, r8
 80092a6:	4632      	mov	r2, r6
 80092a8:	463b      	mov	r3, r7
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f6 ff9a 	bl	80001e4 <__adddf3>
 80092b0:	e9cd 0100 	strd	r0, r1, [sp]
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4640      	mov	r0, r8
 80092ba:	4649      	mov	r1, r9
 80092bc:	f7f6 ff90 	bl	80001e0 <__aeabi_dsub>
 80092c0:	4632      	mov	r2, r6
 80092c2:	463b      	mov	r3, r7
 80092c4:	f7f6 ff8e 	bl	80001e4 <__adddf3>
 80092c8:	ed9d 7b00 	vldr	d7, [sp]
 80092cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092d0:	ed84 7b00 	vstr	d7, [r4]
 80092d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80092d8:	e757      	b.n	800918a <__kernel_rem_pio2+0x51a>
 80092da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80092de:	f7f6 ff81 	bl	80001e4 <__adddf3>
 80092e2:	3d01      	subs	r5, #1
 80092e4:	e75c      	b.n	80091a0 <__kernel_rem_pio2+0x530>
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	9a04      	ldr	r2, [sp, #16]
 80092ea:	601f      	str	r7, [r3, #0]
 80092ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80092f0:	605c      	str	r4, [r3, #4]
 80092f2:	609d      	str	r5, [r3, #8]
 80092f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80092f8:	60d3      	str	r3, [r2, #12]
 80092fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092fe:	6110      	str	r0, [r2, #16]
 8009300:	6153      	str	r3, [r2, #20]
 8009302:	e727      	b.n	8009154 <__kernel_rem_pio2+0x4e4>
 8009304:	41700000 	.word	0x41700000
 8009308:	3e700000 	.word	0x3e700000
 800930c:	00000000 	.word	0x00000000

08009310 <scalbn>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	ec55 4b10 	vmov	r4, r5, d0
 8009316:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800931a:	4606      	mov	r6, r0
 800931c:	462b      	mov	r3, r5
 800931e:	b999      	cbnz	r1, 8009348 <scalbn+0x38>
 8009320:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009324:	4323      	orrs	r3, r4
 8009326:	d03f      	beq.n	80093a8 <scalbn+0x98>
 8009328:	4b35      	ldr	r3, [pc, #212]	; (8009400 <scalbn+0xf0>)
 800932a:	4629      	mov	r1, r5
 800932c:	ee10 0a10 	vmov	r0, s0
 8009330:	2200      	movs	r2, #0
 8009332:	f7f7 f90d 	bl	8000550 <__aeabi_dmul>
 8009336:	4b33      	ldr	r3, [pc, #204]	; (8009404 <scalbn+0xf4>)
 8009338:	429e      	cmp	r6, r3
 800933a:	4604      	mov	r4, r0
 800933c:	460d      	mov	r5, r1
 800933e:	da10      	bge.n	8009362 <scalbn+0x52>
 8009340:	a327      	add	r3, pc, #156	; (adr r3, 80093e0 <scalbn+0xd0>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	e01f      	b.n	8009388 <scalbn+0x78>
 8009348:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800934c:	4291      	cmp	r1, r2
 800934e:	d10c      	bne.n	800936a <scalbn+0x5a>
 8009350:	ee10 2a10 	vmov	r2, s0
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f7f6 ff44 	bl	80001e4 <__adddf3>
 800935c:	4604      	mov	r4, r0
 800935e:	460d      	mov	r5, r1
 8009360:	e022      	b.n	80093a8 <scalbn+0x98>
 8009362:	460b      	mov	r3, r1
 8009364:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009368:	3936      	subs	r1, #54	; 0x36
 800936a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800936e:	4296      	cmp	r6, r2
 8009370:	dd0d      	ble.n	800938e <scalbn+0x7e>
 8009372:	2d00      	cmp	r5, #0
 8009374:	a11c      	add	r1, pc, #112	; (adr r1, 80093e8 <scalbn+0xd8>)
 8009376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800937a:	da02      	bge.n	8009382 <scalbn+0x72>
 800937c:	a11c      	add	r1, pc, #112	; (adr r1, 80093f0 <scalbn+0xe0>)
 800937e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009382:	a319      	add	r3, pc, #100	; (adr r3, 80093e8 <scalbn+0xd8>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f7 f8e2 	bl	8000550 <__aeabi_dmul>
 800938c:	e7e6      	b.n	800935c <scalbn+0x4c>
 800938e:	1872      	adds	r2, r6, r1
 8009390:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009394:	428a      	cmp	r2, r1
 8009396:	dcec      	bgt.n	8009372 <scalbn+0x62>
 8009398:	2a00      	cmp	r2, #0
 800939a:	dd08      	ble.n	80093ae <scalbn+0x9e>
 800939c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80093a8:	ec45 4b10 	vmov	d0, r4, r5
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80093b2:	da08      	bge.n	80093c6 <scalbn+0xb6>
 80093b4:	2d00      	cmp	r5, #0
 80093b6:	a10a      	add	r1, pc, #40	; (adr r1, 80093e0 <scalbn+0xd0>)
 80093b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093bc:	dac0      	bge.n	8009340 <scalbn+0x30>
 80093be:	a10e      	add	r1, pc, #56	; (adr r1, 80093f8 <scalbn+0xe8>)
 80093c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c4:	e7bc      	b.n	8009340 <scalbn+0x30>
 80093c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093ca:	3236      	adds	r2, #54	; 0x36
 80093cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80093d4:	4620      	mov	r0, r4
 80093d6:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <scalbn+0xf8>)
 80093d8:	2200      	movs	r2, #0
 80093da:	e7d5      	b.n	8009388 <scalbn+0x78>
 80093dc:	f3af 8000 	nop.w
 80093e0:	c2f8f359 	.word	0xc2f8f359
 80093e4:	01a56e1f 	.word	0x01a56e1f
 80093e8:	8800759c 	.word	0x8800759c
 80093ec:	7e37e43c 	.word	0x7e37e43c
 80093f0:	8800759c 	.word	0x8800759c
 80093f4:	fe37e43c 	.word	0xfe37e43c
 80093f8:	c2f8f359 	.word	0xc2f8f359
 80093fc:	81a56e1f 	.word	0x81a56e1f
 8009400:	43500000 	.word	0x43500000
 8009404:	ffff3cb0 	.word	0xffff3cb0
 8009408:	3c900000 	.word	0x3c900000
 800940c:	00000000 	.word	0x00000000

08009410 <floor>:
 8009410:	ec51 0b10 	vmov	r0, r1, d0
 8009414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009420:	2e13      	cmp	r6, #19
 8009422:	ee10 5a10 	vmov	r5, s0
 8009426:	ee10 8a10 	vmov	r8, s0
 800942a:	460c      	mov	r4, r1
 800942c:	dc31      	bgt.n	8009492 <floor+0x82>
 800942e:	2e00      	cmp	r6, #0
 8009430:	da14      	bge.n	800945c <floor+0x4c>
 8009432:	a333      	add	r3, pc, #204	; (adr r3, 8009500 <floor+0xf0>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f6 fed4 	bl	80001e4 <__adddf3>
 800943c:	2200      	movs	r2, #0
 800943e:	2300      	movs	r3, #0
 8009440:	f7f7 fb16 	bl	8000a70 <__aeabi_dcmpgt>
 8009444:	b138      	cbz	r0, 8009456 <floor+0x46>
 8009446:	2c00      	cmp	r4, #0
 8009448:	da53      	bge.n	80094f2 <floor+0xe2>
 800944a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800944e:	4325      	orrs	r5, r4
 8009450:	d052      	beq.n	80094f8 <floor+0xe8>
 8009452:	4c2d      	ldr	r4, [pc, #180]	; (8009508 <floor+0xf8>)
 8009454:	2500      	movs	r5, #0
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	e024      	b.n	80094a6 <floor+0x96>
 800945c:	4f2b      	ldr	r7, [pc, #172]	; (800950c <floor+0xfc>)
 800945e:	4137      	asrs	r7, r6
 8009460:	ea01 0307 	and.w	r3, r1, r7
 8009464:	4303      	orrs	r3, r0
 8009466:	d01e      	beq.n	80094a6 <floor+0x96>
 8009468:	a325      	add	r3, pc, #148	; (adr r3, 8009500 <floor+0xf0>)
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	f7f6 feb9 	bl	80001e4 <__adddf3>
 8009472:	2200      	movs	r2, #0
 8009474:	2300      	movs	r3, #0
 8009476:	f7f7 fafb 	bl	8000a70 <__aeabi_dcmpgt>
 800947a:	2800      	cmp	r0, #0
 800947c:	d0eb      	beq.n	8009456 <floor+0x46>
 800947e:	2c00      	cmp	r4, #0
 8009480:	bfbe      	ittt	lt
 8009482:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009486:	4133      	asrlt	r3, r6
 8009488:	18e4      	addlt	r4, r4, r3
 800948a:	ea24 0407 	bic.w	r4, r4, r7
 800948e:	2500      	movs	r5, #0
 8009490:	e7e1      	b.n	8009456 <floor+0x46>
 8009492:	2e33      	cmp	r6, #51	; 0x33
 8009494:	dd0b      	ble.n	80094ae <floor+0x9e>
 8009496:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800949a:	d104      	bne.n	80094a6 <floor+0x96>
 800949c:	ee10 2a10 	vmov	r2, s0
 80094a0:	460b      	mov	r3, r1
 80094a2:	f7f6 fe9f 	bl	80001e4 <__adddf3>
 80094a6:	ec41 0b10 	vmov	d0, r0, r1
 80094aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80094b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094b6:	40df      	lsrs	r7, r3
 80094b8:	4238      	tst	r0, r7
 80094ba:	d0f4      	beq.n	80094a6 <floor+0x96>
 80094bc:	a310      	add	r3, pc, #64	; (adr r3, 8009500 <floor+0xf0>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f7f6 fe8f 	bl	80001e4 <__adddf3>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	f7f7 fad1 	bl	8000a70 <__aeabi_dcmpgt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d0c1      	beq.n	8009456 <floor+0x46>
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	da0a      	bge.n	80094ec <floor+0xdc>
 80094d6:	2e14      	cmp	r6, #20
 80094d8:	d101      	bne.n	80094de <floor+0xce>
 80094da:	3401      	adds	r4, #1
 80094dc:	e006      	b.n	80094ec <floor+0xdc>
 80094de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80094e2:	2301      	movs	r3, #1
 80094e4:	40b3      	lsls	r3, r6
 80094e6:	441d      	add	r5, r3
 80094e8:	45a8      	cmp	r8, r5
 80094ea:	d8f6      	bhi.n	80094da <floor+0xca>
 80094ec:	ea25 0507 	bic.w	r5, r5, r7
 80094f0:	e7b1      	b.n	8009456 <floor+0x46>
 80094f2:	2500      	movs	r5, #0
 80094f4:	462c      	mov	r4, r5
 80094f6:	e7ae      	b.n	8009456 <floor+0x46>
 80094f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80094fc:	e7ab      	b.n	8009456 <floor+0x46>
 80094fe:	bf00      	nop
 8009500:	8800759c 	.word	0x8800759c
 8009504:	7e37e43c 	.word	0x7e37e43c
 8009508:	bff00000 	.word	0xbff00000
 800950c:	000fffff 	.word	0x000fffff

08009510 <_init>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr

0800951c <_fini>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	bf00      	nop
 8009520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009522:	bc08      	pop	{r3}
 8009524:	469e      	mov	lr, r3
 8009526:	4770      	bx	lr
