
AMR_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006918  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006ab0  08006ab0  00016ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca0  08006ca0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca8  08006ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000010  08006cbc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08006cbc  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eeed  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002111  00000000  00000000  0002ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00031080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8b  00000000  00000000  00031de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001697b  00000000  00000000  00032873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efa4  00000000  00000000  000491ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ef8c  00000000  00000000  00058192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d10  00000000  00000000  000e7120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000eae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006a98 	.word	0x08006a98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006a98 	.word	0x08006a98

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ae8:	f000 b970 	b.w	8000dcc <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9e08      	ldr	r6, [sp, #32]
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	460f      	mov	r7, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d14a      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4694      	mov	ip, r2
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0xe2>
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	b143      	cbz	r3, 8000b32 <__udivmoddi4+0x2e>
 8000b20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b24:	f1c3 0220 	rsb	r2, r3, #32
 8000b28:	409f      	lsls	r7, r3
 8000b2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	409c      	lsls	r4, r3
 8000b32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b36:	fa1f f58c 	uxth.w	r5, ip
 8000b3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b3e:	0c22      	lsrs	r2, r4, #16
 8000b40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b48:	fb01 f005 	mul.w	r0, r1, r5
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x62>
 8000b50:	eb1c 0202 	adds.w	r2, ip, r2
 8000b54:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b58:	f080 811c 	bcs.w	8000d94 <__udivmoddi4+0x290>
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	f240 8119 	bls.w	8000d94 <__udivmoddi4+0x290>
 8000b62:	3902      	subs	r1, #2
 8000b64:	4462      	add	r2, ip
 8000b66:	1a12      	subs	r2, r2, r0
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b76:	fb00 f505 	mul.w	r5, r0, r5
 8000b7a:	42a5      	cmp	r5, r4
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x90>
 8000b7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b82:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b86:	f080 8107 	bcs.w	8000d98 <__udivmoddi4+0x294>
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	f240 8104 	bls.w	8000d98 <__udivmoddi4+0x294>
 8000b90:	4464      	add	r4, ip
 8000b92:	3802      	subs	r0, #2
 8000b94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	b11e      	cbz	r6, 8000ba6 <__udivmoddi4+0xa2>
 8000b9e:	40dc      	lsrs	r4, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0xbc>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	f000 80ed 	beq.w	8000d8e <__udivmoddi4+0x28a>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc0:	fab3 f183 	clz	r1, r3
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d149      	bne.n	8000c5c <__udivmoddi4+0x158>
 8000bc8:	42ab      	cmp	r3, r5
 8000bca:	d302      	bcc.n	8000bd2 <__udivmoddi4+0xce>
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	f200 80f8 	bhi.w	8000dc2 <__udivmoddi4+0x2be>
 8000bd2:	1a84      	subs	r4, r0, r2
 8000bd4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd8:	2001      	movs	r0, #1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d0e2      	beq.n	8000ba6 <__udivmoddi4+0xa2>
 8000be0:	e9c6 4700 	strd	r4, r7, [r6]
 8000be4:	e7df      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000be6:	b902      	cbnz	r2, 8000bea <__udivmoddi4+0xe6>
 8000be8:	deff      	udf	#255	; 0xff
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x210>
 8000bf4:	1a8a      	subs	r2, r1, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c04:	fb07 2015 	mls	r0, r7, r5, r2
 8000c08:	0c22      	lsrs	r2, r4, #16
 8000c0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c0e:	fb0e f005 	mul.w	r0, lr, r5
 8000c12:	4290      	cmp	r0, r2
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x124>
 8000c16:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x122>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2b8>
 8000c26:	4645      	mov	r5, r8
 8000c28:	1a12      	subs	r2, r2, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c30:	fb07 2210 	mls	r2, r7, r0, r2
 8000c34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x14e>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x14c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2c2>
 8000c50:	4610      	mov	r0, r2
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c5a:	e79f      	b.n	8000b9c <__udivmoddi4+0x98>
 8000c5c:	f1c1 0720 	rsb	r7, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c72:	40fd      	lsrs	r5, r7
 8000c74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c78:	4323      	orrs	r3, r4
 8000c7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	fb09 5518 	mls	r5, r9, r8, r5
 8000c86:	0c1c      	lsrs	r4, r3, #16
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	fa02 f201 	lsl.w	r2, r2, r1
 8000c96:	fa00 f001 	lsl.w	r0, r0, r1
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b0>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2b4>
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2b4>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4464      	add	r4, ip
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	b29d      	uxth	r5, r3
 8000cb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1da>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2ac>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2ac>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	42ac      	cmp	r4, r5
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46ae      	mov	lr, r5
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x29c>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x298>
 8000cf4:	b156      	cbz	r6, 8000d0c <__udivmoddi4+0x208>
 8000cf6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cfa:	eb64 040e 	sbc.w	r4, r4, lr
 8000cfe:	fa04 f707 	lsl.w	r7, r4, r7
 8000d02:	40ca      	lsrs	r2, r1
 8000d04:	40cc      	lsrs	r4, r1
 8000d06:	4317      	orrs	r7, r2
 8000d08:	e9c6 7400 	strd	r7, r4, [r6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	f1c3 0120 	rsb	r1, r3, #32
 8000d18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d20:	fa25 f101 	lsr.w	r1, r5, r1
 8000d24:	409d      	lsls	r5, r3
 8000d26:	432a      	orrs	r2, r5
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1510 	mls	r5, r7, r0, r1
 8000d38:	0c11      	lsrs	r1, r2, #16
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d42:	428d      	cmp	r5, r1
 8000d44:	fa04 f403 	lsl.w	r4, r4, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x258>
 8000d4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b0>
 8000d54:	428d      	cmp	r5, r1
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b0>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1b49      	subs	r1, r1, r5
 8000d5e:	b292      	uxth	r2, r2
 8000d60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d64:	fb07 1115 	mls	r1, r7, r5, r1
 8000d68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d70:	4291      	cmp	r1, r2
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x282>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2a8>
 8000d7e:	4291      	cmp	r1, r2
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2a8>
 8000d82:	3d02      	subs	r5, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a52      	subs	r2, r2, r1
 8000d88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0xfc>
 8000d8e:	4631      	mov	r1, r6
 8000d90:	4630      	mov	r0, r6
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000d94:	4639      	mov	r1, r7
 8000d96:	e6e6      	b.n	8000b66 <__udivmoddi4+0x62>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	e6fb      	b.n	8000b94 <__udivmoddi4+0x90>
 8000d9c:	4548      	cmp	r0, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f0>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da8:	3b01      	subs	r3, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f0>
 8000dac:	4645      	mov	r5, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x282>
 8000db0:	462b      	mov	r3, r5
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1da>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x258>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b0>
 8000dbc:	3d02      	subs	r5, #2
 8000dbe:	4462      	add	r2, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x124>
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	e70a      	b.n	8000bdc <__udivmoddi4+0xd8>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x14e>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <aktuator_up>:
	HAL_GPIO_WritePin(drv.PORT_IN2, drv.PIN_IN2, GPIO_PIN_SET);
	HAL_GPIO_WritePin(drv.PORT_IN3, drv.PIN_IN3, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(drv.PORT_IN4, drv.PIN_IN4, GPIO_PIN_SET);
}

void aktuator_up(aktuator_t drv){
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	f107 0c08 	add.w	ip, r7, #8
 8000dda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(drv.PORT_IN1, drv.PIN_IN1, GPIO_PIN_SET);
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	8b39      	ldrh	r1, [r7, #24]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fa19 	bl	800321c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN2, drv.PIN_IN2, GPIO_PIN_RESET);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	8b79      	ldrh	r1, [r7, #26]
 8000dee:	2200      	movs	r2, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fa13 	bl	800321c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN3, drv.PIN_IN3, GPIO_PIN_SET);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	8bb9      	ldrh	r1, [r7, #28]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fa0d 	bl	800321c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drv.PORT_IN4, drv.PIN_IN4, GPIO_PIN_RESET);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	8bf9      	ldrh	r1, [r7, #30]
 8000e06:	2200      	movs	r2, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fa07 	bl	800321c <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e16:	b004      	add	sp, #16
 8000e18:	4770      	bx	lr

08000e1a <agv_stop>:
			HAL_TIM_PWM_Start(motor.tim_L, TIM_CHANNEL_4);
		}
	}
}

void agv_stop(motor_t motor){
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f107 0c08 	add.w	ip, r7, #8
 8000e24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(motor.EN_PORT_R, motor.EN_PIN_R, GPIO_PIN_RESET);
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 f9f4 	bl	800321c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor.EN_PORT_L, motor.EN_PIN_L, GPIO_PIN_RESET);
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 f9ee 	bl	800321c <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e48:	b004      	add	sp, #16
 8000e4a:	4770      	bx	lr

08000e4c <agv_stop_all>:

void agv_stop_all(motor_t motorA, motor_t motorB, motor_t motorC, motor_t motorD){
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	b5b0      	push	{r4, r5, r7, lr}
 8000e50:	b08c      	sub	sp, #48	; 0x30
 8000e52:	af0c      	add	r7, sp, #48	; 0x30
 8000e54:	f107 0410 	add.w	r4, r7, #16
 8000e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	agv_stop(motorA);
 8000e5c:	466d      	mov	r5, sp
 8000e5e:	f107 0420 	add.w	r4, r7, #32
 8000e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e78:	f7ff ffcf 	bl	8000e1a <agv_stop>
	agv_stop(motorB);
 8000e7c:	466d      	mov	r5, sp
 8000e7e:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000e92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e98:	f7ff ffbf 	bl	8000e1a <agv_stop>
	agv_stop(motorC);
 8000e9c:	466d      	mov	r5, sp
 8000e9e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eaa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000eae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000eb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb8:	f7ff ffaf 	bl	8000e1a <agv_stop>
	agv_stop(motorD);
 8000ebc:	466d      	mov	r5, sp
 8000ebe:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ece:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ed2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed8:	f7ff ff9f 	bl	8000e1a <agv_stop>
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ee4:	b004      	add	sp, #16
 8000ee6:	4770      	bx	lr

08000ee8 <agv_encoder_start>:
	agv_run_motor(motorB,0);
	agv_run_motor(motorC,0);
	agv_run_motor(motorD,0);
}

void agv_encoder_start(encoder_t encoder, TIM_HandleTypeDef* tim,TIM_TypeDef* tim_number){
 8000ee8:	b084      	sub	sp, #16
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	f107 0c08 	add.w	ip, r7, #8
 8000ef2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	encoder.tim = tim;
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	60bb      	str	r3, [r7, #8]
	encoder.tim_number = tim_number;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start_IT(tim, TIM_CHANNEL_ALL);
 8000efe:	213c      	movs	r1, #60	; 0x3c
 8000f00:	6a38      	ldr	r0, [r7, #32]
 8000f02:	f002 ff4b 	bl	8003d9c <HAL_TIM_Encoder_Start_IT>
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f0e:	b004      	add	sp, #16
 8000f10:	4770      	bx	lr
 8000f12:	0000      	movs	r0, r0
 8000f14:	0000      	movs	r0, r0
	...

08000f18 <agv_kinematic_Sx>:
void agv_forward_kinematic(encoder_t encA, encoder_t encB, encoder_t encC, encoder_t encD, double yaw, kinematic_t kinematic){
	kinematic.Sx = ((-sin(DEG_TO_RAD(45+yaw))*encA.position) + (-sin(DEG_TO_RAD(135+yaw))*encB.position) + (-sin(DEG_TO_RAD(225+yaw))*encC.position) + (-sin(DEG_TO_RAD(315+yaw))*encD.position))*0.5;
	kinematic.Sy = ((cos(DEG_TO_RAD(45+yaw))*encA.position) + (cos(DEG_TO_RAD(135+yaw))*encB.position) + (cos(DEG_TO_RAD(225+yaw))*encC.position) + (cos(DEG_TO_RAD(315+yaw))*encD.position))*0.5;
	kinematic.St = (((2*encA.position)/R_AMR)+((2*encB.position)/R_AMR)+((2*encC.position)/R_AMR)+((2*encD.position)/R_AMR))*0.5;
}
double agv_kinematic_Sx(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 8000f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f1c:	b08a      	sub	sp, #40	; 0x28
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	61f8      	str	r0, [r7, #28]
 8000f22:	61b9      	str	r1, [r7, #24]
 8000f24:	617a      	str	r2, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	ed87 0b02 	vstr	d0, [r7, #8]
	double sy = ((-sin(DEG_TO_RAD(45+yaw))*pos_A) + (-sin(DEG_TO_RAD(135+yaw))*pos_B) + (-sin(DEG_TO_RAD(225+yaw))*pos_C) + (-sin(DEG_TO_RAD(315+yaw))*pos_D))*0.5;
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b85      	ldr	r3, [pc, #532]	; (8001148 <agv_kinematic_Sx+0x230>)
 8000f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f36:	f7ff f955 	bl	80001e4 <__adddf3>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	a379      	add	r3, pc, #484	; (adr r3, 8001128 <agv_kinematic_Sx+0x210>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb02 	bl	8000550 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b7c      	ldr	r3, [pc, #496]	; (800114c <agv_kinematic_Sx+0x234>)
 8000f5a:	f7ff fc23 	bl	80007a4 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	ec43 2b17 	vmov	d7, r2, r3
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	eef0 0a67 	vmov.f32	s1, s15
 8000f6e:	f004 fd53 	bl	8005a18 <sin>
 8000f72:	ec53 2b10 	vmov	r2, r3, d0
 8000f76:	4614      	mov	r4, r2
 8000f78:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f7c:	69f8      	ldr	r0, [r7, #28]
 8000f7e:	f7ff fa7d 	bl	800047c <__aeabi_i2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4620      	mov	r0, r4
 8000f88:	4629      	mov	r1, r5
 8000f8a:	f7ff fae1 	bl	8000550 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
 8000f96:	a366      	add	r3, pc, #408	; (adr r3, 8001130 <agv_kinematic_Sx+0x218>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa0:	f7ff f920 	bl	80001e4 <__adddf3>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	a35e      	add	r3, pc, #376	; (adr r3, 8001128 <agv_kinematic_Sx+0x210>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff facd 	bl	8000550 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b62      	ldr	r3, [pc, #392]	; (800114c <agv_kinematic_Sx+0x234>)
 8000fc4:	f7ff fbee 	bl	80007a4 <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	ec43 2b17 	vmov	d7, r2, r3
 8000fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd4:	eef0 0a67 	vmov.f32	s1, s15
 8000fd8:	f004 fd1e 	bl	8005a18 <sin>
 8000fdc:	ec53 2b10 	vmov	r2, r3, d0
 8000fe0:	603a      	str	r2, [r7, #0]
 8000fe2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	69b8      	ldr	r0, [r7, #24]
 8000fea:	f7ff fa47 	bl	800047c <__aeabi_i2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff6:	f7ff faab 	bl	8000550 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4620      	mov	r0, r4
 8001000:	4629      	mov	r1, r5
 8001002:	f7ff f8ef 	bl	80001e4 <__adddf3>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4614      	mov	r4, r2
 800100c:	461d      	mov	r5, r3
 800100e:	a34a      	add	r3, pc, #296	; (adr r3, 8001138 <agv_kinematic_Sx+0x220>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001018:	f7ff f8e4 	bl	80001e4 <__adddf3>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	a340      	add	r3, pc, #256	; (adr r3, 8001128 <agv_kinematic_Sx+0x210>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fa91 	bl	8000550 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <agv_kinematic_Sx+0x234>)
 800103c:	f7ff fbb2 	bl	80007a4 <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	ec43 2b17 	vmov	d7, r2, r3
 8001048:	eeb0 0a47 	vmov.f32	s0, s14
 800104c:	eef0 0a67 	vmov.f32	s1, s15
 8001050:	f004 fce2 	bl	8005a18 <sin>
 8001054:	ec53 2b10 	vmov	r2, r3, d0
 8001058:	4692      	mov	sl, r2
 800105a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff fa0c 	bl	800047c <__aeabi_i2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4650      	mov	r0, sl
 800106a:	4659      	mov	r1, fp
 800106c:	f7ff fa70 	bl	8000550 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff f8b4 	bl	80001e4 <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4614      	mov	r4, r2
 8001082:	461d      	mov	r5, r3
 8001084:	a32e      	add	r3, pc, #184	; (adr r3, 8001140 <agv_kinematic_Sx+0x228>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800108e:	f7ff f8a9 	bl	80001e4 <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	a323      	add	r3, pc, #140	; (adr r3, 8001128 <agv_kinematic_Sx+0x210>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa56 	bl	8000550 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <agv_kinematic_Sx+0x234>)
 80010b2:	f7ff fb77 	bl	80007a4 <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	ec43 2b17 	vmov	d7, r2, r3
 80010be:	eeb0 0a47 	vmov.f32	s0, s14
 80010c2:	eef0 0a67 	vmov.f32	s1, s15
 80010c6:	f004 fca7 	bl	8005a18 <sin>
 80010ca:	ec53 2b10 	vmov	r2, r3, d0
 80010ce:	4690      	mov	r8, r2
 80010d0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f7ff f9d1 	bl	800047c <__aeabi_i2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4640      	mov	r0, r8
 80010e0:	4649      	mov	r1, r9
 80010e2:	f7ff fa35 	bl	8000550 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff f879 	bl	80001e4 <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <agv_kinematic_Sx+0x238>)
 8001100:	f7ff fa26 	bl	8000550 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return sy;
 800110c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001110:	ec43 2b17 	vmov	d7, r2, r3
}
 8001114:	eeb0 0a47 	vmov.f32	s0, s14
 8001118:	eef0 0a67 	vmov.f32	s1, s15
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	54442d18 	.word	0x54442d18
 800112c:	400921fb 	.word	0x400921fb
 8001130:	00000000 	.word	0x00000000
 8001134:	4060e000 	.word	0x4060e000
 8001138:	00000000 	.word	0x00000000
 800113c:	406c2000 	.word	0x406c2000
 8001140:	00000000 	.word	0x00000000
 8001144:	4073b000 	.word	0x4073b000
 8001148:	40468000 	.word	0x40468000
 800114c:	40668000 	.word	0x40668000
 8001150:	3fe00000 	.word	0x3fe00000
 8001154:	00000000 	.word	0x00000000

08001158 <agv_kinematic_Sy>:
double agv_kinematic_Sy(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 8001158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800115c:	b088      	sub	sp, #32
 800115e:	af00      	add	r7, sp, #0
 8001160:	6178      	str	r0, [r7, #20]
 8001162:	6139      	str	r1, [r7, #16]
 8001164:	60fa      	str	r2, [r7, #12]
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	ed87 0b00 	vstr	d0, [r7]
	double sx = ((cos(DEG_TO_RAD(45+yaw))*pos_A) + (cos(DEG_TO_RAD(135+yaw))*pos_B) + (cos(DEG_TO_RAD(225+yaw))*pos_C) + (cos(DEG_TO_RAD(315+yaw))*pos_D))*0.5;
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <agv_kinematic_Sy+0x218>)
 8001172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001176:	f7ff f835 	bl	80001e4 <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a373      	add	r3, pc, #460	; (adr r3, 8001350 <agv_kinematic_Sy+0x1f8>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f9e2 	bl	8000550 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b76      	ldr	r3, [pc, #472]	; (8001374 <agv_kinematic_Sy+0x21c>)
 800119a:	f7ff fb03 	bl	80007a4 <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	ec43 2b17 	vmov	d7, r2, r3
 80011a6:	eeb0 0a47 	vmov.f32	s0, s14
 80011aa:	eef0 0a67 	vmov.f32	s1, s15
 80011ae:	f004 fbdf 	bl	8005970 <cos>
 80011b2:	ec55 4b10 	vmov	r4, r5, d0
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff f960 	bl	800047c <__aeabi_i2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f9c4 	bl	8000550 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	a361      	add	r3, pc, #388	; (adr r3, 8001358 <agv_kinematic_Sy+0x200>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011da:	f7ff f803 	bl	80001e4 <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	a35a      	add	r3, pc, #360	; (adr r3, 8001350 <agv_kinematic_Sy+0x1f8>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f9b0 	bl	8000550 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <agv_kinematic_Sy+0x21c>)
 80011fe:	f7ff fad1 	bl	80007a4 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	ec43 2b17 	vmov	d7, r2, r3
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	f004 fbad 	bl	8005970 <cos>
 8001216:	ec59 8b10 	vmov	r8, r9, d0
 800121a:	6938      	ldr	r0, [r7, #16]
 800121c:	f7ff f92e 	bl	800047c <__aeabi_i2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4640      	mov	r0, r8
 8001226:	4649      	mov	r1, r9
 8001228:	f7ff f992 	bl	8000550 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	f7fe ffd6 	bl	80001e4 <__adddf3>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4614      	mov	r4, r2
 800123e:	461d      	mov	r5, r3
 8001240:	a347      	add	r3, pc, #284	; (adr r3, 8001360 <agv_kinematic_Sy+0x208>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124a:	f7fe ffcb 	bl	80001e4 <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	a33e      	add	r3, pc, #248	; (adr r3, 8001350 <agv_kinematic_Sy+0x1f8>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f978 	bl	8000550 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <agv_kinematic_Sy+0x21c>)
 800126e:	f7ff fa99 	bl	80007a4 <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	ec43 2b17 	vmov	d7, r2, r3
 800127a:	eeb0 0a47 	vmov.f32	s0, s14
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	f004 fb75 	bl	8005970 <cos>
 8001286:	ec59 8b10 	vmov	r8, r9, d0
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff f8f6 	bl	800047c <__aeabi_i2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4640      	mov	r0, r8
 8001296:	4649      	mov	r1, r9
 8001298:	f7ff f95a 	bl	8000550 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7fe ff9e 	bl	80001e4 <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	461d      	mov	r5, r3
 80012b0:	a32d      	add	r3, pc, #180	; (adr r3, 8001368 <agv_kinematic_Sy+0x210>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ba:	f7fe ff93 	bl	80001e4 <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	a322      	add	r3, pc, #136	; (adr r3, 8001350 <agv_kinematic_Sy+0x1f8>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f940 	bl	8000550 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <agv_kinematic_Sy+0x21c>)
 80012de:	f7ff fa61 	bl	80007a4 <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b17 	vmov	d7, r2, r3
 80012ea:	eeb0 0a47 	vmov.f32	s0, s14
 80012ee:	eef0 0a67 	vmov.f32	s1, s15
 80012f2:	f004 fb3d 	bl	8005970 <cos>
 80012f6:	ec59 8b10 	vmov	r8, r9, d0
 80012fa:	68b8      	ldr	r0, [r7, #8]
 80012fc:	f7ff f8be 	bl	800047c <__aeabi_i2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4640      	mov	r0, r8
 8001306:	4649      	mov	r1, r9
 8001308:	f7ff f922 	bl	8000550 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7fe ff66 	bl	80001e4 <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <agv_kinematic_Sy+0x220>)
 8001326:	f7ff f913 	bl	8000550 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return sx;
 8001332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001336:	ec43 2b17 	vmov	d7, r2, r3
}
 800133a:	eeb0 0a47 	vmov.f32	s0, s14
 800133e:	eef0 0a67 	vmov.f32	s1, s15
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	54442d18 	.word	0x54442d18
 8001354:	400921fb 	.word	0x400921fb
 8001358:	00000000 	.word	0x00000000
 800135c:	4060e000 	.word	0x4060e000
 8001360:	00000000 	.word	0x00000000
 8001364:	406c2000 	.word	0x406c2000
 8001368:	00000000 	.word	0x00000000
 800136c:	4073b000 	.word	0x4073b000
 8001370:	40468000 	.word	0x40468000
 8001374:	40668000 	.word	0x40668000
 8001378:	3fe00000 	.word	0x3fe00000

0800137c <agv_kinematic_St>:
double agv_kinematic_St(int pos_A, int pos_B, int pos_C, int pos_D, double yaw){
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6178      	str	r0, [r7, #20]
 8001384:	6139      	str	r1, [r7, #16]
 8001386:	60fa      	str	r2, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	ed87 0b00 	vstr	d0, [r7]
	double st = (((pos_A)/R_AMR)+((pos_B)/R_AMR)+((pos_C)/R_AMR)+((pos_D)/R_AMR))*0.5;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <agv_kinematic_St+0x88>)
 8001392:	fb82 1203 	smull	r1, r2, r2, r3
 8001396:	441a      	add	r2, r3
 8001398:	1112      	asrs	r2, r2, #4
 800139a:	17db      	asrs	r3, r3, #31
 800139c:	1ad2      	subs	r2, r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4918      	ldr	r1, [pc, #96]	; (8001404 <agv_kinematic_St+0x88>)
 80013a2:	fb81 0103 	smull	r0, r1, r1, r3
 80013a6:	4419      	add	r1, r3
 80013a8:	1109      	asrs	r1, r1, #4
 80013aa:	17db      	asrs	r3, r3, #31
 80013ac:	1acb      	subs	r3, r1, r3
 80013ae:	441a      	add	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4914      	ldr	r1, [pc, #80]	; (8001404 <agv_kinematic_St+0x88>)
 80013b4:	fb81 0103 	smull	r0, r1, r1, r3
 80013b8:	4419      	add	r1, r3
 80013ba:	1109      	asrs	r1, r1, #4
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	441a      	add	r2, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	490f      	ldr	r1, [pc, #60]	; (8001404 <agv_kinematic_St+0x88>)
 80013c6:	fb81 0103 	smull	r0, r1, r1, r3
 80013ca:	4419      	add	r1, r3
 80013cc:	1109      	asrs	r1, r1, #4
 80013ce:	17db      	asrs	r3, r3, #31
 80013d0:	1acb      	subs	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f851 	bl	800047c <__aeabi_i2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <agv_kinematic_St+0x8c>)
 80013e0:	f7ff f8b6 	bl	8000550 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return st;
 80013ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	b21642c9 	.word	0xb21642c9
 8001408:	3fe00000 	.word	0x3fe00000

0800140c <PIDController_Init>:
 */


#include "PID_Driver.h"

void PIDController_Init(PIDController *pid) {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_TIM_IC_CaptureCallback>:
int tdata = 0;
uint8_t is_started = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a76      	ldr	r2, [pc, #472]	; (8001630 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_TIM_IC_CaptureCallback+0x3a>
		encoder_A.counter  	= __HAL_TIM_GET_COUNTER(htim);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	4a74      	ldr	r2, [pc, #464]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001462:	6093      	str	r3, [r2, #8]
		encoder_A.counts 		= (int16_t)encoder_A.counter;
 8001464:	4b73      	ldr	r3, [pc, #460]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800146c:	819a      	strh	r2, [r3, #12]
		encoder_A.position	= encoder_A.counts/4;
 800146e:	4b71      	ldr	r3, [pc, #452]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001470:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da00      	bge.n	800147a <HAL_TIM_IC_CaptureCallback+0x32>
 8001478:	3303      	adds	r3, #3
 800147a:	109b      	asrs	r3, r3, #2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8001480:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM2){
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148a:	d113      	bne.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x6c>
		encoder_B.counter  	= __HAL_TIM_GET_COUNTER(htim);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	4a69      	ldr	r2, [pc, #420]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8001494:	6093      	str	r3, [r2, #8]
		encoder_B.counts 		= (int16_t)encoder_B.counter;
 8001496:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800149e:	819a      	strh	r2, [r3, #12]
		encoder_B.position	= encoder_B.counts/4;
 80014a0:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80014a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da00      	bge.n	80014ac <HAL_TIM_IC_CaptureCallback+0x64>
 80014aa:	3303      	adds	r3, #3
 80014ac:	109b      	asrs	r3, r3, #2
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	4b61      	ldr	r3, [pc, #388]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80014b2:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM4){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a60      	ldr	r2, [pc, #384]	; (800163c <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_IC_CaptureCallback+0x9e>
		encoder_C.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80014c6:	6093      	str	r3, [r2, #8]
		encoder_C.counts 		= (int16_t)encoder_C.counter;
 80014c8:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80014d0:	819a      	strh	r2, [r3, #12]
		encoder_C.position	= encoder_C.counts/4;
 80014d2:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80014d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da00      	bge.n	80014de <HAL_TIM_IC_CaptureCallback+0x96>
 80014dc:	3303      	adds	r3, #3
 80014de:	109b      	asrs	r3, r3, #2
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80014e4:	81da      	strh	r2, [r3, #14]
	}
	if(htim->Instance  == TIM5){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a56      	ldr	r2, [pc, #344]	; (8001644 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d113      	bne.n	8001518 <HAL_TIM_IC_CaptureCallback+0xd0>
		encoder_D.counter  	= __HAL_TIM_GET_COUNTER(htim);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 80014f8:	6093      	str	r3, [r2, #8]
		encoder_D.counts 		= (int16_t)encoder_D.counter;
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001502:	819a      	strh	r2, [r3, #12]
		encoder_D.position	= encoder_D.counts/4;
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001506:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	da00      	bge.n	8001510 <HAL_TIM_IC_CaptureCallback+0xc8>
 800150e:	3303      	adds	r3, #3
 8001510:	109b      	asrs	r3, r3, #2
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001516:	81da      	strh	r2, [r3, #14]
	}
//	kinematic.S1 = abs(encoder_A.position);
//	kinematic.S2 = abs(encoder_B.position);
//	kinematic.S3 = abs(encoder_C.position);
//	kinematic.S4 = abs(encoder_D.position);
	kinematic.S1 = -encoder_A.position;
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800151a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800151e:	425b      	negs	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffab 	bl	800047c <__aeabi_i2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4948      	ldr	r1, [pc, #288]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 800152c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	kinematic.S2 = -encoder_B.position;
 8001530:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8001532:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001536:	425b      	negs	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff9f 	bl	800047c <__aeabi_i2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4942      	ldr	r1, [pc, #264]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 8001544:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	kinematic.S3 = -encoder_C.position;
 8001548:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800154a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800154e:	425b      	negs	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff93 	bl	800047c <__aeabi_i2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	493c      	ldr	r1, [pc, #240]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 800155c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	kinematic.S4 = -encoder_D.position;
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001562:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001566:	425b      	negs	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff87 	bl	800047c <__aeabi_i2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4936      	ldr	r1, [pc, #216]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 8001574:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	kinematic.Sx = agv_kinematic_Sx(-encoder_A.position,-encoder_B.position,-encoder_C.position,-encoder_D.position, 0);
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800157a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800157e:	4258      	negs	r0, r3
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8001582:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001586:	4259      	negs	r1, r3
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800158a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800158e:	425a      	negs	r2, r3
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001592:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001596:	425b      	negs	r3, r3
 8001598:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001628 <HAL_TIM_IC_CaptureCallback+0x1e0>
 800159c:	f7ff fcbc 	bl	8000f18 <agv_kinematic_Sx>
 80015a0:	eeb0 7a40 	vmov.f32	s14, s0
 80015a4:	eef0 7a60 	vmov.f32	s15, s1
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 80015aa:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	kinematic.Sy = agv_kinematic_Sy(-encoder_A.position,-encoder_B.position,-encoder_C.position,-encoder_D.position, 0);
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80015b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015b4:	4258      	negs	r0, r3
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80015b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015bc:	4259      	negs	r1, r3
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80015c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c4:	425a      	negs	r2, r3
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 80015c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015cc:	425b      	negs	r3, r3
 80015ce:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001628 <HAL_TIM_IC_CaptureCallback+0x1e0>
 80015d2:	f7ff fdc1 	bl	8001158 <agv_kinematic_Sy>
 80015d6:	eeb0 7a40 	vmov.f32	s14, s0
 80015da:	eef0 7a60 	vmov.f32	s15, s1
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 80015e0:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	kinematic.St = agv_kinematic_St(-encoder_A.position,-encoder_B.position,-encoder_C.position,-encoder_D.position, 0);
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80015e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015ea:	4258      	negs	r0, r3
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80015ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015f2:	4259      	negs	r1, r3
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80015f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015fa:	425a      	negs	r2, r3
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x200>)
 80015fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001602:	425b      	negs	r3, r3
 8001604:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001628 <HAL_TIM_IC_CaptureCallback+0x1e0>
 8001608:	f7ff feb8 	bl	800137c <agv_kinematic_St>
 800160c:	eeb0 7a40 	vmov.f32	s14, s0
 8001610:	eef0 7a60 	vmov.f32	s15, s1
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_TIM_IC_CaptureCallback+0x204>)
 8001616:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
	...
 8001630:	40010000 	.word	0x40010000
 8001634:	20000538 	.word	0x20000538
 8001638:	20000550 	.word	0x20000550
 800163c:	40000800 	.word	0x40000800
 8001640:	20000568 	.word	0x20000568
 8001644:	40000c00 	.word	0x40000c00
 8001648:	20000580 	.word	0x20000580
 800164c:	200002d0 	.word	0x200002d0

08001650 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if(huart == &huart6){

		// Callback Receive data from STM32 Control
		//rx_ctrl_feedback(&feedback_control);
	}
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b0b9      	sub	sp, #228	; 0xe4
 8001668:	af38      	add	r7, sp, #224	; 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166a:	f001 fa19 	bl	8002aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 fa3f 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 fdc5 	bl	8002200 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001676:	f000 faa3 	bl	8001bc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800167a:	f000 faf9 	bl	8001c70 <MX_TIM2_Init>
  MX_TIM3_Init();
 800167e:	f000 fb4b 	bl	8001d18 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001682:	f000 fbe1 	bl	8001e48 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001686:	f000 fc33 	bl	8001ef0 <MX_TIM5_Init>
  MX_TIM9_Init();
 800168a:	f000 fc85 	bl	8001f98 <MX_TIM9_Init>
  MX_TIM10_Init();
 800168e:	f000 fcf1 	bl	8002074 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001692:	f000 fd3d 	bl	8002110 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8001696:	f000 fd89 	bl	80021ac <MX_USART6_UART_Init>
//  motor_A.channel_L = 4;
//  motor_A.EN_PORT_R = ENR_A_GPIO_Port;
//  motor_A.EN_PORT_L = ENL_A_GPIO_Port;
//  motor_A.EN_PIN_R = ENR_A_Pin;
//  motor_A.EN_PIN_L = ENL_A_Pin;
  motor_A.tim_R = &htim9;
 800169a:	4b9a      	ldr	r3, [pc, #616]	; (8001904 <main+0x2a0>)
 800169c:	4a9a      	ldr	r2, [pc, #616]	; (8001908 <main+0x2a4>)
 800169e:	601a      	str	r2, [r3, #0]
  motor_A.tim_L = &htim9;
 80016a0:	4b98      	ldr	r3, [pc, #608]	; (8001904 <main+0x2a0>)
 80016a2:	4a99      	ldr	r2, [pc, #612]	; (8001908 <main+0x2a4>)
 80016a4:	605a      	str	r2, [r3, #4]
  motor_A.tim_number_R = TIM9;
 80016a6:	4b97      	ldr	r3, [pc, #604]	; (8001904 <main+0x2a0>)
 80016a8:	4a98      	ldr	r2, [pc, #608]	; (800190c <main+0x2a8>)
 80016aa:	609a      	str	r2, [r3, #8]
  motor_A.tim_number_L = TIM9;
 80016ac:	4b95      	ldr	r3, [pc, #596]	; (8001904 <main+0x2a0>)
 80016ae:	4a97      	ldr	r2, [pc, #604]	; (800190c <main+0x2a8>)
 80016b0:	60da      	str	r2, [r3, #12]
  motor_A.channel_R = 1;
 80016b2:	4b94      	ldr	r3, [pc, #592]	; (8001904 <main+0x2a0>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	741a      	strb	r2, [r3, #16]
  motor_A.channel_L = 2;
 80016b8:	4b92      	ldr	r3, [pc, #584]	; (8001904 <main+0x2a0>)
 80016ba:	2202      	movs	r2, #2
 80016bc:	745a      	strb	r2, [r3, #17]
  motor_A.EN_PORT_R = ENR_C_GPIO_Port;
 80016be:	4b91      	ldr	r3, [pc, #580]	; (8001904 <main+0x2a0>)
 80016c0:	4a93      	ldr	r2, [pc, #588]	; (8001910 <main+0x2ac>)
 80016c2:	619a      	str	r2, [r3, #24]
  motor_A.EN_PORT_L = ENL_C_GPIO_Port;
 80016c4:	4b8f      	ldr	r3, [pc, #572]	; (8001904 <main+0x2a0>)
 80016c6:	4a92      	ldr	r2, [pc, #584]	; (8001910 <main+0x2ac>)
 80016c8:	61da      	str	r2, [r3, #28]
  motor_A.EN_PIN_R = ENR_C_Pin;
 80016ca:	4b8e      	ldr	r3, [pc, #568]	; (8001904 <main+0x2a0>)
 80016cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d0:	841a      	strh	r2, [r3, #32]
  motor_A.EN_PIN_L = ENL_C_Pin;
 80016d2:	4b8c      	ldr	r3, [pc, #560]	; (8001904 <main+0x2a0>)
 80016d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d8:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor B'
  motor_B.tim_R = &htim3;
 80016da:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <main+0x2b0>)
 80016dc:	4a8e      	ldr	r2, [pc, #568]	; (8001918 <main+0x2b4>)
 80016de:	601a      	str	r2, [r3, #0]
  motor_B.tim_L = &htim3;
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <main+0x2b0>)
 80016e2:	4a8d      	ldr	r2, [pc, #564]	; (8001918 <main+0x2b4>)
 80016e4:	605a      	str	r2, [r3, #4]
  motor_B.tim_number_R = TIM3;
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <main+0x2b0>)
 80016e8:	4a8c      	ldr	r2, [pc, #560]	; (800191c <main+0x2b8>)
 80016ea:	609a      	str	r2, [r3, #8]
  motor_B.tim_number_L = TIM3;
 80016ec:	4b89      	ldr	r3, [pc, #548]	; (8001914 <main+0x2b0>)
 80016ee:	4a8b      	ldr	r2, [pc, #556]	; (800191c <main+0x2b8>)
 80016f0:	60da      	str	r2, [r3, #12]
  motor_B.channel_R = 1;
 80016f2:	4b88      	ldr	r3, [pc, #544]	; (8001914 <main+0x2b0>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	741a      	strb	r2, [r3, #16]
  motor_B.channel_L = 2;
 80016f8:	4b86      	ldr	r3, [pc, #536]	; (8001914 <main+0x2b0>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	745a      	strb	r2, [r3, #17]
  motor_B.EN_PORT_R = ENR_B_GPIO_Port;
 80016fe:	4b85      	ldr	r3, [pc, #532]	; (8001914 <main+0x2b0>)
 8001700:	4a83      	ldr	r2, [pc, #524]	; (8001910 <main+0x2ac>)
 8001702:	619a      	str	r2, [r3, #24]
  motor_B.EN_PORT_L = ENL_B_GPIO_Port;
 8001704:	4b83      	ldr	r3, [pc, #524]	; (8001914 <main+0x2b0>)
 8001706:	4a82      	ldr	r2, [pc, #520]	; (8001910 <main+0x2ac>)
 8001708:	61da      	str	r2, [r3, #28]
  motor_B.EN_PIN_R = ENR_B_Pin;
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <main+0x2b0>)
 800170c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001710:	841a      	strh	r2, [r3, #32]
  motor_B.EN_PIN_L = ENL_B_Pin;
 8001712:	4b80      	ldr	r3, [pc, #512]	; (8001914 <main+0x2b0>)
 8001714:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001718:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor C'
  motor_C.tim_R = &htim3;
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <main+0x2bc>)
 800171c:	4a7e      	ldr	r2, [pc, #504]	; (8001918 <main+0x2b4>)
 800171e:	601a      	str	r2, [r3, #0]
  motor_C.tim_L = &htim3;
 8001720:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <main+0x2bc>)
 8001722:	4a7d      	ldr	r2, [pc, #500]	; (8001918 <main+0x2b4>)
 8001724:	605a      	str	r2, [r3, #4]
  motor_C.tim_number_R = TIM3;
 8001726:	4b7e      	ldr	r3, [pc, #504]	; (8001920 <main+0x2bc>)
 8001728:	4a7c      	ldr	r2, [pc, #496]	; (800191c <main+0x2b8>)
 800172a:	609a      	str	r2, [r3, #8]
  motor_C.tim_number_L = TIM3;
 800172c:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <main+0x2bc>)
 800172e:	4a7b      	ldr	r2, [pc, #492]	; (800191c <main+0x2b8>)
 8001730:	60da      	str	r2, [r3, #12]
  motor_C.channel_R = 3;
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <main+0x2bc>)
 8001734:	2203      	movs	r2, #3
 8001736:	741a      	strb	r2, [r3, #16]
  motor_C.channel_L = 4;
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <main+0x2bc>)
 800173a:	2204      	movs	r2, #4
 800173c:	745a      	strb	r2, [r3, #17]
  motor_C.EN_PORT_R = ENR_A_GPIO_Port;
 800173e:	4b78      	ldr	r3, [pc, #480]	; (8001920 <main+0x2bc>)
 8001740:	4a73      	ldr	r2, [pc, #460]	; (8001910 <main+0x2ac>)
 8001742:	619a      	str	r2, [r3, #24]
  motor_C.EN_PORT_L = ENL_A_GPIO_Port;
 8001744:	4b76      	ldr	r3, [pc, #472]	; (8001920 <main+0x2bc>)
 8001746:	4a72      	ldr	r2, [pc, #456]	; (8001910 <main+0x2ac>)
 8001748:	61da      	str	r2, [r3, #28]
  motor_C.EN_PIN_R = ENR_A_Pin;
 800174a:	4b75      	ldr	r3, [pc, #468]	; (8001920 <main+0x2bc>)
 800174c:	2204      	movs	r2, #4
 800174e:	841a      	strh	r2, [r3, #32]
  motor_C.EN_PIN_L = ENL_A_Pin;
 8001750:	4b73      	ldr	r3, [pc, #460]	; (8001920 <main+0x2bc>)
 8001752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001756:	845a      	strh	r2, [r3, #34]	; 0x22

  // Configuration 'Motor D'
  motor_D.tim_R = &htim10;
 8001758:	4b72      	ldr	r3, [pc, #456]	; (8001924 <main+0x2c0>)
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <main+0x2c4>)
 800175c:	601a      	str	r2, [r3, #0]
  motor_D.tim_L = &htim11;
 800175e:	4b71      	ldr	r3, [pc, #452]	; (8001924 <main+0x2c0>)
 8001760:	4a72      	ldr	r2, [pc, #456]	; (800192c <main+0x2c8>)
 8001762:	605a      	str	r2, [r3, #4]
  motor_D.tim_number_R = TIM10;
 8001764:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <main+0x2c0>)
 8001766:	4a72      	ldr	r2, [pc, #456]	; (8001930 <main+0x2cc>)
 8001768:	609a      	str	r2, [r3, #8]
  motor_D.tim_number_L = TIM11;
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <main+0x2c0>)
 800176c:	4a71      	ldr	r2, [pc, #452]	; (8001934 <main+0x2d0>)
 800176e:	60da      	str	r2, [r3, #12]
  motor_D.channel_R = 1;
 8001770:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <main+0x2c0>)
 8001772:	2201      	movs	r2, #1
 8001774:	741a      	strb	r2, [r3, #16]
  motor_D.channel_L = 1;
 8001776:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <main+0x2c0>)
 8001778:	2201      	movs	r2, #1
 800177a:	745a      	strb	r2, [r3, #17]
  motor_D.EN_PORT_R = ENR_D_GPIO_Port;
 800177c:	4b69      	ldr	r3, [pc, #420]	; (8001924 <main+0x2c0>)
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <main+0x2d4>)
 8001780:	619a      	str	r2, [r3, #24]
  motor_D.EN_PORT_L = ENL_D_GPIO_Port;
 8001782:	4b68      	ldr	r3, [pc, #416]	; (8001924 <main+0x2c0>)
 8001784:	4a6c      	ldr	r2, [pc, #432]	; (8001938 <main+0x2d4>)
 8001786:	61da      	str	r2, [r3, #28]
  motor_D.EN_PIN_R = ENR_D_Pin;
 8001788:	4b66      	ldr	r3, [pc, #408]	; (8001924 <main+0x2c0>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	841a      	strh	r2, [r3, #32]
  motor_D.EN_PIN_L = ENL_D_Pin;
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <main+0x2c0>)
 8001792:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001796:	845a      	strh	r2, [r3, #34]	; 0x22

  //+++++++++++++++++++++++++++++++++ ENCODER INITIALIZATION ++++++++++++++++++++++++++++++//
  agv_encoder_start(encoder_A, &htim1, TIM1);
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <main+0x2d8>)
 800179a:	4a69      	ldr	r2, [pc, #420]	; (8001940 <main+0x2dc>)
 800179c:	9203      	str	r2, [sp, #12]
 800179e:	4a69      	ldr	r2, [pc, #420]	; (8001944 <main+0x2e0>)
 80017a0:	9202      	str	r2, [sp, #8]
 80017a2:	466c      	mov	r4, sp
 80017a4:	f103 0210 	add.w	r2, r3, #16
 80017a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80017b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b2:	f7ff fb99 	bl	8000ee8 <agv_encoder_start>
  agv_encoder_start(encoder_B, &htim2, TIM2);
 80017b6:	4b64      	ldr	r3, [pc, #400]	; (8001948 <main+0x2e4>)
 80017b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017bc:	9203      	str	r2, [sp, #12]
 80017be:	4a63      	ldr	r2, [pc, #396]	; (800194c <main+0x2e8>)
 80017c0:	9202      	str	r2, [sp, #8]
 80017c2:	466c      	mov	r4, sp
 80017c4:	f103 0210 	add.w	r2, r3, #16
 80017c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80017d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d2:	f7ff fb89 	bl	8000ee8 <agv_encoder_start>
  agv_encoder_start(encoder_C, &htim4, TIM4);
 80017d6:	4b5e      	ldr	r3, [pc, #376]	; (8001950 <main+0x2ec>)
 80017d8:	4a5e      	ldr	r2, [pc, #376]	; (8001954 <main+0x2f0>)
 80017da:	9203      	str	r2, [sp, #12]
 80017dc:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <main+0x2f4>)
 80017de:	9202      	str	r2, [sp, #8]
 80017e0:	466c      	mov	r4, sp
 80017e2:	f103 0210 	add.w	r2, r3, #16
 80017e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80017ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f0:	f7ff fb7a 	bl	8000ee8 <agv_encoder_start>
  agv_encoder_start(encoder_D, &htim5, TIM5);
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <main+0x2f8>)
 80017f6:	4a5a      	ldr	r2, [pc, #360]	; (8001960 <main+0x2fc>)
 80017f8:	9203      	str	r2, [sp, #12]
 80017fa:	4a5a      	ldr	r2, [pc, #360]	; (8001964 <main+0x300>)
 80017fc:	9202      	str	r2, [sp, #8]
 80017fe:	466c      	mov	r4, sp
 8001800:	f103 0210 	add.w	r2, r3, #16
 8001804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001808:	e884 0003 	stmia.w	r4, {r0, r1}
 800180c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180e:	f7ff fb6b 	bl	8000ee8 <agv_encoder_start>

  //+++++++++++++++++++++++++++++++++ ENCODER TO MOTOR ++++++++++++++++++++++++++++++++++++//
  motor_A.ENC = encoder_A;
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <main+0x2a0>)
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <main+0x2d8>)
 8001816:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800181a:	4615      	mov	r5, r2
 800181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001824:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_B.ENC = encoder_B;
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <main+0x2b0>)
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <main+0x2e4>)
 800182c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001830:	4615      	mov	r5, r2
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	e895 0003 	ldmia.w	r5, {r0, r1}
 800183a:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_C.ENC = encoder_C;
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <main+0x2bc>)
 8001840:	4a43      	ldr	r2, [pc, #268]	; (8001950 <main+0x2ec>)
 8001842:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001846:	4615      	mov	r5, r2
 8001848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001850:	e884 0003 	stmia.w	r4, {r0, r1}
  motor_D.ENC = encoder_D;
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <main+0x2c0>)
 8001856:	4a41      	ldr	r2, [pc, #260]	; (800195c <main+0x2f8>)
 8001858:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800185c:	4615      	mov	r5, r2
 800185e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001862:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001866:	e884 0003 	stmia.w	r4, {r0, r1}

  //+++++++++++++++++++++++++++++++++ AKTUATOR INTIALIZATION ++++++++++++++++++++++++++++++//
  aktuator.PORT_IN1 = GPIOB;
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <main+0x304>)
 800186c:	4a28      	ldr	r2, [pc, #160]	; (8001910 <main+0x2ac>)
 800186e:	601a      	str	r2, [r3, #0]
  aktuator.PIN_IN1 = GPIO_PIN_5;
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <main+0x304>)
 8001872:	2220      	movs	r2, #32
 8001874:	821a      	strh	r2, [r3, #16]
  aktuator.PORT_IN2 = GPIOC;
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <main+0x304>)
 8001878:	4a3c      	ldr	r2, [pc, #240]	; (800196c <main+0x308>)
 800187a:	605a      	str	r2, [r3, #4]
  aktuator.PIN_IN2 = GPIO_PIN_13;
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <main+0x304>)
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	825a      	strh	r2, [r3, #18]
  aktuator.PORT_IN3 = GPIOC;
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <main+0x304>)
 8001886:	4a39      	ldr	r2, [pc, #228]	; (800196c <main+0x308>)
 8001888:	609a      	str	r2, [r3, #8]
  aktuator.PIN_IN3 = GPIO_PIN_14;
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <main+0x304>)
 800188c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001890:	829a      	strh	r2, [r3, #20]
  aktuator.PORT_IN4 = GPIOC;
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <main+0x304>)
 8001894:	4a35      	ldr	r2, [pc, #212]	; (800196c <main+0x308>)
 8001896:	60da      	str	r2, [r3, #12]
  aktuator.PIN_IN4 = GPIO_PIN_15 ;
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <main+0x304>)
 800189a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800189e:	82da      	strh	r2, [r3, #22]
//  komunikasi_init(&huart6);
//  rx_start_get();

  //+++++++++++++++++++++++++++++++++ PID INITIALIZATION ++++++++++++++++++++++++++++++//
    // Y Axis
    pid_vy.Kp = 15;				pid_vy.Ki = 3;				pid_vy.Kd = -0.001;
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <main+0x30c>)
 80018a2:	4a34      	ldr	r2, [pc, #208]	; (8001974 <main+0x310>)
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <main+0x30c>)
 80018a8:	4a33      	ldr	r2, [pc, #204]	; (8001978 <main+0x314>)
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <main+0x30c>)
 80018ae:	4a33      	ldr	r2, [pc, #204]	; (800197c <main+0x318>)
 80018b0:	609a      	str	r2, [r3, #8]
    pid_vy.limMax = 2000; 		pid_vy.limMin = -2000; 		pid_vy.limMaxInt = 5; 	pid_vy.limMinInt = -5;
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <main+0x30c>)
 80018b4:	4a32      	ldr	r2, [pc, #200]	; (8001980 <main+0x31c>)
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <main+0x30c>)
 80018ba:	4a32      	ldr	r2, [pc, #200]	; (8001984 <main+0x320>)
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <main+0x30c>)
 80018c0:	4a31      	ldr	r2, [pc, #196]	; (8001988 <main+0x324>)
 80018c2:	61da      	str	r2, [r3, #28]
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <main+0x30c>)
 80018c6:	4a31      	ldr	r2, [pc, #196]	; (800198c <main+0x328>)
 80018c8:	619a      	str	r2, [r3, #24]
    pid_vy.T_sample = 0.01;
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <main+0x30c>)
 80018cc:	4a30      	ldr	r2, [pc, #192]	; (8001990 <main+0x32c>)
 80018ce:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vy);
 80018d0:	4827      	ldr	r0, [pc, #156]	; (8001970 <main+0x30c>)
 80018d2:	f7ff fd9b 	bl	800140c <PIDController_Init>

    // X Axis
    pid_vx.Kp = 15;				pid_vx.Ki = 3;				pid_vx.Kd = -0.001;
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <main+0x330>)
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <main+0x310>)
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <main+0x330>)
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <main+0x314>)
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <main+0x330>)
 80018e4:	4a25      	ldr	r2, [pc, #148]	; (800197c <main+0x318>)
 80018e6:	609a      	str	r2, [r3, #8]
    pid_vx.limMax = 2000; 		pid_vx.limMin = -2000; 		pid_vx.limMaxInt = 5; 	pid_vx.limMinInt = -5;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <main+0x330>)
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <main+0x31c>)
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <main+0x330>)
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <main+0x320>)
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <main+0x330>)
 80018f6:	4a24      	ldr	r2, [pc, #144]	; (8001988 <main+0x324>)
 80018f8:	61da      	str	r2, [r3, #28]
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <main+0x330>)
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <main+0x328>)
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	e04a      	b.n	8001998 <main+0x334>
 8001902:	bf00      	nop
 8001904:	20000448 	.word	0x20000448
 8001908:	20000194 	.word	0x20000194
 800190c:	40014000 	.word	0x40014000
 8001910:	40020400 	.word	0x40020400
 8001914:	20000484 	.word	0x20000484
 8001918:	200000bc 	.word	0x200000bc
 800191c:	40000400 	.word	0x40000400
 8001920:	200004c0 	.word	0x200004c0
 8001924:	200004fc 	.word	0x200004fc
 8001928:	200001dc 	.word	0x200001dc
 800192c:	20000224 	.word	0x20000224
 8001930:	40014400 	.word	0x40014400
 8001934:	40014800 	.word	0x40014800
 8001938:	40020000 	.word	0x40020000
 800193c:	20000538 	.word	0x20000538
 8001940:	40010000 	.word	0x40010000
 8001944:	2000002c 	.word	0x2000002c
 8001948:	20000550 	.word	0x20000550
 800194c:	20000074 	.word	0x20000074
 8001950:	20000568 	.word	0x20000568
 8001954:	40000800 	.word	0x40000800
 8001958:	20000104 	.word	0x20000104
 800195c:	20000580 	.word	0x20000580
 8001960:	40000c00 	.word	0x40000c00
 8001964:	2000014c 	.word	0x2000014c
 8001968:	200002b4 	.word	0x200002b4
 800196c:	40020800 	.word	0x40020800
 8001970:	20000368 	.word	0x20000368
 8001974:	41700000 	.word	0x41700000
 8001978:	40400000 	.word	0x40400000
 800197c:	ba83126f 	.word	0xba83126f
 8001980:	44fa0000 	.word	0x44fa0000
 8001984:	c4fa0000 	.word	0xc4fa0000
 8001988:	40a00000 	.word	0x40a00000
 800198c:	c0a00000 	.word	0xc0a00000
 8001990:	3c23d70a 	.word	0x3c23d70a
 8001994:	200003a0 	.word	0x200003a0
    pid_vx.T_sample = 0.01;
 8001998:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <main+0x440>)
 800199a:	4a43      	ldr	r2, [pc, #268]	; (8001aa8 <main+0x444>)
 800199c:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vx);
 800199e:	4841      	ldr	r0, [pc, #260]	; (8001aa4 <main+0x440>)
 80019a0:	f7ff fd34 	bl	800140c <PIDController_Init>

    // T Axis
    pid_vt.Kp = 15;				pid_vt.Ki = 3;				pid_vt.Kd = -0.001;
 80019a4:	4b41      	ldr	r3, [pc, #260]	; (8001aac <main+0x448>)
 80019a6:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <main+0x44c>)
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <main+0x448>)
 80019ac:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <main+0x450>)
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <main+0x448>)
 80019b2:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <main+0x454>)
 80019b4:	609a      	str	r2, [r3, #8]
    pid_vt.limMax = 2000; 		pid_vt.limMin = -2000; 		pid_vt.limMaxInt = 5; 	pid_vt.limMinInt = -5;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <main+0x448>)
 80019b8:	4a40      	ldr	r2, [pc, #256]	; (8001abc <main+0x458>)
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <main+0x448>)
 80019be:	4a40      	ldr	r2, [pc, #256]	; (8001ac0 <main+0x45c>)
 80019c0:	611a      	str	r2, [r3, #16]
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <main+0x448>)
 80019c4:	4a3f      	ldr	r2, [pc, #252]	; (8001ac4 <main+0x460>)
 80019c6:	61da      	str	r2, [r3, #28]
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <main+0x448>)
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <main+0x464>)
 80019cc:	619a      	str	r2, [r3, #24]
    pid_vt.T_sample = 0.01;
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <main+0x448>)
 80019d0:	4a35      	ldr	r2, [pc, #212]	; (8001aa8 <main+0x444>)
 80019d2:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_vt);
 80019d4:	4835      	ldr	r0, [pc, #212]	; (8001aac <main+0x448>)
 80019d6:	f7ff fd19 	bl	800140c <PIDController_Init>

    // Yaw Direction
    pid_yaw.Kp = 1;			pid_yaw.Ki = 1;				pid_yaw.Kd = -0.0006;
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <main+0x468>)
 80019dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <main+0x468>)
 80019e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <main+0x468>)
 80019ec:	4a38      	ldr	r2, [pc, #224]	; (8001ad0 <main+0x46c>)
 80019ee:	609a      	str	r2, [r3, #8]
    pid_yaw.limMax = 180; 	pid_yaw.limMin = -180; 		pid_yaw.limMaxInt = 5; 	pid_yaw.limMinInt = -5;
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <main+0x468>)
 80019f2:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <main+0x470>)
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <main+0x468>)
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <main+0x474>)
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <main+0x468>)
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <main+0x460>)
 8001a00:	61da      	str	r2, [r3, #28]
 8001a02:	4b32      	ldr	r3, [pc, #200]	; (8001acc <main+0x468>)
 8001a04:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <main+0x464>)
 8001a06:	619a      	str	r2, [r3, #24]
    pid_yaw.T_sample = 0.01;
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <main+0x468>)
 8001a0a:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <main+0x444>)
 8001a0c:	621a      	str	r2, [r3, #32]
    PIDController_Init(&pid_yaw);
 8001a0e:	482f      	ldr	r0, [pc, #188]	; (8001acc <main+0x468>)
 8001a10:	f7ff fcfc 	bl	800140c <PIDController_Init>

    // STOP ALL Motor
	agv_stop_all(motor_A, motor_B, motor_C, motor_D);
 8001a14:	4e31      	ldr	r6, [pc, #196]	; (8001adc <main+0x478>)
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <main+0x47c>)
 8001a18:	ac29      	add	r4, sp, #164	; 0xa4
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <main+0x480>)
 8001a32:	ac1a      	add	r4, sp, #104	; 0x68
 8001a34:	461d      	mov	r5, r3
 8001a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <main+0x484>)
 8001a4c:	ac0b      	add	r4, sp, #44	; 0x2c
 8001a4e:	461d      	mov	r5, r3
 8001a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a64:	466d      	mov	r5, sp
 8001a66:	f106 0410 	add.w	r4, r6, #16
 8001a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a7a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a7e:	f7ff f9e5 	bl	8000e4c <agv_stop_all>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  aktuator_up(aktuator);
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <main+0x488>)
 8001a84:	466c      	mov	r4, sp
 8001a86:	f103 0210 	add.w	r2, r3, #16
 8001a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	f7ff f99c 	bl	8000dd0 <aktuator_up>
	  HAL_Delay(3000);
 8001a98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a9c:	f001 f872 	bl	8002b84 <HAL_Delay>
	  aktuator_up(aktuator);
 8001aa0:	e7ef      	b.n	8001a82 <main+0x41e>
 8001aa2:	bf00      	nop
 8001aa4:	200003a0 	.word	0x200003a0
 8001aa8:	3c23d70a 	.word	0x3c23d70a
 8001aac:	200003d8 	.word	0x200003d8
 8001ab0:	41700000 	.word	0x41700000
 8001ab4:	40400000 	.word	0x40400000
 8001ab8:	ba83126f 	.word	0xba83126f
 8001abc:	44fa0000 	.word	0x44fa0000
 8001ac0:	c4fa0000 	.word	0xc4fa0000
 8001ac4:	40a00000 	.word	0x40a00000
 8001ac8:	c0a00000 	.word	0xc0a00000
 8001acc:	20000410 	.word	0x20000410
 8001ad0:	ba1d4952 	.word	0xba1d4952
 8001ad4:	43340000 	.word	0x43340000
 8001ad8:	c3340000 	.word	0xc3340000
 8001adc:	20000448 	.word	0x20000448
 8001ae0:	200004fc 	.word	0x200004fc
 8001ae4:	200004c0 	.word	0x200004c0
 8001ae8:	20000484 	.word	0x20000484
 8001aec:	200002b4 	.word	0x200002b4

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	; 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2230      	movs	r2, #48	; 0x30
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 ff0a 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <SystemClock_Config+0xc8>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <SystemClock_Config+0xc8>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <SystemClock_Config+0xc8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b54:	2310      	movs	r3, #16
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b60:	2308      	movs	r3, #8
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b64:	2364      	movs	r3, #100	; 0x64
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 0320 	add.w	r3, r7, #32
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fb6b 	bl	8003250 <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b80:	f000 fbcc 	bl	800231c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fdcd 	bl	8003740 <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bac:	f000 fbb6 	bl	800231c <Error_Handler>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3750      	adds	r7, #80	; 0x50
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fea2 	bl	8005918 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001bde:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <MX_TIM1_Init+0xac>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c10:	2301      	movs	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c20:	2301      	movs	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001c34:	f002 f80c 	bl	8003c50 <HAL_TIM_Encoder_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c3e:	f000 fb6d 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <MX_TIM1_Init+0xa8>)
 8001c50:	f002 fecc 	bl	80049ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c5a:	f000 fb5f 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3730      	adds	r7, #48	; 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000002c 	.word	0x2000002c
 8001c6c:	40010000 	.word	0x40010000

08001c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fe4a 	bl	8005918 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001ce0:	f001 ffb6 	bl	8003c50 <HAL_TIM_Encoder_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cea:	f000 fb17 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001cfc:	f002 fe76 	bl	80049ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d06:	f000 fb09 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3730      	adds	r7, #48	; 0x30
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000074 	.word	0x20000074

08001d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
 8001d44:	615a      	str	r2, [r3, #20]
 8001d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <MX_TIM3_Init+0x12c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d50:	2263      	movs	r2, #99	; 0x63
 8001d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6e:	4834      	ldr	r0, [pc, #208]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d70:	f001 fec6 	bl	8003b00 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d7a:	f000 facf 	bl	800231c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d8c:	f002 fa66 	bl	800425c <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d96:	f000 fac1 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d9a:	4829      	ldr	r0, [pc, #164]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001d9c:	f001 feff 	bl	8003b9e <HAL_TIM_PWM_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001da6:	f000 fab9 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	4619      	mov	r1, r3
 8001db8:	4821      	ldr	r0, [pc, #132]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001dba:	f002 fe17 	bl	80049ec <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001dc4:	f000 faaa 	bl	800231c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4818      	ldr	r0, [pc, #96]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001de0:	f002 f97a 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001dea:	f000 fa97 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2204      	movs	r2, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4812      	ldr	r0, [pc, #72]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001df6:	f002 f96f 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e00:	f000 fa8c 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2208      	movs	r2, #8
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001e0c:	f002 f964 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001e16:	f000 fa81 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001e22:	f002 f959 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001e2c:	f000 fa76 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <MX_TIM3_Init+0x128>)
 8001e32:	f000 fc27 	bl	8002684 <HAL_TIM_MspPostInit>

}
 8001e36:	bf00      	nop
 8001e38:	3738      	adds	r7, #56	; 0x38
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200000bc 	.word	0x200000bc
 8001e44:	40000400 	.word	0x40000400

08001e48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fd5e 	bl	8005918 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <MX_TIM4_Init+0xa4>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e92:	2301      	movs	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001eb6:	f001 fecb 	bl	8003c50 <HAL_TIM_Encoder_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ec0:	f000 fa2c 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_TIM4_Init+0xa0>)
 8001ed2:	f002 fd8b 	bl	80049ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001edc:	f000 fa1e 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000104 	.word	0x20000104
 8001eec:	40000800 	.word	0x40000800

08001ef0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fd0a 	bl	8005918 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <MX_TIM5_Init+0xa4>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f5e:	f001 fe77 	bl	8003c50 <HAL_TIM_Encoder_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f68:	f000 f9d8 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_TIM5_Init+0xa0>)
 8001f7a:	f002 fd37 	bl	80049ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f84:	f000 f9ca 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	; 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000014c 	.word	0x2000014c
 8001f94:	40000c00 	.word	0x40000c00

08001f98 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <MX_TIM9_Init+0xd8>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fc6:	2263      	movs	r2, #99	; 0x63
 8001fc8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8001fd0:	4b26      	ldr	r3, [pc, #152]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fd6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fe4:	4821      	ldr	r0, [pc, #132]	; (800206c <MX_TIM9_Init+0xd4>)
 8001fe6:	f001 fd8b 	bl	8003b00 <HAL_TIM_Base_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001ff0:	f000 f994 	bl	800231c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4619      	mov	r1, r3
 8002000:	481a      	ldr	r0, [pc, #104]	; (800206c <MX_TIM9_Init+0xd4>)
 8002002:	f002 f92b 	bl	800425c <HAL_TIM_ConfigClockSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800200c:	f000 f986 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <MX_TIM9_Init+0xd4>)
 8002012:	f001 fdc4 	bl	8003b9e <HAL_TIM_PWM_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800201c:	f000 f97e 	bl	800231c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002020:	2360      	movs	r3, #96	; 0x60
 8002022:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <MX_TIM9_Init+0xd4>)
 8002038:	f002 f84e 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002042:	f000 f96b 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2204      	movs	r2, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM9_Init+0xd4>)
 800204e:	f002 f843 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8002058:	f000 f960 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM9_Init+0xd4>)
 800205e:	f000 fb11 	bl	8002684 <HAL_TIM_MspPostInit>

}
 8002062:	bf00      	nop
 8002064:	3730      	adds	r7, #48	; 0x30
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000194 	.word	0x20000194
 8002070:	40014000 	.word	0x40014000

08002074 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
 8002088:	615a      	str	r2, [r3, #20]
 800208a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM10_Init+0x94>)
 800208e:	4a1f      	ldr	r2, [pc, #124]	; (800210c <MX_TIM10_Init+0x98>)
 8002090:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM10_Init+0x94>)
 8002094:	2263      	movs	r2, #99	; 0x63
 8002096:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM10_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM10_Init+0x94>)
 80020a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM10_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM10_Init+0x94>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_TIM10_Init+0x94>)
 80020b4:	f001 fd24 	bl	8003b00 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80020be:	f000 f92d 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_TIM10_Init+0x94>)
 80020c4:	f001 fd6b 	bl	8003b9e <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80020ce:	f000 f925 	bl	800231c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d2:	2360      	movs	r3, #96	; 0x60
 80020d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <MX_TIM10_Init+0x94>)
 80020ea:	f001 fff5 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80020f4:	f000 f912 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <MX_TIM10_Init+0x94>)
 80020fa:	f000 fac3 	bl	8002684 <HAL_TIM_MspPostInit>

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200001dc 	.word	0x200001dc
 800210c:	40014400 	.word	0x40014400

08002110 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
 8002124:	615a      	str	r2, [r3, #20]
 8002126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <MX_TIM11_Init+0x94>)
 800212a:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <MX_TIM11_Init+0x98>)
 800212c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002130:	2263      	movs	r2, #99	; 0x63
 8002132:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_TIM11_Init+0x94>)
 800213c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002140:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <MX_TIM11_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800214e:	4815      	ldr	r0, [pc, #84]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002150:	f001 fcd6 	bl	8003b00 <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800215a:	f000 f8df 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800215e:	4811      	ldr	r0, [pc, #68]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002160:	f001 fd1d 	bl	8003b9e <HAL_TIM_PWM_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800216a:	f000 f8d7 	bl	800231c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216e:	2360      	movs	r3, #96	; 0x60
 8002170:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002186:	f001 ffa7 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002190:	f000 f8c4 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM11_Init+0x94>)
 8002196:	f000 fa75 	bl	8002684 <HAL_TIM_MspPostInit>

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000224 	.word	0x20000224
 80021a8:	40014800 	.word	0x40014800

080021ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART6_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021e4:	f002 fc84 	bl	8004af0 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f000 f895 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000026c 	.word	0x2000026c
 80021fc:	40011400 	.word	0x40011400

08002200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b3c      	ldr	r3, [pc, #240]	; (800230c <MX_GPIO_Init+0x10c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a3b      	ldr	r2, [pc, #236]	; (800230c <MX_GPIO_Init+0x10c>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <MX_GPIO_Init+0x10c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <MX_GPIO_Init+0x10c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a34      	ldr	r2, [pc, #208]	; (800230c <MX_GPIO_Init+0x10c>)
 800223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <MX_GPIO_Init+0x10c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <MX_GPIO_Init+0x10c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <MX_GPIO_Init+0x10c>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <MX_GPIO_Init+0x10c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <MX_GPIO_Init+0x10c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a26      	ldr	r2, [pc, #152]	; (800230c <MX_GPIO_Init+0x10c>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <MX_GPIO_Init+0x10c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_UART_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800228c:	4820      	ldr	r0, [pc, #128]	; (8002310 <MX_GPIO_Init+0x110>)
 800228e:	f000 ffc5 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|ENR_D_Pin|ENL_D_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	f248 4110 	movw	r1, #33808	; 0x8410
 8002298:	481e      	ldr	r0, [pc, #120]	; (8002314 <MX_GPIO_Init+0x114>)
 800229a:	f000 ffbf 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 800229e:	2200      	movs	r2, #0
 80022a0:	f24f 4134 	movw	r1, #62516	; 0xf434
 80022a4:	481c      	ldr	r0, [pc, #112]	; (8002318 <MX_GPIO_Init+0x118>)
 80022a6:	f000 ffb9 	bl	800321c <HAL_GPIO_WritePin>
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UART_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = LED_UART_Pin|IN3_Pin|IN4_Pin;
 80022aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4813      	ldr	r0, [pc, #76]	; (8002310 <MX_GPIO_Init+0x110>)
 80022c4:	f000 fe26 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin ENR_D_Pin ENL_D_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|ENR_D_Pin|ENL_D_Pin;
 80022c8:	f248 4310 	movw	r3, #33808	; 0x8410
 80022cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <MX_GPIO_Init+0x114>)
 80022e2:	f000 fe17 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENR_A_Pin ENL_A_Pin ENR_B_Pin ENL_B_Pin
                           ENR_C_Pin ENL_C_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = ENR_A_Pin|ENL_A_Pin|ENR_B_Pin|ENL_B_Pin
 80022e6:	f24f 4334 	movw	r3, #62516	; 0xf434
 80022ea:	617b      	str	r3, [r7, #20]
                          |ENR_C_Pin|ENL_C_Pin|IN1_Pin|IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <MX_GPIO_Init+0x118>)
 8002300:	f000 fe08 	bl	8002f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	40020800 	.word	0x40020800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	e7fe      	b.n	8002324 <Error_Handler+0x8>
	...

08002328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <HAL_MspInit+0x4c>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_MspInit+0x4c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_MspInit+0x4c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_MspInit+0x4c>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_MspInit+0x4c>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	; 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a83      	ldr	r2, [pc, #524]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d135      	bne.n	8002406 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a81      	ldr	r2, [pc, #516]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023e4:	2301      	movs	r3, #1
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ec:	4619      	mov	r1, r3
 80023ee:	486f      	ldr	r0, [pc, #444]	; (80025ac <HAL_TIM_Encoder_MspInit+0x234>)
 80023f0:	f000 fd90 	bl	8002f14 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	201b      	movs	r0, #27
 80023fa:	f000 fcc2 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023fe:	201b      	movs	r0, #27
 8002400:	f000 fcdb 	bl	8002dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002404:	e0ca      	b.n	800259c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d152      	bne.n	80024b6 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a63      	ldr	r2, [pc, #396]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a5c      	ldr	r2, [pc, #368]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a55      	ldr	r2, [pc, #340]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002464:	2320      	movs	r3, #32
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002474:	2301      	movs	r3, #1
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247c:	4619      	mov	r1, r3
 800247e:	484b      	ldr	r0, [pc, #300]	; (80025ac <HAL_TIM_Encoder_MspInit+0x234>)
 8002480:	f000 fd48 	bl	8002f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002484:	2308      	movs	r3, #8
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002494:	2301      	movs	r3, #1
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249c:	4619      	mov	r1, r3
 800249e:	4844      	ldr	r0, [pc, #272]	; (80025b0 <HAL_TIM_Encoder_MspInit+0x238>)
 80024a0:	f000 fd38 	bl	8002f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2100      	movs	r1, #0
 80024a8:	201c      	movs	r0, #28
 80024aa:	f000 fc6a 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024ae:	201c      	movs	r0, #28
 80024b0:	f000 fc83 	bl	8002dba <HAL_NVIC_EnableIRQ>
}
 80024b4:	e072      	b.n	800259c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x23c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d134      	bne.n	800252a <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a37      	ldr	r2, [pc, #220]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	6313      	str	r3, [r2, #48]	; 0x30
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002508:	2302      	movs	r3, #2
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002510:	4619      	mov	r1, r3
 8002512:	4827      	ldr	r0, [pc, #156]	; (80025b0 <HAL_TIM_Encoder_MspInit+0x238>)
 8002514:	f000 fcfe 	bl	8002f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	201e      	movs	r0, #30
 800251e:	f000 fc30 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002522:	201e      	movs	r0, #30
 8002524:	f000 fc49 	bl	8002dba <HAL_NVIC_EnableIRQ>
}
 8002528:	e038      	b.n	800259c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <HAL_TIM_Encoder_MspInit+0x240>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d133      	bne.n	800259c <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6413      	str	r3, [r2, #64]	; 0x40
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6313      	str	r3, [r2, #48]	; 0x30
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x230>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800256c:	2303      	movs	r3, #3
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800257c:	2302      	movs	r3, #2
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	4809      	ldr	r0, [pc, #36]	; (80025ac <HAL_TIM_Encoder_MspInit+0x234>)
 8002588:	f000 fcc4 	bl	8002f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2032      	movs	r0, #50	; 0x32
 8002592:	f000 fbf6 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002596:	2032      	movs	r0, #50	; 0x32
 8002598:	f000 fc0f 	bl	8002dba <HAL_NVIC_EnableIRQ>
}
 800259c:	bf00      	nop
 800259e:	3740      	adds	r7, #64	; 0x40
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00

080025bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_TIM_Base_MspInit+0xb4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a27      	ldr	r2, [pc, #156]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80025ea:	e03a      	b.n	8002662 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <HAL_TIM_Base_MspInit+0xbc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
}
 8002612:	e026      	b.n	8002662 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_TIM_Base_MspInit+0xc0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
}
 800263a:	e012      	b.n	8002662 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_TIM_Base_MspInit+0xc4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10d      	bne.n	8002662 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_TIM_Base_MspInit+0xb8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40000400 	.word	0x40000400
 8002674:	40023800 	.word	0x40023800
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800

08002684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_TIM_MspPostInit+0x180>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d13c      	bne.n	8002720 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	4b57      	ldr	r3, [pc, #348]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a4f      	ldr	r2, [pc, #316]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ee:	2302      	movs	r3, #2
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4619      	mov	r1, r3
 80026f8:	4844      	ldr	r0, [pc, #272]	; (800280c <HAL_TIM_MspPostInit+0x188>)
 80026fa:	f000 fc0b 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800270e:	2302      	movs	r3, #2
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	483d      	ldr	r0, [pc, #244]	; (8002810 <HAL_TIM_MspPostInit+0x18c>)
 800271a:	f000 fbfb 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800271e:	e06c      	b.n	80027fa <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM9)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <HAL_TIM_MspPostInit+0x190>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d11e      	bne.n	8002768 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002746:	230c      	movs	r3, #12
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002756:	2303      	movs	r3, #3
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	482a      	ldr	r0, [pc, #168]	; (800280c <HAL_TIM_MspPostInit+0x188>)
 8002762:	f000 fbd7 	bl	8002f14 <HAL_GPIO_Init>
}
 8002766:	e048      	b.n	80027fa <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_TIM_MspPostInit+0x194>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d11f      	bne.n	80027b2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a23      	ldr	r2, [pc, #140]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800278e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80027a0:	2303      	movs	r3, #3
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	4819      	ldr	r0, [pc, #100]	; (8002810 <HAL_TIM_MspPostInit+0x18c>)
 80027ac:	f000 fbb2 	bl	8002f14 <HAL_GPIO_Init>
}
 80027b0:	e023      	b.n	80027fa <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM11)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_TIM_MspPostInit+0x198>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d11e      	bne.n	80027fa <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4a10      	ldr	r2, [pc, #64]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	6313      	str	r3, [r2, #48]	; 0x30
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_TIM_MspPostInit+0x184>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80027ea:	2303      	movs	r3, #3
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <HAL_TIM_MspPostInit+0x18c>)
 80027f6:	f000 fb8d 	bl	8002f14 <HAL_GPIO_Init>
}
 80027fa:	bf00      	nop
 80027fc:	3730      	adds	r7, #48	; 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40000400 	.word	0x40000400
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_UART_MspInit+0x94>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d134      	bne.n	80028ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_UART_MspInit+0x98>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_UART_MspInit+0x98>)
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_UART_MspInit+0x98>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_UART_MspInit+0x98>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_UART_MspInit+0x98>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_UART_MspInit+0x98>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800287a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800287e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800288c:	2308      	movs	r3, #8
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	4809      	ldr	r0, [pc, #36]	; (80028bc <HAL_UART_MspInit+0x9c>)
 8002898:	f000 fb3c 	bl	8002f14 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2047      	movs	r0, #71	; 0x47
 80028a2:	f000 fa6e 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028a6:	2047      	movs	r0, #71	; 0x47
 80028a8:	f000 fa87 	bl	8002dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40011400 	.word	0x40011400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c4:	e7fe      	b.n	80028c4 <NMI_Handler+0x4>

080028c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <MemManage_Handler+0x4>

080028d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <UsageFault_Handler+0x4>

080028de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indexPos++;
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <SysTick_Handler+0xa8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <SysTick_Handler+0xa8>)
 8002914:	6013      	str	r3, [r2, #0]
		if(indexPos == 500){
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <SysTick_Handler+0xa8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800291e:	d142      	bne.n	80029a6 <SysTick_Handler+0x9e>
			encoder_A.speed = ((encoder_A.position-encoder_A.old_position)*2);
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <SysTick_Handler+0xac>)
 8002922:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002926:	461a      	mov	r2, r3
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <SysTick_Handler+0xac>)
 800292a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <SysTick_Handler+0xac>)
 8002934:	6153      	str	r3, [r2, #20]
			encoder_A.old_position = encoder_A.position;
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <SysTick_Handler+0xac>)
 8002938:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <SysTick_Handler+0xac>)
 800293e:	821a      	strh	r2, [r3, #16]

			encoder_B.speed = ((encoder_B.position-encoder_B.old_position)*2);
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <SysTick_Handler+0xb0>)
 8002942:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002946:	461a      	mov	r2, r3
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <SysTick_Handler+0xb0>)
 800294a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <SysTick_Handler+0xb0>)
 8002954:	6153      	str	r3, [r2, #20]
			encoder_B.old_position = encoder_B.position;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <SysTick_Handler+0xb0>)
 8002958:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <SysTick_Handler+0xb0>)
 800295e:	821a      	strh	r2, [r3, #16]

			encoder_C.speed = ((encoder_C.position-encoder_C.old_position)*2);
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <SysTick_Handler+0xb4>)
 8002962:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002966:	461a      	mov	r2, r3
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <SysTick_Handler+0xb4>)
 800296a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <SysTick_Handler+0xb4>)
 8002974:	6153      	str	r3, [r2, #20]
			encoder_C.old_position = encoder_C.position;
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <SysTick_Handler+0xb4>)
 8002978:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <SysTick_Handler+0xb4>)
 800297e:	821a      	strh	r2, [r3, #16]

			encoder_D.speed = ((encoder_D.position-encoder_D.old_position)*2);
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <SysTick_Handler+0xb8>)
 8002982:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002986:	461a      	mov	r2, r3
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <SysTick_Handler+0xb8>)
 800298a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <SysTick_Handler+0xb8>)
 8002994:	6153      	str	r3, [r2, #20]
			encoder_D.old_position = encoder_D.position;
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <SysTick_Handler+0xb8>)
 8002998:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <SysTick_Handler+0xb8>)
 800299e:	821a      	strh	r2, [r3, #16]

			indexPos = 0;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <SysTick_Handler+0xa8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a6:	f000 f8cd 	bl	8002b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000598 	.word	0x20000598
 80029b4:	20000538 	.word	0x20000538
 80029b8:	20000550 	.word	0x20000550
 80029bc:	20000568 	.word	0x20000568
 80029c0:	20000580 	.word	0x20000580

080029c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <TIM1_CC_IRQHandler+0x10>)
 80029ca:	f001 fa95 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000002c 	.word	0x2000002c

080029d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <TIM2_IRQHandler+0x10>)
 80029de:	f001 fa8b 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000074 	.word	0x20000074

080029ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <TIM4_IRQHandler+0x10>)
 80029f2:	f001 fa81 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000104 	.word	0x20000104

08002a00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <TIM5_IRQHandler+0x10>)
 8002a06:	f001 fa77 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000014c 	.word	0x2000014c

08002a14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <USART6_IRQHandler+0x10>)
 8002a1a:	f002 f8b9 	bl	8004b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000026c 	.word	0x2000026c

08002a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <SystemInit+0x20>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <SystemInit+0x20>)
 8002a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <Reset_Handler>:
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0xe>
 8002a50:	f7ff ffea 	bl	8002a28 <SystemInit>
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <LoopFillZerobss+0x12>)
 8002a56:	490d      	ldr	r1, [pc, #52]	; (8002a8c <LoopFillZerobss+0x16>)
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <LoopFillZerobss+0x1a>)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:
 8002a5e:	58d4      	ldr	r4, [r2, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:
 8002a64:	18c4      	adds	r4, r0, r3
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <LoopFillZerobss+0x1e>)
 8002a6c:	4c0a      	ldr	r4, [pc, #40]	; (8002a98 <LoopFillZerobss+0x22>)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:
 8002a76:	42a2      	cmp	r2, r4
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>
 8002a7a:	f002 ff55 	bl	8005928 <__libc_init_array>
 8002a7e:	f7fe fdf1 	bl	8001664 <main>
 8002a82:	4770      	bx	lr
 8002a84:	20020000 	.word	0x20020000
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	2000000c 	.word	0x2000000c
 8002a90:	08006cb0 	.word	0x08006cb0
 8002a94:	20000010 	.word	0x20000010
 8002a98:	200005a0 	.word	0x200005a0

08002a9c <ADC_IRQHandler>:
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_Init+0x40>)
 8002aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_Init+0x40>)
 8002ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_Init+0x40>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 f94f 	bl	8002d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ace:	200f      	movs	r0, #15
 8002ad0:	f000 f808 	bl	8002ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad4:	f7ff fc28 	bl	8002328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_InitTick+0x54>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x58>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f967 	bl	8002dd6 <HAL_SYSTICK_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00e      	b.n	8002b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d80a      	bhi.n	8002b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b20:	f000 f92f 	bl	8002d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b24:	4a06      	ldr	r2, [pc, #24]	; (8002b40 <HAL_InitTick+0x5c>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_IncTick+0x20>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x24>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_IncTick+0x24>)
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000008 	.word	0x20000008
 8002b68:	2000059c 	.word	0x2000059c

08002b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_GetTick+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000059c 	.word	0x2000059c

08002b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff ffee 	bl	8002b6c <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9c:	d005      	beq.n	8002baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_Delay+0x44>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002baa:	bf00      	nop
 8002bac:	f7ff ffde 	bl	8002b6c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d8f7      	bhi.n	8002bac <HAL_Delay+0x28>
  {
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000008 	.word	0x20000008

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	; (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d38:	d301      	bcc.n	8002d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00f      	b.n	8002d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <SysTick_Config+0x40>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d46:	210f      	movs	r1, #15
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d4c:	f7ff ff8e 	bl	8002c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <SysTick_Config+0x40>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <SysTick_Config+0x40>)
 8002d58:	2207      	movs	r2, #7
 8002d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	e000e010 	.word	0xe000e010

08002d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff29 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d94:	f7ff ff3e 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7ff ff8e 	bl	8002cc0 <NVIC_EncodePriority>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff5d 	bl	8002c6c <__NVIC_SetPriority>
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff31 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ffa2 	bl	8002d28 <SysTick_Config>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff feb6 	bl	8002b6c <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d008      	beq.n	8002e20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e052      	b.n	8002ec6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0216 	bic.w	r2, r2, #22
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_DMA_Abort+0x62>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0208 	bic.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e70:	e013      	b.n	8002e9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e72:	f7ff fe7b 	bl	8002b6c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d90c      	bls.n	8002e9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e015      	b.n	8002ec6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e4      	bne.n	8002e72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00c      	b.n	8002f06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e159      	b.n	80031e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 8148 	bne.w	80031de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d005      	beq.n	8002f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d017      	beq.n	8003004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d123      	bne.n	8003058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a2 	beq.w	80031de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b57      	ldr	r3, [pc, #348]	; (80031fc <HAL_GPIO_Init+0x2e8>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a56      	ldr	r2, [pc, #344]	; (80031fc <HAL_GPIO_Init+0x2e8>)
 80030a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b54      	ldr	r3, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x2e8>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b6:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_GPIO_Init+0x2ec>)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a49      	ldr	r2, [pc, #292]	; (8003204 <HAL_GPIO_Init+0x2f0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x202>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a48      	ldr	r2, [pc, #288]	; (8003208 <HAL_GPIO_Init+0x2f4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x1fe>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a47      	ldr	r2, [pc, #284]	; (800320c <HAL_GPIO_Init+0x2f8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x1fa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a46      	ldr	r2, [pc, #280]	; (8003210 <HAL_GPIO_Init+0x2fc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x1f6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a45      	ldr	r2, [pc, #276]	; (8003214 <HAL_GPIO_Init+0x300>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x1f2>
 8003102:	2304      	movs	r3, #4
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x204>
 8003106:	2307      	movs	r3, #7
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x204>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x204>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x204>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x204>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x2ec>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_GPIO_Init+0x304>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <HAL_GPIO_Init+0x304>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_GPIO_Init+0x304>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_GPIO_Init+0x304>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_GPIO_Init+0x304>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f aea2 	bls.w	8002f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40013c00 	.word	0x40013c00

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003238:	e003      	b.n	8003242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	041a      	lsls	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e267      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d075      	beq.n	800335a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800326e:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d00c      	beq.n	8003294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327a:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003282:	2b08      	cmp	r3, #8
 8003284:	d112      	bne.n	80032ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b82      	ldr	r3, [pc, #520]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003292:	d10b      	bne.n	80032ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	4b7e      	ldr	r3, [pc, #504]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d05b      	beq.n	8003358 <HAL_RCC_OscConfig+0x108>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d157      	bne.n	8003358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e242      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d106      	bne.n	80032c4 <HAL_RCC_OscConfig+0x74>
 80032b6:	4b76      	ldr	r3, [pc, #472]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a75      	ldr	r2, [pc, #468]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e01d      	b.n	8003300 <HAL_RCC_OscConfig+0xb0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x98>
 80032ce:	4b70      	ldr	r3, [pc, #448]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6f      	ldr	r2, [pc, #444]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6c      	ldr	r2, [pc, #432]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0xb0>
 80032e8:	4b69      	ldr	r3, [pc, #420]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a68      	ldr	r2, [pc, #416]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b66      	ldr	r3, [pc, #408]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a65      	ldr	r2, [pc, #404]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7ff fc30 	bl	8002b6c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003310:	f7ff fc2c 	bl	8002b6c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e207      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0xc0>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7ff fc1c 	bl	8002b6c <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003338:	f7ff fc18 	bl	8002b6c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e1f3      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0xe8>
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d063      	beq.n	800342e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337a:	2b08      	cmp	r3, #8
 800337c:	d11c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b44      	ldr	r3, [pc, #272]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0x152>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1c7      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4937      	ldr	r1, [pc, #220]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	e03a      	b.n	800342e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c0:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x244>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7ff fbd1 	bl	8002b6c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ce:	f7ff fbcd 	bl	8002b6c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1a8      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4925      	ldr	r1, [pc, #148]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x244>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7ff fbb0 	bl	8002b6c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003410:	f7ff fbac 	bl	8002b6c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e187      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d036      	beq.n	80034a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCC_OscConfig+0x248>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7ff fb90 	bl	8002b6c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003450:	f7ff fb8c 	bl	8002b6c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e167      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_OscConfig+0x240>)
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x200>
 800346e:	e01b      	b.n	80034a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_OscConfig+0x248>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003476:	f7ff fb79 	bl	8002b6c <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	e00e      	b.n	800349c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347e:	f7ff fb75 	bl	8002b6c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d907      	bls.n	800349c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e150      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
 8003490:	40023800 	.word	0x40023800
 8003494:	42470000 	.word	0x42470000
 8003498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ea      	bne.n	800347e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8097 	beq.w	80035e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b81      	ldr	r3, [pc, #516]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b7d      	ldr	r3, [pc, #500]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a7c      	ldr	r2, [pc, #496]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x474>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d118      	bne.n	8003524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b74      	ldr	r3, [pc, #464]	; (80036c4 <HAL_RCC_OscConfig+0x474>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a73      	ldr	r2, [pc, #460]	; (80036c4 <HAL_RCC_OscConfig+0x474>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7ff fb35 	bl	8002b6c <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7ff fb31 	bl	8002b6c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e10c      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0x474>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x2ea>
 800352c:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a63      	ldr	r2, [pc, #396]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	e01c      	b.n	8003574 <HAL_RCC_OscConfig+0x324>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x30c>
 8003542:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a5e      	ldr	r2, [pc, #376]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
 800354e:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a5b      	ldr	r2, [pc, #364]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0x324>
 800355c:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a57      	ldr	r2, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b55      	ldr	r3, [pc, #340]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a54      	ldr	r2, [pc, #336]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7ff faf6 	bl	8002b6c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7ff faf2 	bl	8002b6c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0cb      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4b49      	ldr	r3, [pc, #292]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCC_OscConfig+0x334>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7ff fae0 	bl	8002b6c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7ff fadc 	bl	8002b6c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0b5      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ee      	bne.n	80035b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	4a38      	ldr	r2, [pc, #224]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a1 	beq.w	8003730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d05c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d141      	bne.n	8003686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCC_OscConfig+0x478>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7ff fab0 	bl	8002b6c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7ff faac 	bl	8002b6c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e087      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	491b      	ldr	r1, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x478>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7ff fa85 	bl	8002b6c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003666:	f7ff fa81 	bl	8002b6c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e05c      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x416>
 8003684:	e054      	b.n	8003730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCC_OscConfig+0x478>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7ff fa6e 	bl	8002b6c <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003694:	f7ff fa6a 	bl	8002b6c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e045      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_OscConfig+0x470>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x444>
 80036b2:	e03d      	b.n	8003730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e038      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000
 80036c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4ec>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d028      	beq.n	800372c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d121      	bne.n	800372c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d11a      	bne.n	800372c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003704:	4293      	cmp	r3, r2
 8003706:	d111      	bne.n	800372c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	3b01      	subs	r3, #1
 8003716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800

08003740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0cc      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003754:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d90c      	bls.n	800377c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d044      	beq.n	8003860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d119      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e067      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0203 	bic.w	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4934      	ldr	r1, [pc, #208]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003830:	f7ff f99c 	bl	8002b6c <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	e00a      	b.n	800384e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7ff f998 	bl	8002b6c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e04f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 020c 	and.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	429a      	cmp	r2, r3
 800385e:	d1eb      	bne.n	8003838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d20c      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f8fc 	bl	8002ae4 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	08006ab0 	.word	0x08006ab0
 8003904:	20000000 	.word	0x20000000
 8003908:	20000004 	.word	0x20000004

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003910:	b090      	sub	sp, #64	; 0x40
 8003912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
 8003918:	2300      	movs	r3, #0
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391c:	2300      	movs	r3, #0
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003924:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b08      	cmp	r3, #8
 800392e:	d00d      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x40>
 8003930:	2b08      	cmp	r3, #8
 8003932:	f200 80a1 	bhi.w	8003a78 <HAL_RCC_GetSysClockFreq+0x16c>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x34>
 800393a:	2b04      	cmp	r3, #4
 800393c:	d003      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x3a>
 800393e:	e09b      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003944:	e09b      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003946:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800394a:	e098      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394c:	4b4f      	ldr	r3, [pc, #316]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x180>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003956:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d028      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	2200      	movs	r2, #0
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	627a      	str	r2, [r7, #36]	; 0x24
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003974:	2100      	movs	r1, #0
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003978:	fb03 f201 	mul.w	r2, r3, r1
 800397c:	2300      	movs	r3, #0
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	4413      	add	r3, r2
 8003984:	4a43      	ldr	r2, [pc, #268]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003986:	fba0 1202 	umull	r1, r2, r0, r2
 800398a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800398c:	460a      	mov	r2, r1
 800398e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003992:	4413      	add	r3, r2
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	2200      	movs	r2, #0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	61fa      	str	r2, [r7, #28]
 800399e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039a6:	f7fd f895 	bl	8000ad4 <__aeabi_uldivmod>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4613      	mov	r3, r2
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b2:	e053      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b4:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x180>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	2200      	movs	r2, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	617a      	str	r2, [r7, #20]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039c6:	f04f 0b00 	mov.w	fp, #0
 80039ca:	4652      	mov	r2, sl
 80039cc:	465b      	mov	r3, fp
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	0159      	lsls	r1, r3, #5
 80039d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039dc:	0150      	lsls	r0, r2, #5
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	ebb2 080a 	subs.w	r8, r2, sl
 80039e6:	eb63 090b 	sbc.w	r9, r3, fp
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003a02:	eb63 0509 	sbc.w	r5, r3, r9
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	00eb      	lsls	r3, r5, #3
 8003a10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a14:	00e2      	lsls	r2, r4, #3
 8003a16:	4614      	mov	r4, r2
 8003a18:	461d      	mov	r5, r3
 8003a1a:	eb14 030a 	adds.w	r3, r4, sl
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	eb45 030b 	adc.w	r3, r5, fp
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a32:	4629      	mov	r1, r5
 8003a34:	028b      	lsls	r3, r1, #10
 8003a36:	4621      	mov	r1, r4
 8003a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	028a      	lsls	r2, r1, #10
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	2200      	movs	r2, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	60fa      	str	r2, [r7, #12]
 8003a4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a50:	f7fd f840 	bl	8000ad4 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4613      	mov	r3, r2
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3740      	adds	r7, #64	; 0x40
 8003a84:	46bd      	mov	sp, r7
 8003a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	017d7840 	.word	0x017d7840

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ab4:	f7ff fff0 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0a9b      	lsrs	r3, r3, #10
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08006ac0 	.word	0x08006ac0

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003adc:	f7ff ffdc 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0b5b      	lsrs	r3, r3, #13
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08006ac0 	.word	0x08006ac0

08003b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e041      	b.n	8003b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe fd48 	bl	80025bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f000 fc7c 	bl	800443c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e041      	b.n	8003c34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f839 	bl	8003c3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f000 fc2d 	bl	800443c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e097      	b.n	8003d94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fe fb7d 	bl	8002378 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c94:	f023 0307 	bic.w	r3, r3, #7
 8003c98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f000 fbc9 	bl	800443c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cf0:	f023 030c 	bic.w	r3, r3, #12
 8003cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	011a      	lsls	r2, r3, #4
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	031b      	lsls	r3, r3, #12
 8003d20:	4313      	orrs	r3, r2
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	4313      	orrs	r3, r2
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d110      	bne.n	8003dee <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dd2:	7b7b      	ldrb	r3, [r7, #13]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e089      	b.n	8003ef0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dec:	e031      	b.n	8003e52 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d110      	bne.n	8003e16 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df4:	7bbb      	ldrb	r3, [r7, #14]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dfa:	7b3b      	ldrb	r3, [r7, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e075      	b.n	8003ef0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e14:	e01d      	b.n	8003e52 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d108      	bne.n	8003e2e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e1c:	7bbb      	ldrb	r3, [r7, #14]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e22:	7b7b      	ldrb	r3, [r7, #13]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d102      	bne.n	8003e2e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e28:	7b3b      	ldrb	r3, [r7, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d001      	beq.n	8003e32 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e05e      	b.n	8003ef0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d010      	beq.n	8003e80 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003e5e:	e01f      	b.n	8003ea0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fd99 	bl	80049a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0202 	orr.w	r2, r2, #2
 8003e7c:	60da      	str	r2, [r3, #12]
      break;
 8003e7e:	e02e      	b.n	8003ede <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2201      	movs	r2, #1
 8003e86:	2104      	movs	r1, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fd89 	bl	80049a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0204 	orr.w	r2, r2, #4
 8003e9c:	60da      	str	r2, [r3, #12]
      break;
 8003e9e:	e01e      	b.n	8003ede <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd79 	bl	80049a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd72 	bl	80049a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0202 	orr.w	r2, r2, #2
 8003eca:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0204 	orr.w	r2, r2, #4
 8003eda:	60da      	str	r2, [r3, #12]
      break;
 8003edc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d020      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0202 	mvn.w	r2, #2
 8003f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd fa80 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa57 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa5e 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0204 	mvn.w	r2, #4
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd fa5a 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa31 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa38 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fa34 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa0b 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa12 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0210 	mvn.w	r2, #16
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2208      	movs	r2, #8
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fa0e 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9e5 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f9ec 	bl	8004412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0201 	mvn.w	r2, #1
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9c3 	bl	80043ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd2a 	bl	8004adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9bd 	bl	8004426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0220 	mvn.w	r2, #32
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fcfc 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0ae      	b.n	8004254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f200 809f 	bhi.w	8004244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004141 	.word	0x08004141
 8004110:	08004245 	.word	0x08004245
 8004114:	08004245 	.word	0x08004245
 8004118:	08004245 	.word	0x08004245
 800411c:	08004181 	.word	0x08004181
 8004120:	08004245 	.word	0x08004245
 8004124:	08004245 	.word	0x08004245
 8004128:	08004245 	.word	0x08004245
 800412c:	080041c3 	.word	0x080041c3
 8004130:	08004245 	.word	0x08004245
 8004134:	08004245 	.word	0x08004245
 8004138:	08004245 	.word	0x08004245
 800413c:	08004203 	.word	0x08004203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa04 	bl	8004554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
      break;
 800417e:	e064      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fa4a 	bl	8004620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
      break;
 80041c0:	e043      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fa95 	bl	80046f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0208 	orr.w	r2, r2, #8
 80041dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0204 	bic.w	r2, r2, #4
 80041ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	61da      	str	r2, [r3, #28]
      break;
 8004200:	e023      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fadf 	bl	80047cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800421c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	021a      	lsls	r2, r3, #8
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	61da      	str	r2, [r3, #28]
      break;
 8004242:	e002      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIM_ConfigClockSource+0x1c>
 8004274:	2302      	movs	r3, #2
 8004276:	e0b4      	b.n	80043e2 <HAL_TIM_ConfigClockSource+0x186>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d03e      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xd4>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	f200 8087 	bhi.w	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	f000 8086 	beq.w	80043ce <HAL_TIM_ConfigClockSource+0x172>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d87f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b70      	cmp	r3, #112	; 0x70
 80042ca:	d01a      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xa6>
 80042cc:	2b70      	cmp	r3, #112	; 0x70
 80042ce:	d87b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d050      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x11a>
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d877      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b50      	cmp	r3, #80	; 0x50
 80042da:	d03c      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xfa>
 80042dc:	2b50      	cmp	r3, #80	; 0x50
 80042de:	d873      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d058      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x13a>
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d86f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d064      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042ec:	2b30      	cmp	r3, #48	; 0x30
 80042ee:	d86b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d060      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d867      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05c      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d05a      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	e062      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004312:	f000 fb25 	bl	8004960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	609a      	str	r2, [r3, #8]
      break;
 800432e:	e04f      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004340:	f000 fb0e 	bl	8004960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004352:	609a      	str	r2, [r3, #8]
      break;
 8004354:	e03c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	461a      	mov	r2, r3
 8004364:	f000 fa82 	bl	800486c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2150      	movs	r1, #80	; 0x50
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fadb 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 8004374:	e02c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004382:	461a      	mov	r2, r3
 8004384:	f000 faa1 	bl	80048ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2160      	movs	r1, #96	; 0x60
 800438e:	4618      	mov	r0, r3
 8004390:	f000 facb 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 8004394:	e01c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 fa62 	bl	800486c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fabb 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 80043b4:	e00c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fab2 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3a      	ldr	r2, [pc, #232]	; (8004538 <TIM_Base_SetConfig+0xfc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a37      	ldr	r2, [pc, #220]	; (800453c <TIM_Base_SetConfig+0x100>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a36      	ldr	r2, [pc, #216]	; (8004540 <TIM_Base_SetConfig+0x104>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a35      	ldr	r2, [pc, #212]	; (8004544 <TIM_Base_SetConfig+0x108>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2b      	ldr	r2, [pc, #172]	; (8004538 <TIM_Base_SetConfig+0xfc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <TIM_Base_SetConfig+0x100>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <TIM_Base_SetConfig+0x104>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a26      	ldr	r2, [pc, #152]	; (8004544 <TIM_Base_SetConfig+0x108>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <TIM_Base_SetConfig+0x10c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a24      	ldr	r2, [pc, #144]	; (800454c <TIM_Base_SetConfig+0x110>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a23      	ldr	r2, [pc, #140]	; (8004550 <TIM_Base_SetConfig+0x114>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <TIM_Base_SetConfig+0xfc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d103      	bne.n	800450c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	611a      	str	r2, [r3, #16]
  }
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 0201 	bic.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0302 	bic.w	r3, r3, #2
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10c      	bne.n	80045ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0308 	bic.w	r3, r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a13      	ldr	r2, [pc, #76]	; (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40010000 	.word	0x40010000

08004620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f023 0210 	bic.w	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0320 	bic.w	r3, r3, #32
 800466a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <TIM_OC2_SetConfig+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10d      	bne.n	800469c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <TIM_OC2_SetConfig+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d113      	bne.n	80046cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000

080046f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <TIM_OC3_SetConfig+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800475c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC3_SetConfig+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d113      	bne.n	80047a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40010000 	.word	0x40010000

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <TIM_OC4_SetConfig+0x9c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000

0800486c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 030a 	bic.w	r3, r3, #10
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f023 0210 	bic.w	r2, r3, #16
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	031b      	lsls	r3, r3, #12
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004906:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	f043 0307 	orr.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	431a      	orrs	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4313      	orrs	r3, r2
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2201      	movs	r2, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1a      	ldr	r2, [r3, #32]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	431a      	orrs	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e050      	b.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d013      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a16      	ldr	r2, [pc, #88]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10c      	bne.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40014000 	.word	0x40014000

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fe82 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	; 0x24
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fc7b 	bl	8005430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b0ba      	sub	sp, #232	; 0xe8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x66>
 8004be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb5f 	bl	80052b2 <UART_Receive_IT>
      return;
 8004bf4:	e25b      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80de 	beq.w	8004dbc <HAL_UART_IRQHandler+0x22c>
 8004c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80d1 	beq.w	8004dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0xae>
 8004c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_UART_IRQHandler+0xd2>
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	f043 0202 	orr.w	r2, r3, #2
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_UART_IRQHandler+0xf6>
 8004c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f043 0204 	orr.w	r2, r3, #4
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d011      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x126>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f043 0208 	orr.w	r2, r3, #8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 81f2 	beq.w	80050a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_UART_IRQHandler+0x14e>
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 faea 	bl	80052b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_UART_IRQHandler+0x17a>
 8004d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04f      	beq.n	8004daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9f2 	bl	80050f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d141      	bne.n	8004da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3314      	adds	r3, #20
 8004d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3314      	adds	r3, #20
 8004d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1d9      	bne.n	8004d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d013      	beq.n	8004d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <HAL_UART_IRQHandler+0x3e0>)
 8004d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe f8a5 	bl	8002ece <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	e00e      	b.n	8004db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f994 	bl	80050c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e00a      	b.n	8004db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f990 	bl	80050c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	e006      	b.n	8004db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f98c 	bl	80050c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004db6:	e175      	b.n	80050a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	bf00      	nop
    return;
 8004dba:	e173      	b.n	80050a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	f040 814f 	bne.w	8005064 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8148 	beq.w	8005064 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8141 	beq.w	8005064 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	f040 80b6 	bne.w	8004f74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8145 	beq.w	80050a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e26:	429a      	cmp	r2, r3
 8004e28:	f080 813e 	bcs.w	80050a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3e:	f000 8088 	beq.w	8004f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1d9      	bne.n	8004e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e1      	bne.n	8004e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3314      	adds	r3, #20
 8004eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e3      	bne.n	8004eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f22:	f023 0310 	bic.w	r3, r3, #16
 8004f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e3      	bne.n	8004f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd ff4e 	bl	8002dee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8b7 	bl	80050dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f6e:	e09b      	b.n	80050a8 <HAL_UART_IRQHandler+0x518>
 8004f70:	080051bb 	.word	0x080051bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 808e 	beq.w	80050ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8089 	beq.w	80050ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fbe:	647a      	str	r2, [r7, #68]	; 0x44
 8004fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e3      	bne.n	8004f9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e3      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	60fb      	str	r3, [r7, #12]
   return(result);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800503c:	61fa      	str	r2, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	617b      	str	r3, [r7, #20]
   return(result);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e3      	bne.n	8005018 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f83d 	bl	80050dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005062:	e023      	b.n	80050ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <HAL_UART_IRQHandler+0x4f4>
 8005070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8b0 	bl	80051e2 <UART_Transmit_IT>
    return;
 8005082:	e014      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <HAL_UART_IRQHandler+0x51e>
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8f0 	bl	8005282 <UART_EndTransmit_IT>
    return;
 80050a2:	e004      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
    return;
 80050a4:	bf00      	nop
 80050a6:	e002      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
      return;
 80050a8:	bf00      	nop
 80050aa:	e000      	b.n	80050ae <HAL_UART_IRQHandler+0x51e>
      return;
 80050ac:	bf00      	nop
  }
}
 80050ae:	37e8      	adds	r7, #232	; 0xe8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b095      	sub	sp, #84	; 0x54
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511c:	643a      	str	r2, [r7, #64]	; 0x40
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	d119      	bne.n	80051a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	60bb      	str	r3, [r7, #8]
   return(result);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0310 	bic.w	r3, r3, #16
 8005182:	647b      	str	r3, [r7, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800518c:	61ba      	str	r2, [r7, #24]
 800518e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	613b      	str	r3, [r7, #16]
   return(result);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e5      	bne.n	800516c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ae:	bf00      	nop
 80051b0:	3754      	adds	r7, #84	; 0x54
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff ff77 	bl	80050c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b21      	cmp	r3, #33	; 0x21
 80051f4:	d13e      	bne.n	8005274 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d114      	bne.n	800522a <UART_Transmit_IT+0x48>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]
 8005228:	e008      	b.n	800523c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6211      	str	r1, [r2, #32]
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29b      	uxth	r3, r3
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4619      	mov	r1, r3
 800524a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005298:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ff06 	bl	80050b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08c      	sub	sp, #48	; 0x30
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b22      	cmp	r3, #34	; 0x22
 80052c4:	f040 80ae 	bne.w	8005424 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d117      	bne.n	8005302 <UART_Receive_IT+0x50>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d113      	bne.n	8005302 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005300:	e026      	b.n	8005350 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d007      	beq.n	8005326 <UART_Receive_IT+0x74>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <UART_Receive_IT+0x82>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e008      	b.n	8005346 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005340:	b2da      	uxtb	r2, r3
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4619      	mov	r1, r3
 800535e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005360:	2b00      	cmp	r3, #0
 8005362:	d15d      	bne.n	8005420 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0220 	bic.w	r2, r2, #32
 8005372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d135      	bne.n	8005416 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	613b      	str	r3, [r7, #16]
   return(result);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d0:	623a      	str	r2, [r7, #32]
 80053d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	69f9      	ldr	r1, [r7, #28]
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e5      	bne.n	80053b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d10a      	bne.n	8005408 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fe64 	bl	80050dc <HAL_UARTEx_RxEventCallback>
 8005414:	e002      	b.n	800541c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc f91a 	bl	8001650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	e002      	b.n	8005426 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3730      	adds	r7, #48	; 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b0c0      	sub	sp, #256	; 0x100
 8005436:	af00      	add	r7, sp, #0
 8005438:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	ea40 0301 	orr.w	r3, r0, r1
 8005458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005488:	f021 010c 	bic.w	r1, r1, #12
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005496:	430b      	orrs	r3, r1
 8005498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	6999      	ldr	r1, [r3, #24]
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	ea40 0301 	orr.w	r3, r0, r1
 80054b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b8f      	ldr	r3, [pc, #572]	; (80056fc <UART_SetConfig+0x2cc>)
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d005      	beq.n	80054d0 <UART_SetConfig+0xa0>
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <UART_SetConfig+0x2d0>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d104      	bne.n	80054da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fe fb02 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 80054d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054d8:	e003      	b.n	80054e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054da:	f7fe fae9 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 80054de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ec:	f040 810c 	bne.w	8005708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	1891      	adds	r1, r2, r2
 8005508:	65b9      	str	r1, [r7, #88]	; 0x58
 800550a:	415b      	adcs	r3, r3
 800550c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800550e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005512:	4621      	mov	r1, r4
 8005514:	eb12 0801 	adds.w	r8, r2, r1
 8005518:	4629      	mov	r1, r5
 800551a:	eb43 0901 	adc.w	r9, r3, r1
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005532:	4690      	mov	r8, r2
 8005534:	4699      	mov	r9, r3
 8005536:	4623      	mov	r3, r4
 8005538:	eb18 0303 	adds.w	r3, r8, r3
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005540:	462b      	mov	r3, r5
 8005542:	eb49 0303 	adc.w	r3, r9, r3
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005556:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800555a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800555e:	460b      	mov	r3, r1
 8005560:	18db      	adds	r3, r3, r3
 8005562:	653b      	str	r3, [r7, #80]	; 0x50
 8005564:	4613      	mov	r3, r2
 8005566:	eb42 0303 	adc.w	r3, r2, r3
 800556a:	657b      	str	r3, [r7, #84]	; 0x54
 800556c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005574:	f7fb faae 	bl	8000ad4 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <UART_SetConfig+0x2d4>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	64b9      	str	r1, [r7, #72]	; 0x48
 80055a0:	415b      	adcs	r3, r3
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055a8:	4641      	mov	r1, r8
 80055aa:	eb12 0a01 	adds.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb43 0b01 	adc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c8:	4692      	mov	sl, r2
 80055ca:	469b      	mov	fp, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	eb1a 0303 	adds.w	r3, sl, r3
 80055d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d6:	464b      	mov	r3, r9
 80055d8:	eb4b 0303 	adc.w	r3, fp, r3
 80055dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055f4:	460b      	mov	r3, r1
 80055f6:	18db      	adds	r3, r3, r3
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	4613      	mov	r3, r2
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	647b      	str	r3, [r7, #68]	; 0x44
 8005602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800560a:	f7fb fa63 	bl	8000ad4 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4611      	mov	r1, r2
 8005614:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <UART_SetConfig+0x2d4>)
 8005616:	fba3 2301 	umull	r2, r3, r3, r1
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2264      	movs	r2, #100	; 0x64
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	1acb      	subs	r3, r1, r3
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <UART_SetConfig+0x2d4>)
 800562c:	fba3 2302 	umull	r2, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005638:	441c      	add	r4, r3
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005644:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	63b9      	str	r1, [r7, #56]	; 0x38
 8005654:	415b      	adcs	r3, r3
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6339      	str	r1, [r7, #48]	; 0x30
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056b0:	460b      	mov	r3, r1
 80056b2:	18db      	adds	r3, r3, r3
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	4613      	mov	r3, r2
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056c6:	f7fb fa05 	bl	8000ad4 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <UART_SetConfig+0x2d4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	; 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	3332      	adds	r3, #50	; 0x32
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <UART_SetConfig+0x2d4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0207 	and.w	r2, r3, #7
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f8:	e106      	b.n	8005908 <UART_SetConfig+0x4d8>
 80056fa:	bf00      	nop
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570c:	2200      	movs	r2, #0
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005712:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	1891      	adds	r1, r2, r2
 8005720:	6239      	str	r1, [r7, #32]
 8005722:	415b      	adcs	r3, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572a:	4641      	mov	r1, r8
 800572c:	1854      	adds	r4, r2, r1
 800572e:	4649      	mov	r1, r9
 8005730:	eb43 0501 	adc.w	r5, r3, r1
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	00eb      	lsls	r3, r5, #3
 800573e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005742:	00e2      	lsls	r2, r4, #3
 8005744:	4614      	mov	r4, r2
 8005746:	461d      	mov	r5, r3
 8005748:	4643      	mov	r3, r8
 800574a:	18e3      	adds	r3, r4, r3
 800574c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005750:	464b      	mov	r3, r9
 8005752:	eb45 0303 	adc.w	r3, r5, r3
 8005756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005776:	4629      	mov	r1, r5
 8005778:	008b      	lsls	r3, r1, #2
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005780:	4621      	mov	r1, r4
 8005782:	008a      	lsls	r2, r1, #2
 8005784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005788:	f7fb f9a4 	bl	8000ad4 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b60      	ldr	r3, [pc, #384]	; (8005914 <UART_SetConfig+0x4e4>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011c      	lsls	r4, r3, #4
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	61b9      	str	r1, [r7, #24]
 80057b4:	415b      	adcs	r3, r3
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057bc:	4641      	mov	r1, r8
 80057be:	1851      	adds	r1, r2, r1
 80057c0:	6139      	str	r1, [r7, #16]
 80057c2:	4649      	mov	r1, r9
 80057c4:	414b      	adcs	r3, r1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d4:	4659      	mov	r1, fp
 80057d6:	00cb      	lsls	r3, r1, #3
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057de:	4651      	mov	r1, sl
 80057e0:	00ca      	lsls	r2, r1, #3
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	4642      	mov	r2, r8
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057f0:	464b      	mov	r3, r9
 80057f2:	460a      	mov	r2, r1
 80057f4:	eb42 0303 	adc.w	r3, r2, r3
 80057f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	67bb      	str	r3, [r7, #120]	; 0x78
 8005806:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005814:	4649      	mov	r1, r9
 8005816:	008b      	lsls	r3, r1, #2
 8005818:	4641      	mov	r1, r8
 800581a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581e:	4641      	mov	r1, r8
 8005820:	008a      	lsls	r2, r1, #2
 8005822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005826:	f7fb f955 	bl	8000ad4 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4611      	mov	r1, r2
 8005830:	4b38      	ldr	r3, [pc, #224]	; (8005914 <UART_SetConfig+0x4e4>)
 8005832:	fba3 2301 	umull	r2, r3, r3, r1
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2264      	movs	r2, #100	; 0x64
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	1acb      	subs	r3, r1, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a33      	ldr	r2, [pc, #204]	; (8005914 <UART_SetConfig+0x4e4>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005850:	441c      	add	r4, r3
 8005852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005856:	2200      	movs	r2, #0
 8005858:	673b      	str	r3, [r7, #112]	; 0x70
 800585a:	677a      	str	r2, [r7, #116]	; 0x74
 800585c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	1891      	adds	r1, r2, r2
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	415b      	adcs	r3, r3
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005870:	4641      	mov	r1, r8
 8005872:	1851      	adds	r1, r2, r1
 8005874:	6039      	str	r1, [r7, #0]
 8005876:	4649      	mov	r1, r9
 8005878:	414b      	adcs	r3, r1
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005888:	4659      	mov	r1, fp
 800588a:	00cb      	lsls	r3, r1, #3
 800588c:	4651      	mov	r1, sl
 800588e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005892:	4651      	mov	r1, sl
 8005894:	00ca      	lsls	r2, r1, #3
 8005896:	4610      	mov	r0, r2
 8005898:	4619      	mov	r1, r3
 800589a:	4603      	mov	r3, r0
 800589c:	4642      	mov	r2, r8
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a2:	464b      	mov	r3, r9
 80058a4:	460a      	mov	r2, r1
 80058a6:	eb42 0303 	adc.w	r3, r2, r3
 80058aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	663b      	str	r3, [r7, #96]	; 0x60
 80058b6:	667a      	str	r2, [r7, #100]	; 0x64
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058c4:	4649      	mov	r1, r9
 80058c6:	008b      	lsls	r3, r1, #2
 80058c8:	4641      	mov	r1, r8
 80058ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ce:	4641      	mov	r1, r8
 80058d0:	008a      	lsls	r2, r1, #2
 80058d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058d6:	f7fb f8fd 	bl	8000ad4 <__aeabi_uldivmod>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <UART_SetConfig+0x4e4>)
 80058e0:	fba3 1302 	umull	r1, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2164      	movs	r1, #100	; 0x64
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3332      	adds	r3, #50	; 0x32
 80058f2:	4a08      	ldr	r2, [pc, #32]	; (8005914 <UART_SetConfig+0x4e4>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4422      	add	r2, r4
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005914:	51eb851f 	.word	0x51eb851f

08005918 <memset>:
 8005918:	4402      	add	r2, r0
 800591a:	4603      	mov	r3, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <__libc_init_array>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4d0d      	ldr	r5, [pc, #52]	; (8005960 <__libc_init_array+0x38>)
 800592c:	4c0d      	ldr	r4, [pc, #52]	; (8005964 <__libc_init_array+0x3c>)
 800592e:	1b64      	subs	r4, r4, r5
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	2600      	movs	r6, #0
 8005934:	42a6      	cmp	r6, r4
 8005936:	d109      	bne.n	800594c <__libc_init_array+0x24>
 8005938:	4d0b      	ldr	r5, [pc, #44]	; (8005968 <__libc_init_array+0x40>)
 800593a:	4c0c      	ldr	r4, [pc, #48]	; (800596c <__libc_init_array+0x44>)
 800593c:	f001 f8ac 	bl	8006a98 <_init>
 8005940:	1b64      	subs	r4, r4, r5
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	2600      	movs	r6, #0
 8005946:	42a6      	cmp	r6, r4
 8005948:	d105      	bne.n	8005956 <__libc_init_array+0x2e>
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005950:	4798      	blx	r3
 8005952:	3601      	adds	r6, #1
 8005954:	e7ee      	b.n	8005934 <__libc_init_array+0xc>
 8005956:	f855 3b04 	ldr.w	r3, [r5], #4
 800595a:	4798      	blx	r3
 800595c:	3601      	adds	r6, #1
 800595e:	e7f2      	b.n	8005946 <__libc_init_array+0x1e>
 8005960:	08006ca8 	.word	0x08006ca8
 8005964:	08006ca8 	.word	0x08006ca8
 8005968:	08006ca8 	.word	0x08006ca8
 800596c:	08006cac 	.word	0x08006cac

08005970 <cos>:
 8005970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005972:	ec53 2b10 	vmov	r2, r3, d0
 8005976:	4826      	ldr	r0, [pc, #152]	; (8005a10 <cos+0xa0>)
 8005978:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800597c:	4281      	cmp	r1, r0
 800597e:	dc06      	bgt.n	800598e <cos+0x1e>
 8005980:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005a08 <cos+0x98>
 8005984:	b005      	add	sp, #20
 8005986:	f85d eb04 	ldr.w	lr, [sp], #4
 800598a:	f000 b89d 	b.w	8005ac8 <__kernel_cos>
 800598e:	4821      	ldr	r0, [pc, #132]	; (8005a14 <cos+0xa4>)
 8005990:	4281      	cmp	r1, r0
 8005992:	dd09      	ble.n	80059a8 <cos+0x38>
 8005994:	ee10 0a10 	vmov	r0, s0
 8005998:	4619      	mov	r1, r3
 800599a:	f7fa fc21 	bl	80001e0 <__aeabi_dsub>
 800599e:	ec41 0b10 	vmov	d0, r0, r1
 80059a2:	b005      	add	sp, #20
 80059a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80059a8:	4668      	mov	r0, sp
 80059aa:	f000 fa15 	bl	8005dd8 <__ieee754_rem_pio2>
 80059ae:	f000 0003 	and.w	r0, r0, #3
 80059b2:	2801      	cmp	r0, #1
 80059b4:	d00b      	beq.n	80059ce <cos+0x5e>
 80059b6:	2802      	cmp	r0, #2
 80059b8:	d016      	beq.n	80059e8 <cos+0x78>
 80059ba:	b9e0      	cbnz	r0, 80059f6 <cos+0x86>
 80059bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059c0:	ed9d 0b00 	vldr	d0, [sp]
 80059c4:	f000 f880 	bl	8005ac8 <__kernel_cos>
 80059c8:	ec51 0b10 	vmov	r0, r1, d0
 80059cc:	e7e7      	b.n	800599e <cos+0x2e>
 80059ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059d2:	ed9d 0b00 	vldr	d0, [sp]
 80059d6:	f000 f93f 	bl	8005c58 <__kernel_sin>
 80059da:	ec53 2b10 	vmov	r2, r3, d0
 80059de:	ee10 0a10 	vmov	r0, s0
 80059e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80059e6:	e7da      	b.n	800599e <cos+0x2e>
 80059e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059ec:	ed9d 0b00 	vldr	d0, [sp]
 80059f0:	f000 f86a 	bl	8005ac8 <__kernel_cos>
 80059f4:	e7f1      	b.n	80059da <cos+0x6a>
 80059f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059fa:	ed9d 0b00 	vldr	d0, [sp]
 80059fe:	2001      	movs	r0, #1
 8005a00:	f000 f92a 	bl	8005c58 <__kernel_sin>
 8005a04:	e7e0      	b.n	80059c8 <cos+0x58>
 8005a06:	bf00      	nop
	...
 8005a10:	3fe921fb 	.word	0x3fe921fb
 8005a14:	7fefffff 	.word	0x7fefffff

08005a18 <sin>:
 8005a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a1a:	ec53 2b10 	vmov	r2, r3, d0
 8005a1e:	4828      	ldr	r0, [pc, #160]	; (8005ac0 <sin+0xa8>)
 8005a20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a24:	4281      	cmp	r1, r0
 8005a26:	dc07      	bgt.n	8005a38 <sin+0x20>
 8005a28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005ab8 <sin+0xa0>
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	b005      	add	sp, #20
 8005a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a34:	f000 b910 	b.w	8005c58 <__kernel_sin>
 8005a38:	4822      	ldr	r0, [pc, #136]	; (8005ac4 <sin+0xac>)
 8005a3a:	4281      	cmp	r1, r0
 8005a3c:	dd09      	ble.n	8005a52 <sin+0x3a>
 8005a3e:	ee10 0a10 	vmov	r0, s0
 8005a42:	4619      	mov	r1, r3
 8005a44:	f7fa fbcc 	bl	80001e0 <__aeabi_dsub>
 8005a48:	ec41 0b10 	vmov	d0, r0, r1
 8005a4c:	b005      	add	sp, #20
 8005a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a52:	4668      	mov	r0, sp
 8005a54:	f000 f9c0 	bl	8005dd8 <__ieee754_rem_pio2>
 8005a58:	f000 0003 	and.w	r0, r0, #3
 8005a5c:	2801      	cmp	r0, #1
 8005a5e:	d00c      	beq.n	8005a7a <sin+0x62>
 8005a60:	2802      	cmp	r0, #2
 8005a62:	d011      	beq.n	8005a88 <sin+0x70>
 8005a64:	b9f0      	cbnz	r0, 8005aa4 <sin+0x8c>
 8005a66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a6a:	ed9d 0b00 	vldr	d0, [sp]
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f000 f8f2 	bl	8005c58 <__kernel_sin>
 8005a74:	ec51 0b10 	vmov	r0, r1, d0
 8005a78:	e7e6      	b.n	8005a48 <sin+0x30>
 8005a7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a7e:	ed9d 0b00 	vldr	d0, [sp]
 8005a82:	f000 f821 	bl	8005ac8 <__kernel_cos>
 8005a86:	e7f5      	b.n	8005a74 <sin+0x5c>
 8005a88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a8c:	ed9d 0b00 	vldr	d0, [sp]
 8005a90:	2001      	movs	r0, #1
 8005a92:	f000 f8e1 	bl	8005c58 <__kernel_sin>
 8005a96:	ec53 2b10 	vmov	r2, r3, d0
 8005a9a:	ee10 0a10 	vmov	r0, s0
 8005a9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005aa2:	e7d1      	b.n	8005a48 <sin+0x30>
 8005aa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005aa8:	ed9d 0b00 	vldr	d0, [sp]
 8005aac:	f000 f80c 	bl	8005ac8 <__kernel_cos>
 8005ab0:	e7f1      	b.n	8005a96 <sin+0x7e>
 8005ab2:	bf00      	nop
 8005ab4:	f3af 8000 	nop.w
	...
 8005ac0:	3fe921fb 	.word	0x3fe921fb
 8005ac4:	7fefffff 	.word	0x7fefffff

08005ac8 <__kernel_cos>:
 8005ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	ec57 6b10 	vmov	r6, r7, d0
 8005ad0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ad4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005ad8:	ed8d 1b00 	vstr	d1, [sp]
 8005adc:	da07      	bge.n	8005aee <__kernel_cos+0x26>
 8005ade:	ee10 0a10 	vmov	r0, s0
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	f7fa ffce 	bl	8000a84 <__aeabi_d2iz>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	f000 8088 	beq.w	8005bfe <__kernel_cos+0x136>
 8005aee:	4632      	mov	r2, r6
 8005af0:	463b      	mov	r3, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	4639      	mov	r1, r7
 8005af6:	f7fa fd2b 	bl	8000550 <__aeabi_dmul>
 8005afa:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <__kernel_cos+0x178>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	4604      	mov	r4, r0
 8005b00:	460d      	mov	r5, r1
 8005b02:	f7fa fd25 	bl	8000550 <__aeabi_dmul>
 8005b06:	a340      	add	r3, pc, #256	; (adr r3, 8005c08 <__kernel_cos+0x140>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	4682      	mov	sl, r0
 8005b0e:	468b      	mov	fp, r1
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	f7fa fd1c 	bl	8000550 <__aeabi_dmul>
 8005b18:	a33d      	add	r3, pc, #244	; (adr r3, 8005c10 <__kernel_cos+0x148>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fb61 	bl	80001e4 <__adddf3>
 8005b22:	4622      	mov	r2, r4
 8005b24:	462b      	mov	r3, r5
 8005b26:	f7fa fd13 	bl	8000550 <__aeabi_dmul>
 8005b2a:	a33b      	add	r3, pc, #236	; (adr r3, 8005c18 <__kernel_cos+0x150>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f7fa fb56 	bl	80001e0 <__aeabi_dsub>
 8005b34:	4622      	mov	r2, r4
 8005b36:	462b      	mov	r3, r5
 8005b38:	f7fa fd0a 	bl	8000550 <__aeabi_dmul>
 8005b3c:	a338      	add	r3, pc, #224	; (adr r3, 8005c20 <__kernel_cos+0x158>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f7fa fb4f 	bl	80001e4 <__adddf3>
 8005b46:	4622      	mov	r2, r4
 8005b48:	462b      	mov	r3, r5
 8005b4a:	f7fa fd01 	bl	8000550 <__aeabi_dmul>
 8005b4e:	a336      	add	r3, pc, #216	; (adr r3, 8005c28 <__kernel_cos+0x160>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa fb44 	bl	80001e0 <__aeabi_dsub>
 8005b58:	4622      	mov	r2, r4
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	f7fa fcf8 	bl	8000550 <__aeabi_dmul>
 8005b60:	a333      	add	r3, pc, #204	; (adr r3, 8005c30 <__kernel_cos+0x168>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fb3d 	bl	80001e4 <__adddf3>
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	f7fa fcef 	bl	8000550 <__aeabi_dmul>
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	f7fa fceb 	bl	8000550 <__aeabi_dmul>
 8005b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	4630      	mov	r0, r6
 8005b84:	4639      	mov	r1, r7
 8005b86:	f7fa fce3 	bl	8000550 <__aeabi_dmul>
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4620      	mov	r0, r4
 8005b92:	f7fa fb25 	bl	80001e0 <__aeabi_dsub>
 8005b96:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <__kernel_cos+0x17c>)
 8005b98:	4598      	cmp	r8, r3
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	460f      	mov	r7, r1
 8005b9e:	dc10      	bgt.n	8005bc2 <__kernel_cos+0xfa>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	f7fa fb1a 	bl	80001e0 <__aeabi_dsub>
 8005bac:	460b      	mov	r3, r1
 8005bae:	4926      	ldr	r1, [pc, #152]	; (8005c48 <__kernel_cos+0x180>)
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	f7fa fb14 	bl	80001e0 <__aeabi_dsub>
 8005bb8:	ec41 0b10 	vmov	d0, r0, r1
 8005bbc:	b003      	add	sp, #12
 8005bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <__kernel_cos+0x184>)
 8005bc4:	4920      	ldr	r1, [pc, #128]	; (8005c48 <__kernel_cos+0x180>)
 8005bc6:	4598      	cmp	r8, r3
 8005bc8:	bfcc      	ite	gt
 8005bca:	4d21      	ldrgt	r5, [pc, #132]	; (8005c50 <__kernel_cos+0x188>)
 8005bcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005bd0:	2400      	movs	r4, #0
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f7fa fb02 	bl	80001e0 <__aeabi_dsub>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4680      	mov	r8, r0
 8005be0:	4689      	mov	r9, r1
 8005be2:	462b      	mov	r3, r5
 8005be4:	4650      	mov	r0, sl
 8005be6:	4659      	mov	r1, fp
 8005be8:	f7fa fafa 	bl	80001e0 <__aeabi_dsub>
 8005bec:	4632      	mov	r2, r6
 8005bee:	463b      	mov	r3, r7
 8005bf0:	f7fa faf6 	bl	80001e0 <__aeabi_dsub>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	e7da      	b.n	8005bb4 <__kernel_cos+0xec>
 8005bfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005c38 <__kernel_cos+0x170>
 8005c02:	e7db      	b.n	8005bbc <__kernel_cos+0xf4>
 8005c04:	f3af 8000 	nop.w
 8005c08:	be8838d4 	.word	0xbe8838d4
 8005c0c:	bda8fae9 	.word	0xbda8fae9
 8005c10:	bdb4b1c4 	.word	0xbdb4b1c4
 8005c14:	3e21ee9e 	.word	0x3e21ee9e
 8005c18:	809c52ad 	.word	0x809c52ad
 8005c1c:	3e927e4f 	.word	0x3e927e4f
 8005c20:	19cb1590 	.word	0x19cb1590
 8005c24:	3efa01a0 	.word	0x3efa01a0
 8005c28:	16c15177 	.word	0x16c15177
 8005c2c:	3f56c16c 	.word	0x3f56c16c
 8005c30:	5555554c 	.word	0x5555554c
 8005c34:	3fa55555 	.word	0x3fa55555
 8005c38:	00000000 	.word	0x00000000
 8005c3c:	3ff00000 	.word	0x3ff00000
 8005c40:	3fe00000 	.word	0x3fe00000
 8005c44:	3fd33332 	.word	0x3fd33332
 8005c48:	3ff00000 	.word	0x3ff00000
 8005c4c:	3fe90000 	.word	0x3fe90000
 8005c50:	3fd20000 	.word	0x3fd20000
 8005c54:	00000000 	.word	0x00000000

08005c58 <__kernel_sin>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	ed2d 8b04 	vpush	{d8-d9}
 8005c60:	eeb0 8a41 	vmov.f32	s16, s2
 8005c64:	eef0 8a61 	vmov.f32	s17, s3
 8005c68:	ec55 4b10 	vmov	r4, r5, d0
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005c76:	9001      	str	r0, [sp, #4]
 8005c78:	da06      	bge.n	8005c88 <__kernel_sin+0x30>
 8005c7a:	ee10 0a10 	vmov	r0, s0
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa ff00 	bl	8000a84 <__aeabi_d2iz>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d051      	beq.n	8005d2c <__kernel_sin+0xd4>
 8005c88:	4622      	mov	r2, r4
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fc5e 	bl	8000550 <__aeabi_dmul>
 8005c94:	4682      	mov	sl, r0
 8005c96:	468b      	mov	fp, r1
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7fa fc56 	bl	8000550 <__aeabi_dmul>
 8005ca4:	a341      	add	r3, pc, #260	; (adr r3, 8005dac <__kernel_sin+0x154>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	4680      	mov	r8, r0
 8005cac:	4689      	mov	r9, r1
 8005cae:	4650      	mov	r0, sl
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	f7fa fc4d 	bl	8000550 <__aeabi_dmul>
 8005cb6:	a33f      	add	r3, pc, #252	; (adr r3, 8005db4 <__kernel_sin+0x15c>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa fa90 	bl	80001e0 <__aeabi_dsub>
 8005cc0:	4652      	mov	r2, sl
 8005cc2:	465b      	mov	r3, fp
 8005cc4:	f7fa fc44 	bl	8000550 <__aeabi_dmul>
 8005cc8:	a33c      	add	r3, pc, #240	; (adr r3, 8005dbc <__kernel_sin+0x164>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fa89 	bl	80001e4 <__adddf3>
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	f7fa fc3b 	bl	8000550 <__aeabi_dmul>
 8005cda:	a33a      	add	r3, pc, #232	; (adr r3, 8005dc4 <__kernel_sin+0x16c>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fa7e 	bl	80001e0 <__aeabi_dsub>
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	465b      	mov	r3, fp
 8005ce8:	f7fa fc32 	bl	8000550 <__aeabi_dmul>
 8005cec:	a337      	add	r3, pc, #220	; (adr r3, 8005dcc <__kernel_sin+0x174>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa fa77 	bl	80001e4 <__adddf3>
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	460f      	mov	r7, r1
 8005cfc:	b9eb      	cbnz	r3, 8005d3a <__kernel_sin+0xe2>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4650      	mov	r0, sl
 8005d04:	4659      	mov	r1, fp
 8005d06:	f7fa fc23 	bl	8000550 <__aeabi_dmul>
 8005d0a:	a325      	add	r3, pc, #148	; (adr r3, 8005da0 <__kernel_sin+0x148>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fa66 	bl	80001e0 <__aeabi_dsub>
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	f7fa fc1a 	bl	8000550 <__aeabi_dmul>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fa5e 	bl	80001e4 <__adddf3>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	ec45 4b10 	vmov	d0, r4, r5
 8005d30:	b003      	add	sp, #12
 8005d32:	ecbd 8b04 	vpop	{d8-d9}
 8005d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <__kernel_sin+0x150>)
 8005d3c:	ec51 0b18 	vmov	r0, r1, d8
 8005d40:	2200      	movs	r2, #0
 8005d42:	f7fa fc05 	bl	8000550 <__aeabi_dmul>
 8005d46:	4632      	mov	r2, r6
 8005d48:	ec41 0b19 	vmov	d9, r0, r1
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	4640      	mov	r0, r8
 8005d50:	4649      	mov	r1, r9
 8005d52:	f7fa fbfd 	bl	8000550 <__aeabi_dmul>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	ec51 0b19 	vmov	r0, r1, d9
 8005d5e:	f7fa fa3f 	bl	80001e0 <__aeabi_dsub>
 8005d62:	4652      	mov	r2, sl
 8005d64:	465b      	mov	r3, fp
 8005d66:	f7fa fbf3 	bl	8000550 <__aeabi_dmul>
 8005d6a:	ec53 2b18 	vmov	r2, r3, d8
 8005d6e:	f7fa fa37 	bl	80001e0 <__aeabi_dsub>
 8005d72:	a30b      	add	r3, pc, #44	; (adr r3, 8005da0 <__kernel_sin+0x148>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	4649      	mov	r1, r9
 8005d80:	f7fa fbe6 	bl	8000550 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4630      	mov	r0, r6
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	f7fa fa2a 	bl	80001e4 <__adddf3>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4620      	mov	r0, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	f7fa fa22 	bl	80001e0 <__aeabi_dsub>
 8005d9c:	e7c4      	b.n	8005d28 <__kernel_sin+0xd0>
 8005d9e:	bf00      	nop
 8005da0:	55555549 	.word	0x55555549
 8005da4:	3fc55555 	.word	0x3fc55555
 8005da8:	3fe00000 	.word	0x3fe00000
 8005dac:	5acfd57c 	.word	0x5acfd57c
 8005db0:	3de5d93a 	.word	0x3de5d93a
 8005db4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005db8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005dbc:	57b1fe7d 	.word	0x57b1fe7d
 8005dc0:	3ec71de3 	.word	0x3ec71de3
 8005dc4:	19c161d5 	.word	0x19c161d5
 8005dc8:	3f2a01a0 	.word	0x3f2a01a0
 8005dcc:	1110f8a6 	.word	0x1110f8a6
 8005dd0:	3f811111 	.word	0x3f811111
 8005dd4:	00000000 	.word	0x00000000

08005dd8 <__ieee754_rem_pio2>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	ed2d 8b02 	vpush	{d8}
 8005de0:	ec55 4b10 	vmov	r4, r5, d0
 8005de4:	4bca      	ldr	r3, [pc, #808]	; (8006110 <__ieee754_rem_pio2+0x338>)
 8005de6:	b08b      	sub	sp, #44	; 0x2c
 8005de8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005dec:	4598      	cmp	r8, r3
 8005dee:	4682      	mov	sl, r0
 8005df0:	9502      	str	r5, [sp, #8]
 8005df2:	dc08      	bgt.n	8005e06 <__ieee754_rem_pio2+0x2e>
 8005df4:	2200      	movs	r2, #0
 8005df6:	2300      	movs	r3, #0
 8005df8:	ed80 0b00 	vstr	d0, [r0]
 8005dfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005e00:	f04f 0b00 	mov.w	fp, #0
 8005e04:	e028      	b.n	8005e58 <__ieee754_rem_pio2+0x80>
 8005e06:	4bc3      	ldr	r3, [pc, #780]	; (8006114 <__ieee754_rem_pio2+0x33c>)
 8005e08:	4598      	cmp	r8, r3
 8005e0a:	dc78      	bgt.n	8005efe <__ieee754_rem_pio2+0x126>
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	4ec2      	ldr	r6, [pc, #776]	; (8006118 <__ieee754_rem_pio2+0x340>)
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	ee10 0a10 	vmov	r0, s0
 8005e16:	a3b0      	add	r3, pc, #704	; (adr r3, 80060d8 <__ieee754_rem_pio2+0x300>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	dd39      	ble.n	8005e94 <__ieee754_rem_pio2+0xbc>
 8005e20:	f7fa f9de 	bl	80001e0 <__aeabi_dsub>
 8005e24:	45b0      	cmp	r8, r6
 8005e26:	4604      	mov	r4, r0
 8005e28:	460d      	mov	r5, r1
 8005e2a:	d01b      	beq.n	8005e64 <__ieee754_rem_pio2+0x8c>
 8005e2c:	a3ac      	add	r3, pc, #688	; (adr r3, 80060e0 <__ieee754_rem_pio2+0x308>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa f9d5 	bl	80001e0 <__aeabi_dsub>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	e9ca 2300 	strd	r2, r3, [sl]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa f9cd 	bl	80001e0 <__aeabi_dsub>
 8005e46:	a3a6      	add	r3, pc, #664	; (adr r3, 80060e0 <__ieee754_rem_pio2+0x308>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa f9c8 	bl	80001e0 <__aeabi_dsub>
 8005e50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e54:	f04f 0b01 	mov.w	fp, #1
 8005e58:	4658      	mov	r0, fp
 8005e5a:	b00b      	add	sp, #44	; 0x2c
 8005e5c:	ecbd 8b02 	vpop	{d8}
 8005e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e64:	a3a0      	add	r3, pc, #640	; (adr r3, 80060e8 <__ieee754_rem_pio2+0x310>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa f9b9 	bl	80001e0 <__aeabi_dsub>
 8005e6e:	a3a0      	add	r3, pc, #640	; (adr r3, 80060f0 <__ieee754_rem_pio2+0x318>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	4604      	mov	r4, r0
 8005e76:	460d      	mov	r5, r1
 8005e78:	f7fa f9b2 	bl	80001e0 <__aeabi_dsub>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	e9ca 2300 	strd	r2, r3, [sl]
 8005e84:	4620      	mov	r0, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	f7fa f9aa 	bl	80001e0 <__aeabi_dsub>
 8005e8c:	a398      	add	r3, pc, #608	; (adr r3, 80060f0 <__ieee754_rem_pio2+0x318>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	e7db      	b.n	8005e4c <__ieee754_rem_pio2+0x74>
 8005e94:	f7fa f9a6 	bl	80001e4 <__adddf3>
 8005e98:	45b0      	cmp	r8, r6
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	d016      	beq.n	8005ece <__ieee754_rem_pio2+0xf6>
 8005ea0:	a38f      	add	r3, pc, #572	; (adr r3, 80060e0 <__ieee754_rem_pio2+0x308>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f99d 	bl	80001e4 <__adddf3>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	e9ca 2300 	strd	r2, r3, [sl]
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f7fa f993 	bl	80001e0 <__aeabi_dsub>
 8005eba:	a389      	add	r3, pc, #548	; (adr r3, 80060e0 <__ieee754_rem_pio2+0x308>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa f990 	bl	80001e4 <__adddf3>
 8005ec4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ecc:	e7c4      	b.n	8005e58 <__ieee754_rem_pio2+0x80>
 8005ece:	a386      	add	r3, pc, #536	; (adr r3, 80060e8 <__ieee754_rem_pio2+0x310>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f7fa f986 	bl	80001e4 <__adddf3>
 8005ed8:	a385      	add	r3, pc, #532	; (adr r3, 80060f0 <__ieee754_rem_pio2+0x318>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	f7fa f97f 	bl	80001e4 <__adddf3>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	e9ca 2300 	strd	r2, r3, [sl]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa f975 	bl	80001e0 <__aeabi_dsub>
 8005ef6:	a37e      	add	r3, pc, #504	; (adr r3, 80060f0 <__ieee754_rem_pio2+0x318>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	e7e0      	b.n	8005ec0 <__ieee754_rem_pio2+0xe8>
 8005efe:	4b87      	ldr	r3, [pc, #540]	; (800611c <__ieee754_rem_pio2+0x344>)
 8005f00:	4598      	cmp	r8, r3
 8005f02:	f300 80d8 	bgt.w	80060b6 <__ieee754_rem_pio2+0x2de>
 8005f06:	f000 f96d 	bl	80061e4 <fabs>
 8005f0a:	ec55 4b10 	vmov	r4, r5, d0
 8005f0e:	ee10 0a10 	vmov	r0, s0
 8005f12:	a379      	add	r3, pc, #484	; (adr r3, 80060f8 <__ieee754_rem_pio2+0x320>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f7fa fb19 	bl	8000550 <__aeabi_dmul>
 8005f1e:	4b80      	ldr	r3, [pc, #512]	; (8006120 <__ieee754_rem_pio2+0x348>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	f7fa f95f 	bl	80001e4 <__adddf3>
 8005f26:	f7fa fdad 	bl	8000a84 <__aeabi_d2iz>
 8005f2a:	4683      	mov	fp, r0
 8005f2c:	f7fa faa6 	bl	800047c <__aeabi_i2d>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	ec43 2b18 	vmov	d8, r2, r3
 8005f38:	a367      	add	r3, pc, #412	; (adr r3, 80060d8 <__ieee754_rem_pio2+0x300>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa fb07 	bl	8000550 <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4620      	mov	r0, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f7fa f949 	bl	80001e0 <__aeabi_dsub>
 8005f4e:	a364      	add	r3, pc, #400	; (adr r3, 80060e0 <__ieee754_rem_pio2+0x308>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	4606      	mov	r6, r0
 8005f56:	460f      	mov	r7, r1
 8005f58:	ec51 0b18 	vmov	r0, r1, d8
 8005f5c:	f7fa faf8 	bl	8000550 <__aeabi_dmul>
 8005f60:	f1bb 0f1f 	cmp.w	fp, #31
 8005f64:	4604      	mov	r4, r0
 8005f66:	460d      	mov	r5, r1
 8005f68:	dc0d      	bgt.n	8005f86 <__ieee754_rem_pio2+0x1ae>
 8005f6a:	4b6e      	ldr	r3, [pc, #440]	; (8006124 <__ieee754_rem_pio2+0x34c>)
 8005f6c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	4543      	cmp	r3, r8
 8005f76:	d006      	beq.n	8005f86 <__ieee754_rem_pio2+0x1ae>
 8005f78:	4622      	mov	r2, r4
 8005f7a:	462b      	mov	r3, r5
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa f92e 	bl	80001e0 <__aeabi_dsub>
 8005f84:	e00e      	b.n	8005fa4 <__ieee754_rem_pio2+0x1cc>
 8005f86:	462b      	mov	r3, r5
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	f7fa f927 	bl	80001e0 <__aeabi_dsub>
 8005f92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005f96:	9303      	str	r3, [sp, #12]
 8005f98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f9c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	dc02      	bgt.n	8005faa <__ieee754_rem_pio2+0x1d2>
 8005fa4:	e9ca 0100 	strd	r0, r1, [sl]
 8005fa8:	e039      	b.n	800601e <__ieee754_rem_pio2+0x246>
 8005faa:	a34f      	add	r3, pc, #316	; (adr r3, 80060e8 <__ieee754_rem_pio2+0x310>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	ec51 0b18 	vmov	r0, r1, d8
 8005fb4:	f7fa facc 	bl	8000550 <__aeabi_dmul>
 8005fb8:	4604      	mov	r4, r0
 8005fba:	460d      	mov	r5, r1
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa f90c 	bl	80001e0 <__aeabi_dsub>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4680      	mov	r8, r0
 8005fce:	4689      	mov	r9, r1
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa f904 	bl	80001e0 <__aeabi_dsub>
 8005fd8:	4622      	mov	r2, r4
 8005fda:	462b      	mov	r3, r5
 8005fdc:	f7fa f900 	bl	80001e0 <__aeabi_dsub>
 8005fe0:	a343      	add	r3, pc, #268	; (adr r3, 80060f0 <__ieee754_rem_pio2+0x318>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	460d      	mov	r5, r1
 8005fea:	ec51 0b18 	vmov	r0, r1, d8
 8005fee:	f7fa faaf 	bl	8000550 <__aeabi_dmul>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	f7fa f8f3 	bl	80001e0 <__aeabi_dsub>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	4640      	mov	r0, r8
 8006004:	4649      	mov	r1, r9
 8006006:	f7fa f8eb 	bl	80001e0 <__aeabi_dsub>
 800600a:	9a03      	ldr	r2, [sp, #12]
 800600c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b31      	cmp	r3, #49	; 0x31
 8006014:	dc24      	bgt.n	8006060 <__ieee754_rem_pio2+0x288>
 8006016:	e9ca 0100 	strd	r0, r1, [sl]
 800601a:	4646      	mov	r6, r8
 800601c:	464f      	mov	r7, r9
 800601e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006022:	4630      	mov	r0, r6
 8006024:	4642      	mov	r2, r8
 8006026:	464b      	mov	r3, r9
 8006028:	4639      	mov	r1, r7
 800602a:	f7fa f8d9 	bl	80001e0 <__aeabi_dsub>
 800602e:	462b      	mov	r3, r5
 8006030:	4622      	mov	r2, r4
 8006032:	f7fa f8d5 	bl	80001e0 <__aeabi_dsub>
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800603e:	f6bf af0b 	bge.w	8005e58 <__ieee754_rem_pio2+0x80>
 8006042:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006046:	f8ca 3004 	str.w	r3, [sl, #4]
 800604a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800604e:	f8ca 8000 	str.w	r8, [sl]
 8006052:	f8ca 0008 	str.w	r0, [sl, #8]
 8006056:	f8ca 300c 	str.w	r3, [sl, #12]
 800605a:	f1cb 0b00 	rsb	fp, fp, #0
 800605e:	e6fb      	b.n	8005e58 <__ieee754_rem_pio2+0x80>
 8006060:	a327      	add	r3, pc, #156	; (adr r3, 8006100 <__ieee754_rem_pio2+0x328>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	ec51 0b18 	vmov	r0, r1, d8
 800606a:	f7fa fa71 	bl	8000550 <__aeabi_dmul>
 800606e:	4604      	mov	r4, r0
 8006070:	460d      	mov	r5, r1
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa f8b1 	bl	80001e0 <__aeabi_dsub>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4606      	mov	r6, r0
 8006084:	460f      	mov	r7, r1
 8006086:	4640      	mov	r0, r8
 8006088:	4649      	mov	r1, r9
 800608a:	f7fa f8a9 	bl	80001e0 <__aeabi_dsub>
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f7fa f8a5 	bl	80001e0 <__aeabi_dsub>
 8006096:	a31c      	add	r3, pc, #112	; (adr r3, 8006108 <__ieee754_rem_pio2+0x330>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	4604      	mov	r4, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	ec51 0b18 	vmov	r0, r1, d8
 80060a4:	f7fa fa54 	bl	8000550 <__aeabi_dmul>
 80060a8:	4622      	mov	r2, r4
 80060aa:	462b      	mov	r3, r5
 80060ac:	f7fa f898 	bl	80001e0 <__aeabi_dsub>
 80060b0:	4604      	mov	r4, r0
 80060b2:	460d      	mov	r5, r1
 80060b4:	e760      	b.n	8005f78 <__ieee754_rem_pio2+0x1a0>
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <__ieee754_rem_pio2+0x350>)
 80060b8:	4598      	cmp	r8, r3
 80060ba:	dd37      	ble.n	800612c <__ieee754_rem_pio2+0x354>
 80060bc:	ee10 2a10 	vmov	r2, s0
 80060c0:	462b      	mov	r3, r5
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f7fa f88b 	bl	80001e0 <__aeabi_dsub>
 80060ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80060ce:	e9ca 0100 	strd	r0, r1, [sl]
 80060d2:	e695      	b.n	8005e00 <__ieee754_rem_pio2+0x28>
 80060d4:	f3af 8000 	nop.w
 80060d8:	54400000 	.word	0x54400000
 80060dc:	3ff921fb 	.word	0x3ff921fb
 80060e0:	1a626331 	.word	0x1a626331
 80060e4:	3dd0b461 	.word	0x3dd0b461
 80060e8:	1a600000 	.word	0x1a600000
 80060ec:	3dd0b461 	.word	0x3dd0b461
 80060f0:	2e037073 	.word	0x2e037073
 80060f4:	3ba3198a 	.word	0x3ba3198a
 80060f8:	6dc9c883 	.word	0x6dc9c883
 80060fc:	3fe45f30 	.word	0x3fe45f30
 8006100:	2e000000 	.word	0x2e000000
 8006104:	3ba3198a 	.word	0x3ba3198a
 8006108:	252049c1 	.word	0x252049c1
 800610c:	397b839a 	.word	0x397b839a
 8006110:	3fe921fb 	.word	0x3fe921fb
 8006114:	4002d97b 	.word	0x4002d97b
 8006118:	3ff921fb 	.word	0x3ff921fb
 800611c:	413921fb 	.word	0x413921fb
 8006120:	3fe00000 	.word	0x3fe00000
 8006124:	08006ac8 	.word	0x08006ac8
 8006128:	7fefffff 	.word	0x7fefffff
 800612c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006130:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006134:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006138:	4620      	mov	r0, r4
 800613a:	460d      	mov	r5, r1
 800613c:	f7fa fca2 	bl	8000a84 <__aeabi_d2iz>
 8006140:	f7fa f99c 	bl	800047c <__aeabi_i2d>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4620      	mov	r0, r4
 800614a:	4629      	mov	r1, r5
 800614c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006150:	f7fa f846 	bl	80001e0 <__aeabi_dsub>
 8006154:	4b21      	ldr	r3, [pc, #132]	; (80061dc <__ieee754_rem_pio2+0x404>)
 8006156:	2200      	movs	r2, #0
 8006158:	f7fa f9fa 	bl	8000550 <__aeabi_dmul>
 800615c:	460d      	mov	r5, r1
 800615e:	4604      	mov	r4, r0
 8006160:	f7fa fc90 	bl	8000a84 <__aeabi_d2iz>
 8006164:	f7fa f98a 	bl	800047c <__aeabi_i2d>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006174:	f7fa f834 	bl	80001e0 <__aeabi_dsub>
 8006178:	4b18      	ldr	r3, [pc, #96]	; (80061dc <__ieee754_rem_pio2+0x404>)
 800617a:	2200      	movs	r2, #0
 800617c:	f7fa f9e8 	bl	8000550 <__aeabi_dmul>
 8006180:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006184:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006188:	2703      	movs	r7, #3
 800618a:	2400      	movs	r4, #0
 800618c:	2500      	movs	r5, #0
 800618e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006192:	4622      	mov	r2, r4
 8006194:	462b      	mov	r3, r5
 8006196:	46b9      	mov	r9, r7
 8006198:	3f01      	subs	r7, #1
 800619a:	f7fa fc41 	bl	8000a20 <__aeabi_dcmpeq>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d1f5      	bne.n	800618e <__ieee754_rem_pio2+0x3b6>
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <__ieee754_rem_pio2+0x408>)
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	2302      	movs	r3, #2
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4632      	mov	r2, r6
 80061ac:	464b      	mov	r3, r9
 80061ae:	4651      	mov	r1, sl
 80061b0:	a804      	add	r0, sp, #16
 80061b2:	f000 f821 	bl	80061f8 <__kernel_rem_pio2>
 80061b6:	9b02      	ldr	r3, [sp, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	4683      	mov	fp, r0
 80061bc:	f6bf ae4c 	bge.w	8005e58 <__ieee754_rem_pio2+0x80>
 80061c0:	e9da 2100 	ldrd	r2, r1, [sl]
 80061c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061c8:	e9ca 2300 	strd	r2, r3, [sl]
 80061cc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80061d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061d4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80061d8:	e73f      	b.n	800605a <__ieee754_rem_pio2+0x282>
 80061da:	bf00      	nop
 80061dc:	41700000 	.word	0x41700000
 80061e0:	08006b48 	.word	0x08006b48

080061e4 <fabs>:
 80061e4:	ec51 0b10 	vmov	r0, r1, d0
 80061e8:	ee10 2a10 	vmov	r2, s0
 80061ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061f0:	ec43 2b10 	vmov	d0, r2, r3
 80061f4:	4770      	bx	lr
	...

080061f8 <__kernel_rem_pio2>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	ed2d 8b02 	vpush	{d8}
 8006200:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006204:	f112 0f14 	cmn.w	r2, #20
 8006208:	9306      	str	r3, [sp, #24]
 800620a:	9104      	str	r1, [sp, #16]
 800620c:	4bc2      	ldr	r3, [pc, #776]	; (8006518 <__kernel_rem_pio2+0x320>)
 800620e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006210:	9009      	str	r0, [sp, #36]	; 0x24
 8006212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	9b06      	ldr	r3, [sp, #24]
 800621a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800621e:	bfa8      	it	ge
 8006220:	1ed4      	subge	r4, r2, #3
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	bfb2      	itee	lt
 8006226:	2400      	movlt	r4, #0
 8006228:	2318      	movge	r3, #24
 800622a:	fb94 f4f3 	sdivge	r4, r4, r3
 800622e:	f06f 0317 	mvn.w	r3, #23
 8006232:	fb04 3303 	mla	r3, r4, r3, r3
 8006236:	eb03 0a02 	add.w	sl, r3, r2
 800623a:	9b00      	ldr	r3, [sp, #0]
 800623c:	9a05      	ldr	r2, [sp, #20]
 800623e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006508 <__kernel_rem_pio2+0x310>
 8006242:	eb03 0802 	add.w	r8, r3, r2
 8006246:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006248:	1aa7      	subs	r7, r4, r2
 800624a:	ae20      	add	r6, sp, #128	; 0x80
 800624c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006250:	2500      	movs	r5, #0
 8006252:	4545      	cmp	r5, r8
 8006254:	dd13      	ble.n	800627e <__kernel_rem_pio2+0x86>
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	aa20      	add	r2, sp, #128	; 0x80
 800625a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800625e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	9b00      	ldr	r3, [sp, #0]
 8006268:	4598      	cmp	r8, r3
 800626a:	dc31      	bgt.n	80062d0 <__kernel_rem_pio2+0xd8>
 800626c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006508 <__kernel_rem_pio2+0x310>
 8006270:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006274:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006278:	462f      	mov	r7, r5
 800627a:	2600      	movs	r6, #0
 800627c:	e01b      	b.n	80062b6 <__kernel_rem_pio2+0xbe>
 800627e:	42ef      	cmn	r7, r5
 8006280:	d407      	bmi.n	8006292 <__kernel_rem_pio2+0x9a>
 8006282:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006286:	f7fa f8f9 	bl	800047c <__aeabi_i2d>
 800628a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800628e:	3501      	adds	r5, #1
 8006290:	e7df      	b.n	8006252 <__kernel_rem_pio2+0x5a>
 8006292:	ec51 0b18 	vmov	r0, r1, d8
 8006296:	e7f8      	b.n	800628a <__kernel_rem_pio2+0x92>
 8006298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80062a0:	f7fa f956 	bl	8000550 <__aeabi_dmul>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ac:	f7f9 ff9a 	bl	80001e4 <__adddf3>
 80062b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b4:	3601      	adds	r6, #1
 80062b6:	9b05      	ldr	r3, [sp, #20]
 80062b8:	429e      	cmp	r6, r3
 80062ba:	f1a7 0708 	sub.w	r7, r7, #8
 80062be:	ddeb      	ble.n	8006298 <__kernel_rem_pio2+0xa0>
 80062c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062c4:	f108 0801 	add.w	r8, r8, #1
 80062c8:	ecab 7b02 	vstmia	fp!, {d7}
 80062cc:	3508      	adds	r5, #8
 80062ce:	e7ca      	b.n	8006266 <__kernel_rem_pio2+0x6e>
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	aa0c      	add	r2, sp, #48	; 0x30
 80062d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80062da:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80062dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80062e0:	9c00      	ldr	r4, [sp, #0]
 80062e2:	930a      	str	r3, [sp, #40]	; 0x28
 80062e4:	00e3      	lsls	r3, r4, #3
 80062e6:	9308      	str	r3, [sp, #32]
 80062e8:	ab98      	add	r3, sp, #608	; 0x260
 80062ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80062f2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80062f6:	ab70      	add	r3, sp, #448	; 0x1c0
 80062f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80062fc:	46c3      	mov	fp, r8
 80062fe:	46a1      	mov	r9, r4
 8006300:	f1b9 0f00 	cmp.w	r9, #0
 8006304:	f1a5 0508 	sub.w	r5, r5, #8
 8006308:	dc77      	bgt.n	80063fa <__kernel_rem_pio2+0x202>
 800630a:	ec47 6b10 	vmov	d0, r6, r7
 800630e:	4650      	mov	r0, sl
 8006310:	f000 fac2 	bl	8006898 <scalbn>
 8006314:	ec57 6b10 	vmov	r6, r7, d0
 8006318:	2200      	movs	r2, #0
 800631a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800631e:	ee10 0a10 	vmov	r0, s0
 8006322:	4639      	mov	r1, r7
 8006324:	f7fa f914 	bl	8000550 <__aeabi_dmul>
 8006328:	ec41 0b10 	vmov	d0, r0, r1
 800632c:	f000 fb34 	bl	8006998 <floor>
 8006330:	4b7a      	ldr	r3, [pc, #488]	; (800651c <__kernel_rem_pio2+0x324>)
 8006332:	ec51 0b10 	vmov	r0, r1, d0
 8006336:	2200      	movs	r2, #0
 8006338:	f7fa f90a 	bl	8000550 <__aeabi_dmul>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4630      	mov	r0, r6
 8006342:	4639      	mov	r1, r7
 8006344:	f7f9 ff4c 	bl	80001e0 <__aeabi_dsub>
 8006348:	460f      	mov	r7, r1
 800634a:	4606      	mov	r6, r0
 800634c:	f7fa fb9a 	bl	8000a84 <__aeabi_d2iz>
 8006350:	9002      	str	r0, [sp, #8]
 8006352:	f7fa f893 	bl	800047c <__aeabi_i2d>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4630      	mov	r0, r6
 800635c:	4639      	mov	r1, r7
 800635e:	f7f9 ff3f 	bl	80001e0 <__aeabi_dsub>
 8006362:	f1ba 0f00 	cmp.w	sl, #0
 8006366:	4606      	mov	r6, r0
 8006368:	460f      	mov	r7, r1
 800636a:	dd6d      	ble.n	8006448 <__kernel_rem_pio2+0x250>
 800636c:	1e61      	subs	r1, r4, #1
 800636e:	ab0c      	add	r3, sp, #48	; 0x30
 8006370:	9d02      	ldr	r5, [sp, #8]
 8006372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006376:	f1ca 0018 	rsb	r0, sl, #24
 800637a:	fa43 f200 	asr.w	r2, r3, r0
 800637e:	4415      	add	r5, r2
 8006380:	4082      	lsls	r2, r0
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	aa0c      	add	r2, sp, #48	; 0x30
 8006386:	9502      	str	r5, [sp, #8]
 8006388:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800638c:	f1ca 0217 	rsb	r2, sl, #23
 8006390:	fa43 fb02 	asr.w	fp, r3, r2
 8006394:	f1bb 0f00 	cmp.w	fp, #0
 8006398:	dd65      	ble.n	8006466 <__kernel_rem_pio2+0x26e>
 800639a:	9b02      	ldr	r3, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	3301      	adds	r3, #1
 80063a0:	9302      	str	r3, [sp, #8]
 80063a2:	4615      	mov	r5, r2
 80063a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80063a8:	4294      	cmp	r4, r2
 80063aa:	f300 809f 	bgt.w	80064ec <__kernel_rem_pio2+0x2f4>
 80063ae:	f1ba 0f00 	cmp.w	sl, #0
 80063b2:	dd07      	ble.n	80063c4 <__kernel_rem_pio2+0x1cc>
 80063b4:	f1ba 0f01 	cmp.w	sl, #1
 80063b8:	f000 80c1 	beq.w	800653e <__kernel_rem_pio2+0x346>
 80063bc:	f1ba 0f02 	cmp.w	sl, #2
 80063c0:	f000 80c7 	beq.w	8006552 <__kernel_rem_pio2+0x35a>
 80063c4:	f1bb 0f02 	cmp.w	fp, #2
 80063c8:	d14d      	bne.n	8006466 <__kernel_rem_pio2+0x26e>
 80063ca:	4632      	mov	r2, r6
 80063cc:	463b      	mov	r3, r7
 80063ce:	4954      	ldr	r1, [pc, #336]	; (8006520 <__kernel_rem_pio2+0x328>)
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7f9 ff05 	bl	80001e0 <__aeabi_dsub>
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	2d00      	cmp	r5, #0
 80063dc:	d043      	beq.n	8006466 <__kernel_rem_pio2+0x26e>
 80063de:	4650      	mov	r0, sl
 80063e0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006510 <__kernel_rem_pio2+0x318>
 80063e4:	f000 fa58 	bl	8006898 <scalbn>
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	ec53 2b10 	vmov	r2, r3, d0
 80063f0:	f7f9 fef6 	bl	80001e0 <__aeabi_dsub>
 80063f4:	4606      	mov	r6, r0
 80063f6:	460f      	mov	r7, r1
 80063f8:	e035      	b.n	8006466 <__kernel_rem_pio2+0x26e>
 80063fa:	4b4a      	ldr	r3, [pc, #296]	; (8006524 <__kernel_rem_pio2+0x32c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7fa f8a5 	bl	8000550 <__aeabi_dmul>
 8006406:	f7fa fb3d 	bl	8000a84 <__aeabi_d2iz>
 800640a:	f7fa f837 	bl	800047c <__aeabi_i2d>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	ec43 2b18 	vmov	d8, r2, r3
 8006416:	4b44      	ldr	r3, [pc, #272]	; (8006528 <__kernel_rem_pio2+0x330>)
 8006418:	2200      	movs	r2, #0
 800641a:	f7fa f899 	bl	8000550 <__aeabi_dmul>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4630      	mov	r0, r6
 8006424:	4639      	mov	r1, r7
 8006426:	f7f9 fedb 	bl	80001e0 <__aeabi_dsub>
 800642a:	f7fa fb2b 	bl	8000a84 <__aeabi_d2iz>
 800642e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006432:	f84b 0b04 	str.w	r0, [fp], #4
 8006436:	ec51 0b18 	vmov	r0, r1, d8
 800643a:	f7f9 fed3 	bl	80001e4 <__adddf3>
 800643e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	e75b      	b.n	8006300 <__kernel_rem_pio2+0x108>
 8006448:	d106      	bne.n	8006458 <__kernel_rem_pio2+0x260>
 800644a:	1e63      	subs	r3, r4, #1
 800644c:	aa0c      	add	r2, sp, #48	; 0x30
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006456:	e79d      	b.n	8006394 <__kernel_rem_pio2+0x19c>
 8006458:	4b34      	ldr	r3, [pc, #208]	; (800652c <__kernel_rem_pio2+0x334>)
 800645a:	2200      	movs	r2, #0
 800645c:	f7fa fafe 	bl	8000a5c <__aeabi_dcmpge>
 8006460:	2800      	cmp	r0, #0
 8006462:	d140      	bne.n	80064e6 <__kernel_rem_pio2+0x2ee>
 8006464:	4683      	mov	fp, r0
 8006466:	2200      	movs	r2, #0
 8006468:	2300      	movs	r3, #0
 800646a:	4630      	mov	r0, r6
 800646c:	4639      	mov	r1, r7
 800646e:	f7fa fad7 	bl	8000a20 <__aeabi_dcmpeq>
 8006472:	2800      	cmp	r0, #0
 8006474:	f000 80c1 	beq.w	80065fa <__kernel_rem_pio2+0x402>
 8006478:	1e65      	subs	r5, r4, #1
 800647a:	462b      	mov	r3, r5
 800647c:	2200      	movs	r2, #0
 800647e:	9900      	ldr	r1, [sp, #0]
 8006480:	428b      	cmp	r3, r1
 8006482:	da6d      	bge.n	8006560 <__kernel_rem_pio2+0x368>
 8006484:	2a00      	cmp	r2, #0
 8006486:	f000 808a 	beq.w	800659e <__kernel_rem_pio2+0x3a6>
 800648a:	ab0c      	add	r3, sp, #48	; 0x30
 800648c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006490:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80ae 	beq.w	80065f6 <__kernel_rem_pio2+0x3fe>
 800649a:	4650      	mov	r0, sl
 800649c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006510 <__kernel_rem_pio2+0x318>
 80064a0:	f000 f9fa 	bl	8006898 <scalbn>
 80064a4:	1c6b      	adds	r3, r5, #1
 80064a6:	00da      	lsls	r2, r3, #3
 80064a8:	9205      	str	r2, [sp, #20]
 80064aa:	ec57 6b10 	vmov	r6, r7, d0
 80064ae:	aa70      	add	r2, sp, #448	; 0x1c0
 80064b0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006524 <__kernel_rem_pio2+0x32c>
 80064b4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80064b8:	462c      	mov	r4, r5
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	2c00      	cmp	r4, #0
 80064c0:	f280 80d4 	bge.w	800666c <__kernel_rem_pio2+0x474>
 80064c4:	462c      	mov	r4, r5
 80064c6:	2c00      	cmp	r4, #0
 80064c8:	f2c0 8102 	blt.w	80066d0 <__kernel_rem_pio2+0x4d8>
 80064cc:	4b18      	ldr	r3, [pc, #96]	; (8006530 <__kernel_rem_pio2+0x338>)
 80064ce:	461e      	mov	r6, r3
 80064d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80064d2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80064d6:	1b2b      	subs	r3, r5, r4
 80064d8:	f04f 0900 	mov.w	r9, #0
 80064dc:	f04f 0a00 	mov.w	sl, #0
 80064e0:	2700      	movs	r7, #0
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	e0e6      	b.n	80066b4 <__kernel_rem_pio2+0x4bc>
 80064e6:	f04f 0b02 	mov.w	fp, #2
 80064ea:	e756      	b.n	800639a <__kernel_rem_pio2+0x1a2>
 80064ec:	f8d8 3000 	ldr.w	r3, [r8]
 80064f0:	bb05      	cbnz	r5, 8006534 <__kernel_rem_pio2+0x33c>
 80064f2:	b123      	cbz	r3, 80064fe <__kernel_rem_pio2+0x306>
 80064f4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80064f8:	f8c8 3000 	str.w	r3, [r8]
 80064fc:	2301      	movs	r3, #1
 80064fe:	3201      	adds	r2, #1
 8006500:	f108 0804 	add.w	r8, r8, #4
 8006504:	461d      	mov	r5, r3
 8006506:	e74f      	b.n	80063a8 <__kernel_rem_pio2+0x1b0>
	...
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	08006c90 	.word	0x08006c90
 800651c:	40200000 	.word	0x40200000
 8006520:	3ff00000 	.word	0x3ff00000
 8006524:	3e700000 	.word	0x3e700000
 8006528:	41700000 	.word	0x41700000
 800652c:	3fe00000 	.word	0x3fe00000
 8006530:	08006c50 	.word	0x08006c50
 8006534:	1acb      	subs	r3, r1, r3
 8006536:	f8c8 3000 	str.w	r3, [r8]
 800653a:	462b      	mov	r3, r5
 800653c:	e7df      	b.n	80064fe <__kernel_rem_pio2+0x306>
 800653e:	1e62      	subs	r2, r4, #1
 8006540:	ab0c      	add	r3, sp, #48	; 0x30
 8006542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006546:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800654a:	a90c      	add	r1, sp, #48	; 0x30
 800654c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006550:	e738      	b.n	80063c4 <__kernel_rem_pio2+0x1cc>
 8006552:	1e62      	subs	r2, r4, #1
 8006554:	ab0c      	add	r3, sp, #48	; 0x30
 8006556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800655e:	e7f4      	b.n	800654a <__kernel_rem_pio2+0x352>
 8006560:	a90c      	add	r1, sp, #48	; 0x30
 8006562:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006566:	3b01      	subs	r3, #1
 8006568:	430a      	orrs	r2, r1
 800656a:	e788      	b.n	800647e <__kernel_rem_pio2+0x286>
 800656c:	3301      	adds	r3, #1
 800656e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006572:	2900      	cmp	r1, #0
 8006574:	d0fa      	beq.n	800656c <__kernel_rem_pio2+0x374>
 8006576:	9a08      	ldr	r2, [sp, #32]
 8006578:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800657c:	446a      	add	r2, sp
 800657e:	3a98      	subs	r2, #152	; 0x98
 8006580:	9208      	str	r2, [sp, #32]
 8006582:	9a06      	ldr	r2, [sp, #24]
 8006584:	a920      	add	r1, sp, #128	; 0x80
 8006586:	18a2      	adds	r2, r4, r2
 8006588:	18e3      	adds	r3, r4, r3
 800658a:	f104 0801 	add.w	r8, r4, #1
 800658e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	4543      	cmp	r3, r8
 8006598:	da04      	bge.n	80065a4 <__kernel_rem_pio2+0x3ac>
 800659a:	461c      	mov	r4, r3
 800659c:	e6a2      	b.n	80062e4 <__kernel_rem_pio2+0xec>
 800659e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065a0:	2301      	movs	r3, #1
 80065a2:	e7e4      	b.n	800656e <__kernel_rem_pio2+0x376>
 80065a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80065aa:	f7f9 ff67 	bl	800047c <__aeabi_i2d>
 80065ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 80065b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b4:	46ab      	mov	fp, r5
 80065b6:	461c      	mov	r4, r3
 80065b8:	f04f 0900 	mov.w	r9, #0
 80065bc:	2600      	movs	r6, #0
 80065be:	2700      	movs	r7, #0
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	4599      	cmp	r9, r3
 80065c4:	dd06      	ble.n	80065d4 <__kernel_rem_pio2+0x3dc>
 80065c6:	9b08      	ldr	r3, [sp, #32]
 80065c8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80065cc:	f108 0801 	add.w	r8, r8, #1
 80065d0:	9308      	str	r3, [sp, #32]
 80065d2:	e7df      	b.n	8006594 <__kernel_rem_pio2+0x39c>
 80065d4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80065d8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80065dc:	f7f9 ffb8 	bl	8000550 <__aeabi_dmul>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4630      	mov	r0, r6
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7f9 fdfc 	bl	80001e4 <__adddf3>
 80065ec:	f109 0901 	add.w	r9, r9, #1
 80065f0:	4606      	mov	r6, r0
 80065f2:	460f      	mov	r7, r1
 80065f4:	e7e4      	b.n	80065c0 <__kernel_rem_pio2+0x3c8>
 80065f6:	3d01      	subs	r5, #1
 80065f8:	e747      	b.n	800648a <__kernel_rem_pio2+0x292>
 80065fa:	ec47 6b10 	vmov	d0, r6, r7
 80065fe:	f1ca 0000 	rsb	r0, sl, #0
 8006602:	f000 f949 	bl	8006898 <scalbn>
 8006606:	ec57 6b10 	vmov	r6, r7, d0
 800660a:	4ba0      	ldr	r3, [pc, #640]	; (800688c <__kernel_rem_pio2+0x694>)
 800660c:	ee10 0a10 	vmov	r0, s0
 8006610:	2200      	movs	r2, #0
 8006612:	4639      	mov	r1, r7
 8006614:	f7fa fa22 	bl	8000a5c <__aeabi_dcmpge>
 8006618:	b1f8      	cbz	r0, 800665a <__kernel_rem_pio2+0x462>
 800661a:	4b9d      	ldr	r3, [pc, #628]	; (8006890 <__kernel_rem_pio2+0x698>)
 800661c:	2200      	movs	r2, #0
 800661e:	4630      	mov	r0, r6
 8006620:	4639      	mov	r1, r7
 8006622:	f7f9 ff95 	bl	8000550 <__aeabi_dmul>
 8006626:	f7fa fa2d 	bl	8000a84 <__aeabi_d2iz>
 800662a:	4680      	mov	r8, r0
 800662c:	f7f9 ff26 	bl	800047c <__aeabi_i2d>
 8006630:	4b96      	ldr	r3, [pc, #600]	; (800688c <__kernel_rem_pio2+0x694>)
 8006632:	2200      	movs	r2, #0
 8006634:	f7f9 ff8c 	bl	8000550 <__aeabi_dmul>
 8006638:	460b      	mov	r3, r1
 800663a:	4602      	mov	r2, r0
 800663c:	4639      	mov	r1, r7
 800663e:	4630      	mov	r0, r6
 8006640:	f7f9 fdce 	bl	80001e0 <__aeabi_dsub>
 8006644:	f7fa fa1e 	bl	8000a84 <__aeabi_d2iz>
 8006648:	1c65      	adds	r5, r4, #1
 800664a:	ab0c      	add	r3, sp, #48	; 0x30
 800664c:	f10a 0a18 	add.w	sl, sl, #24
 8006650:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006654:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006658:	e71f      	b.n	800649a <__kernel_rem_pio2+0x2a2>
 800665a:	4630      	mov	r0, r6
 800665c:	4639      	mov	r1, r7
 800665e:	f7fa fa11 	bl	8000a84 <__aeabi_d2iz>
 8006662:	ab0c      	add	r3, sp, #48	; 0x30
 8006664:	4625      	mov	r5, r4
 8006666:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800666a:	e716      	b.n	800649a <__kernel_rem_pio2+0x2a2>
 800666c:	ab0c      	add	r3, sp, #48	; 0x30
 800666e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006672:	f7f9 ff03 	bl	800047c <__aeabi_i2d>
 8006676:	4632      	mov	r2, r6
 8006678:	463b      	mov	r3, r7
 800667a:	f7f9 ff69 	bl	8000550 <__aeabi_dmul>
 800667e:	4642      	mov	r2, r8
 8006680:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006684:	464b      	mov	r3, r9
 8006686:	4630      	mov	r0, r6
 8006688:	4639      	mov	r1, r7
 800668a:	f7f9 ff61 	bl	8000550 <__aeabi_dmul>
 800668e:	3c01      	subs	r4, #1
 8006690:	4606      	mov	r6, r0
 8006692:	460f      	mov	r7, r1
 8006694:	e713      	b.n	80064be <__kernel_rem_pio2+0x2c6>
 8006696:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800669a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800669e:	f7f9 ff57 	bl	8000550 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4648      	mov	r0, r9
 80066a8:	4651      	mov	r1, sl
 80066aa:	f7f9 fd9b 	bl	80001e4 <__adddf3>
 80066ae:	3701      	adds	r7, #1
 80066b0:	4681      	mov	r9, r0
 80066b2:	468a      	mov	sl, r1
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	429f      	cmp	r7, r3
 80066b8:	dc02      	bgt.n	80066c0 <__kernel_rem_pio2+0x4c8>
 80066ba:	9b06      	ldr	r3, [sp, #24]
 80066bc:	429f      	cmp	r7, r3
 80066be:	ddea      	ble.n	8006696 <__kernel_rem_pio2+0x49e>
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	ab48      	add	r3, sp, #288	; 0x120
 80066c4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80066c8:	e9c6 9a00 	strd	r9, sl, [r6]
 80066cc:	3c01      	subs	r4, #1
 80066ce:	e6fa      	b.n	80064c6 <__kernel_rem_pio2+0x2ce>
 80066d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	dc0b      	bgt.n	80066ee <__kernel_rem_pio2+0x4f6>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	dc39      	bgt.n	800674e <__kernel_rem_pio2+0x556>
 80066da:	d05d      	beq.n	8006798 <__kernel_rem_pio2+0x5a0>
 80066dc:	9b02      	ldr	r3, [sp, #8]
 80066de:	f003 0007 	and.w	r0, r3, #7
 80066e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80066e6:	ecbd 8b02 	vpop	{d8}
 80066ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d1f3      	bne.n	80066dc <__kernel_rem_pio2+0x4e4>
 80066f4:	9b05      	ldr	r3, [sp, #20]
 80066f6:	9500      	str	r5, [sp, #0]
 80066f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80066fc:	eb0d 0403 	add.w	r4, sp, r3
 8006700:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006704:	46a2      	mov	sl, r4
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f1aa 0a08 	sub.w	sl, sl, #8
 800670e:	dc69      	bgt.n	80067e4 <__kernel_rem_pio2+0x5ec>
 8006710:	46aa      	mov	sl, r5
 8006712:	f1ba 0f01 	cmp.w	sl, #1
 8006716:	f1a4 0408 	sub.w	r4, r4, #8
 800671a:	f300 8083 	bgt.w	8006824 <__kernel_rem_pio2+0x62c>
 800671e:	9c05      	ldr	r4, [sp, #20]
 8006720:	ab48      	add	r3, sp, #288	; 0x120
 8006722:	441c      	add	r4, r3
 8006724:	2000      	movs	r0, #0
 8006726:	2100      	movs	r1, #0
 8006728:	2d01      	cmp	r5, #1
 800672a:	f300 809a 	bgt.w	8006862 <__kernel_rem_pio2+0x66a>
 800672e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006732:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006736:	f1bb 0f00 	cmp.w	fp, #0
 800673a:	f040 8098 	bne.w	800686e <__kernel_rem_pio2+0x676>
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	e9c3 7800 	strd	r7, r8, [r3]
 8006744:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006748:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800674c:	e7c6      	b.n	80066dc <__kernel_rem_pio2+0x4e4>
 800674e:	9e05      	ldr	r6, [sp, #20]
 8006750:	ab48      	add	r3, sp, #288	; 0x120
 8006752:	441e      	add	r6, r3
 8006754:	462c      	mov	r4, r5
 8006756:	2000      	movs	r0, #0
 8006758:	2100      	movs	r1, #0
 800675a:	2c00      	cmp	r4, #0
 800675c:	da33      	bge.n	80067c6 <__kernel_rem_pio2+0x5ce>
 800675e:	f1bb 0f00 	cmp.w	fp, #0
 8006762:	d036      	beq.n	80067d2 <__kernel_rem_pio2+0x5da>
 8006764:	4602      	mov	r2, r0
 8006766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800676a:	9c04      	ldr	r4, [sp, #16]
 800676c:	e9c4 2300 	strd	r2, r3, [r4]
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006778:	f7f9 fd32 	bl	80001e0 <__aeabi_dsub>
 800677c:	ae4a      	add	r6, sp, #296	; 0x128
 800677e:	2401      	movs	r4, #1
 8006780:	42a5      	cmp	r5, r4
 8006782:	da29      	bge.n	80067d8 <__kernel_rem_pio2+0x5e0>
 8006784:	f1bb 0f00 	cmp.w	fp, #0
 8006788:	d002      	beq.n	8006790 <__kernel_rem_pio2+0x598>
 800678a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800678e:	4619      	mov	r1, r3
 8006790:	9b04      	ldr	r3, [sp, #16]
 8006792:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006796:	e7a1      	b.n	80066dc <__kernel_rem_pio2+0x4e4>
 8006798:	9c05      	ldr	r4, [sp, #20]
 800679a:	ab48      	add	r3, sp, #288	; 0x120
 800679c:	441c      	add	r4, r3
 800679e:	2000      	movs	r0, #0
 80067a0:	2100      	movs	r1, #0
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	da09      	bge.n	80067ba <__kernel_rem_pio2+0x5c2>
 80067a6:	f1bb 0f00 	cmp.w	fp, #0
 80067aa:	d002      	beq.n	80067b2 <__kernel_rem_pio2+0x5ba>
 80067ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067b0:	4619      	mov	r1, r3
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	e9c3 0100 	strd	r0, r1, [r3]
 80067b8:	e790      	b.n	80066dc <__kernel_rem_pio2+0x4e4>
 80067ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80067be:	f7f9 fd11 	bl	80001e4 <__adddf3>
 80067c2:	3d01      	subs	r5, #1
 80067c4:	e7ed      	b.n	80067a2 <__kernel_rem_pio2+0x5aa>
 80067c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80067ca:	f7f9 fd0b 	bl	80001e4 <__adddf3>
 80067ce:	3c01      	subs	r4, #1
 80067d0:	e7c3      	b.n	800675a <__kernel_rem_pio2+0x562>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	e7c8      	b.n	800676a <__kernel_rem_pio2+0x572>
 80067d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80067dc:	f7f9 fd02 	bl	80001e4 <__adddf3>
 80067e0:	3401      	adds	r4, #1
 80067e2:	e7cd      	b.n	8006780 <__kernel_rem_pio2+0x588>
 80067e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80067e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	4632      	mov	r2, r6
 80067f4:	463b      	mov	r3, r7
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fcf3 	bl	80001e4 <__adddf3>
 80067fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7f9 fce9 	bl	80001e0 <__aeabi_dsub>
 800680e:	4632      	mov	r2, r6
 8006810:	463b      	mov	r3, r7
 8006812:	f7f9 fce7 	bl	80001e4 <__adddf3>
 8006816:	ed9d 7b06 	vldr	d7, [sp, #24]
 800681a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800681e:	ed8a 7b00 	vstr	d7, [sl]
 8006822:	e770      	b.n	8006706 <__kernel_rem_pio2+0x50e>
 8006824:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006828:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800682c:	4640      	mov	r0, r8
 800682e:	4632      	mov	r2, r6
 8006830:	463b      	mov	r3, r7
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fcd6 	bl	80001e4 <__adddf3>
 8006838:	e9cd 0100 	strd	r0, r1, [sp]
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	f7f9 fccc 	bl	80001e0 <__aeabi_dsub>
 8006848:	4632      	mov	r2, r6
 800684a:	463b      	mov	r3, r7
 800684c:	f7f9 fcca 	bl	80001e4 <__adddf3>
 8006850:	ed9d 7b00 	vldr	d7, [sp]
 8006854:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006858:	ed84 7b00 	vstr	d7, [r4]
 800685c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006860:	e757      	b.n	8006712 <__kernel_rem_pio2+0x51a>
 8006862:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006866:	f7f9 fcbd 	bl	80001e4 <__adddf3>
 800686a:	3d01      	subs	r5, #1
 800686c:	e75c      	b.n	8006728 <__kernel_rem_pio2+0x530>
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	601f      	str	r7, [r3, #0]
 8006874:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006878:	605c      	str	r4, [r3, #4]
 800687a:	609d      	str	r5, [r3, #8]
 800687c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006880:	60d3      	str	r3, [r2, #12]
 8006882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006886:	6110      	str	r0, [r2, #16]
 8006888:	6153      	str	r3, [r2, #20]
 800688a:	e727      	b.n	80066dc <__kernel_rem_pio2+0x4e4>
 800688c:	41700000 	.word	0x41700000
 8006890:	3e700000 	.word	0x3e700000
 8006894:	00000000 	.word	0x00000000

08006898 <scalbn>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	ec55 4b10 	vmov	r4, r5, d0
 800689e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80068a2:	4606      	mov	r6, r0
 80068a4:	462b      	mov	r3, r5
 80068a6:	b999      	cbnz	r1, 80068d0 <scalbn+0x38>
 80068a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80068ac:	4323      	orrs	r3, r4
 80068ae:	d03f      	beq.n	8006930 <scalbn+0x98>
 80068b0:	4b35      	ldr	r3, [pc, #212]	; (8006988 <scalbn+0xf0>)
 80068b2:	4629      	mov	r1, r5
 80068b4:	ee10 0a10 	vmov	r0, s0
 80068b8:	2200      	movs	r2, #0
 80068ba:	f7f9 fe49 	bl	8000550 <__aeabi_dmul>
 80068be:	4b33      	ldr	r3, [pc, #204]	; (800698c <scalbn+0xf4>)
 80068c0:	429e      	cmp	r6, r3
 80068c2:	4604      	mov	r4, r0
 80068c4:	460d      	mov	r5, r1
 80068c6:	da10      	bge.n	80068ea <scalbn+0x52>
 80068c8:	a327      	add	r3, pc, #156	; (adr r3, 8006968 <scalbn+0xd0>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	e01f      	b.n	8006910 <scalbn+0x78>
 80068d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80068d4:	4291      	cmp	r1, r2
 80068d6:	d10c      	bne.n	80068f2 <scalbn+0x5a>
 80068d8:	ee10 2a10 	vmov	r2, s0
 80068dc:	4620      	mov	r0, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	f7f9 fc80 	bl	80001e4 <__adddf3>
 80068e4:	4604      	mov	r4, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	e022      	b.n	8006930 <scalbn+0x98>
 80068ea:	460b      	mov	r3, r1
 80068ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80068f0:	3936      	subs	r1, #54	; 0x36
 80068f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80068f6:	4296      	cmp	r6, r2
 80068f8:	dd0d      	ble.n	8006916 <scalbn+0x7e>
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	a11c      	add	r1, pc, #112	; (adr r1, 8006970 <scalbn+0xd8>)
 80068fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006902:	da02      	bge.n	800690a <scalbn+0x72>
 8006904:	a11c      	add	r1, pc, #112	; (adr r1, 8006978 <scalbn+0xe0>)
 8006906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800690a:	a319      	add	r3, pc, #100	; (adr r3, 8006970 <scalbn+0xd8>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fe1e 	bl	8000550 <__aeabi_dmul>
 8006914:	e7e6      	b.n	80068e4 <scalbn+0x4c>
 8006916:	1872      	adds	r2, r6, r1
 8006918:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800691c:	428a      	cmp	r2, r1
 800691e:	dcec      	bgt.n	80068fa <scalbn+0x62>
 8006920:	2a00      	cmp	r2, #0
 8006922:	dd08      	ble.n	8006936 <scalbn+0x9e>
 8006924:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006928:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800692c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006930:	ec45 4b10 	vmov	d0, r4, r5
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800693a:	da08      	bge.n	800694e <scalbn+0xb6>
 800693c:	2d00      	cmp	r5, #0
 800693e:	a10a      	add	r1, pc, #40	; (adr r1, 8006968 <scalbn+0xd0>)
 8006940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006944:	dac0      	bge.n	80068c8 <scalbn+0x30>
 8006946:	a10e      	add	r1, pc, #56	; (adr r1, 8006980 <scalbn+0xe8>)
 8006948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800694c:	e7bc      	b.n	80068c8 <scalbn+0x30>
 800694e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006952:	3236      	adds	r2, #54	; 0x36
 8006954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006958:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800695c:	4620      	mov	r0, r4
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <scalbn+0xf8>)
 8006960:	2200      	movs	r2, #0
 8006962:	e7d5      	b.n	8006910 <scalbn+0x78>
 8006964:	f3af 8000 	nop.w
 8006968:	c2f8f359 	.word	0xc2f8f359
 800696c:	01a56e1f 	.word	0x01a56e1f
 8006970:	8800759c 	.word	0x8800759c
 8006974:	7e37e43c 	.word	0x7e37e43c
 8006978:	8800759c 	.word	0x8800759c
 800697c:	fe37e43c 	.word	0xfe37e43c
 8006980:	c2f8f359 	.word	0xc2f8f359
 8006984:	81a56e1f 	.word	0x81a56e1f
 8006988:	43500000 	.word	0x43500000
 800698c:	ffff3cb0 	.word	0xffff3cb0
 8006990:	3c900000 	.word	0x3c900000
 8006994:	00000000 	.word	0x00000000

08006998 <floor>:
 8006998:	ec51 0b10 	vmov	r0, r1, d0
 800699c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80069a8:	2e13      	cmp	r6, #19
 80069aa:	ee10 5a10 	vmov	r5, s0
 80069ae:	ee10 8a10 	vmov	r8, s0
 80069b2:	460c      	mov	r4, r1
 80069b4:	dc31      	bgt.n	8006a1a <floor+0x82>
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	da14      	bge.n	80069e4 <floor+0x4c>
 80069ba:	a333      	add	r3, pc, #204	; (adr r3, 8006a88 <floor+0xf0>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fc10 	bl	80001e4 <__adddf3>
 80069c4:	2200      	movs	r2, #0
 80069c6:	2300      	movs	r3, #0
 80069c8:	f7fa f852 	bl	8000a70 <__aeabi_dcmpgt>
 80069cc:	b138      	cbz	r0, 80069de <floor+0x46>
 80069ce:	2c00      	cmp	r4, #0
 80069d0:	da53      	bge.n	8006a7a <floor+0xe2>
 80069d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80069d6:	4325      	orrs	r5, r4
 80069d8:	d052      	beq.n	8006a80 <floor+0xe8>
 80069da:	4c2d      	ldr	r4, [pc, #180]	; (8006a90 <floor+0xf8>)
 80069dc:	2500      	movs	r5, #0
 80069de:	4621      	mov	r1, r4
 80069e0:	4628      	mov	r0, r5
 80069e2:	e024      	b.n	8006a2e <floor+0x96>
 80069e4:	4f2b      	ldr	r7, [pc, #172]	; (8006a94 <floor+0xfc>)
 80069e6:	4137      	asrs	r7, r6
 80069e8:	ea01 0307 	and.w	r3, r1, r7
 80069ec:	4303      	orrs	r3, r0
 80069ee:	d01e      	beq.n	8006a2e <floor+0x96>
 80069f0:	a325      	add	r3, pc, #148	; (adr r3, 8006a88 <floor+0xf0>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f7f9 fbf5 	bl	80001e4 <__adddf3>
 80069fa:	2200      	movs	r2, #0
 80069fc:	2300      	movs	r3, #0
 80069fe:	f7fa f837 	bl	8000a70 <__aeabi_dcmpgt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d0eb      	beq.n	80069de <floor+0x46>
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	bfbe      	ittt	lt
 8006a0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006a0e:	4133      	asrlt	r3, r6
 8006a10:	18e4      	addlt	r4, r4, r3
 8006a12:	ea24 0407 	bic.w	r4, r4, r7
 8006a16:	2500      	movs	r5, #0
 8006a18:	e7e1      	b.n	80069de <floor+0x46>
 8006a1a:	2e33      	cmp	r6, #51	; 0x33
 8006a1c:	dd0b      	ble.n	8006a36 <floor+0x9e>
 8006a1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006a22:	d104      	bne.n	8006a2e <floor+0x96>
 8006a24:	ee10 2a10 	vmov	r2, s0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	f7f9 fbdb 	bl	80001e4 <__adddf3>
 8006a2e:	ec41 0b10 	vmov	d0, r0, r1
 8006a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a36:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006a3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a3e:	40df      	lsrs	r7, r3
 8006a40:	4238      	tst	r0, r7
 8006a42:	d0f4      	beq.n	8006a2e <floor+0x96>
 8006a44:	a310      	add	r3, pc, #64	; (adr r3, 8006a88 <floor+0xf0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fbcb 	bl	80001e4 <__adddf3>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2300      	movs	r3, #0
 8006a52:	f7fa f80d 	bl	8000a70 <__aeabi_dcmpgt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d0c1      	beq.n	80069de <floor+0x46>
 8006a5a:	2c00      	cmp	r4, #0
 8006a5c:	da0a      	bge.n	8006a74 <floor+0xdc>
 8006a5e:	2e14      	cmp	r6, #20
 8006a60:	d101      	bne.n	8006a66 <floor+0xce>
 8006a62:	3401      	adds	r4, #1
 8006a64:	e006      	b.n	8006a74 <floor+0xdc>
 8006a66:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	40b3      	lsls	r3, r6
 8006a6e:	441d      	add	r5, r3
 8006a70:	45a8      	cmp	r8, r5
 8006a72:	d8f6      	bhi.n	8006a62 <floor+0xca>
 8006a74:	ea25 0507 	bic.w	r5, r5, r7
 8006a78:	e7b1      	b.n	80069de <floor+0x46>
 8006a7a:	2500      	movs	r5, #0
 8006a7c:	462c      	mov	r4, r5
 8006a7e:	e7ae      	b.n	80069de <floor+0x46>
 8006a80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006a84:	e7ab      	b.n	80069de <floor+0x46>
 8006a86:	bf00      	nop
 8006a88:	8800759c 	.word	0x8800759c
 8006a8c:	7e37e43c 	.word	0x7e37e43c
 8006a90:	bff00000 	.word	0xbff00000
 8006a94:	000fffff 	.word	0x000fffff

08006a98 <_init>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_fini>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr
